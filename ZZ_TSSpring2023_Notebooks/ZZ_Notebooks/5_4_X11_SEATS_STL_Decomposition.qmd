---
title: "5_4_X11_SEATS_ARIMA"
author: "Juan Garbayo - TS Analysis - Spring 2023"
format: html
editor: source
params:
  print_sol: true
  print_sol_int: true
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# References

1. Hyndman, R.J., & Athanasopoulos, G., 2021. *Forecasting: principles and practice*. 3rd edition.
2. Dagum, E. B., & Bianconcini, S. (2016). Seasonal adjustment methods and real time trend-cycle estimation. Springer.
3. https://www2.census.gov/software/x-13arima-seats/x-13-data/documentation/docx13as.pdf
4. https://feasts.tidyverts.org/reference/X_13ARIMA_SEATS.html
5. http://www.seasonal.website/seasonal.html
6. Cleveland, R. B., Cleveland, W. S., McRae, J. E., & Terpenning, I. J. (1990). STL: A seasonal-trend decomposition procedure based on loess. Journal of Official Statistics, 6(1), 3â€“33.
7. Local Regression: https://en.wikipedia.org/wiki/Local_regression
8. https://www.theguardian.com/news/datablog/2014/oct/09/abs-jobs-and-unemployment-figures-key-questions-answered-by-an-expert

# Packages

```{r, error=FALSE, warning=FALSE, message = FALSE}
library(fpp3)
library(seasonal)
library(fma)
```

# Introduction

Statistical agencies (e.g. US Census Bureau and the Australian Bureau of Statistics) develop and mantain a number of official time series methods that standardize analyses. They have developed their own decomposition procedures which are used for seasonal adjustment. Most of these methods use the X-11 method, the SEATS method or a combination of the two.

We will discuss now the X-11 method, the SEATS method and the STL method.

For the methods discussed now, you will need to have installed the `seasonal` package in R (see reference [5]).

# Shortcomings of the classical decomposition method

* No estimate of the trend-cycle or the remainder for the first few and last observations
* Seasonal component repeats from year to year (remains constant)
* Not robust enough against unusual values or outliers in the series.

# X-11 Method

Based on classical decomposition but includes many extra steps and features in order to overcome the drawbacks of classical decomposition. 

A good introduction to the details of this method of seasonal adjustment (beyond the scope of the course) can be found in ref [2], section 4.1.1.

## X-11 - Advantages

* Trend-cycle estimates are available for all observations (including end-points).
* Seasonal component is allowed to vary slowly over time.
* Completely automated choices for trend and seasonal changes.
* Relatively robust to outliers and level shifts in the time series. 
* Handles (see definitions at the end of the notebook).
  + **Trading day effects**
  + **Holiday factors can be estimated**
  
## X-11 - Shortcomings

* Developed **only for quarterly and monthly data.**
  + Does not handle other seasonality (daily, hourly, weekly...)
  + Most common data used by statistical agencies.

## X-11 Documentation

We will use the X11 procedure for seasonal adjustment through the `X_13ARIMA_SEATS()` function from the `feasts` package (reference [4]). This function is a somewhat simplified interface to use the `seasonal` package (reference [5]), which is an R-interface for the X-13ARIMA-SEATS model as implemented by the U.S. Census Bureau (reference [3]).

The details about the arguments to the function are best specified in [3] (section 7).

## X-11 Example

Below a simple example of how to use the X11. Have a look at the above references mentioned under the section X-11 Documentation for a more advanced use of the options available:

```{r}
# Extraction of the us_retail_employment series
us_retail_employment <- us_employment %>%
  filter(year(Month) >= 1990, Title == "Retail Trade") %>%
  select(-Series_ID)

x11_dcmp <- us_retail_employment %>%
  model(x11 = X_13ARIMA_SEATS(Employed ~ x11())) %>%
  components()
autoplot(x11_dcmp) +
  labs(title =
    "Decomposition of total US retail employment using X-11.")
```

### X-11 Variation of the seasonal component over time

Since now the seasonal component is allowed to slowly change over time, it can be helpful to visualize its variation over time:

```{r}
x11_dcmp %>%
  gg_subseries(seasonal)
```

```{r}

```
* Most seasonal components remain relatively stable over time. 
* December experiences the great seasonal variation.

## Defining arguments for the X11-decomposition

```{r}
x11_dcmp <- us_retail_employment %>%
  # transform(`function` = "none"): tells the model to not perform any transformation on the data
  # x11(`mode` = "add"): tells the model to use an additive rather than a multiplicative decomposition
  model(x11 = X_13ARIMA_SEATS(Employed ~ transform(`function` = "none") + x11(`mode` = "add"))) %>%
  components()
autoplot(x11_dcmp) +
  labs(title =
    "Decomposition of total US retail employment using X-11.")
```

## X-11 Exercise

1. Perform a decomposition of the retail series below using the X11 method.
2. Depict the variation of the seasonal components over time using a `gg_subseries()` plot (seasonal subseries plot).

```{r}
retail_series <- aus_retail %>%
  filter(`Series ID` == "A3349767W")

autoplot(retail_series)
```

```{r, include=params$print_sol_int}
decomp <- retail_series %>%
  model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) %>%
  components()
decomp %>% autoplot()
```

```{r, include=params$print_sol_int}
decomp %>%
  gg_subseries(seasonal)
```

```{r}

```

# SEATS

Stands for "Seasonal Extraction in ARIMA Time Series" (ARIMA models have not been discussed yet).

## SEATS advantages and shortcomings

Same as for X-11 decomposition

## SEATS Documentation

We will use the SEATS procedure for seasonal adjustment through the `X_13ARIMA_SEATS()` function from the `feasts` package (reference [4]). This function is a somewhat simplified interface to use the `seasonal` package (reference [5]), which is an R-interface for the X-13ARIMA-SEATS model as implemented by the U.S. Census Bureau (reference [3]).

The details about the arguments to the function are best specified in ref [3] (section 7).

## SEATS example

```{r}
seats_dcmp <- us_retail_employment %>%
  model(seats = X_13ARIMA_SEATS(Employed ~ seats())) %>%
  components()
autoplot(seats_dcmp) +
  labs(title =
    "Decomposition of total US retail employment using SEATS")
```

```{r}

```

Note that the above decomposition is neither additive nor multiplicative, but rather a mixed model!

The SEATS algorithm has looked for an optimal solution and it turns out this algorithm works best with something that is neither additive or multiplicative.

```{r}
seats_dcmp %>%
  gg_subseries(seasonal)
```

```{r}

```

Results are quite similar to those obtained using the X-11 Method

## SEATS exercise

1. Perform a decomposition of the retail series below using the X11 method.
2. Depict the variation of the seasonal components over time using a `gg_subseries()` plot (seasonal subseries plot).

```{r}
retail_series <- aus_retail %>%
  filter(`Series ID` == "A3349767W")

autoplot(retail_series)
```

```{r, include=params$print_sol_int}
retail_seats_decomp <- retail_series %>%
  model(x11 = X_13ARIMA_SEATS(Turnover ~ seats())) %>%
  components()
retail_seats_decomp %>% autoplot()
```

```{r, include=params$print_sol_int}
retail_seats_decomp %>%
  gg_subseries(seasonal)
```

# STL

Acronym for *"Seasonal and Trend Decomposition using LOESS"*

**LOESS**: it is a method of **local regression** for estimating non-linear relationships. It stands for *LOcally Estimated Scatterplot Smoothing*. 

The following is a cursory description of how a LOESS curve is computed:

Suppose you have pairs of data points of the form $\bar{X} = {xi, yi}$. The LOESS regression curve

* A positive integer $q < n$ is chosen (n = number of points)
* For each point $\bar{X}$, the q points of your data that are closest to that point are selected.
  + Each point is given a neighborhood weight based on its distance to $\bar{X}$.
  + The closest a point is to $\bar{X}$, the greater its weight.
* These weights are then used to fit a locally fit polinomial of degree $d$ to the data.
  + For STL $d$ = 1 or 2. That is, the fitting is locally-linear or locally-quadratic.

In summary, subsets of data used for each weighted least squares fit in LOESS are determined by a nearest neighbors algorithm. The data analyst is not required to specify a global function of any form to fit a model to the data, only to fit segments of the data.

```{r, echo=FALSE, out.width='70%', fig.align="center", fig.cap="2x4-MA"}
knitr::include_graphics('./figs/8_1_loess.png')
```

Using LOESS, the **STL algorithm** is capable of recursively approximating the components of the time series. For details on how this is achieved, refer to [6], section 2.1.

## STL Advantages

* Handles any type of seasonallity (not only monthly or quarterly)
* Seasonal component allowed to change over time. 
  + Rate of change can be controlled by the user.
* The smoothness of the trend-cycle can also be controlled by the user
* It can be robust to outliers

## STL Disadvantages

* Does not handle trading day or calendar variation automatically.
* Only works for additive decompositions
  + Multiplicative schemes can be made additive with a log transformation.
  + Decompositions that are between additive and multiplicative can be obtained using a Box-Cox transformation
* It can be robust to outliers (i.e., the user can specify a robust decomposition), so that occasional unusual observations will not affect the estimates of the trend-cycle and seasonal components. They will, however, affect the remainder component.
* Might require user tuning to fit the LOESS windows
  
## STL main parameters

* **Trend-cycle window** `trend(window = ?)`
  + Controls how rapidly the trend-cycle component changes.
  + Smaller values for more rapid changes.
  + Number of consecutive observations to be used when estimating the trend.
  + Must be an ODD number.

* **Seasonal-window** `season(window = ?)`
  + Controls how rapidly the seasonal component changes
  + Smaller values for more rapid changes.
  + Number of consecutive years to be used in estimating each value of the seasonal component.
  + Must be an ODD number.
  + `season(window='periodic')` sets the seasonal window to be `infinite`, which forces the seasonal component to be identical for every year.
  
* **Default values**
  + `season(window = 13)`. This usually provides a good balance between **overfitting the seasonality and allowing it to slowly change over time**.
  + `trend(window = 21)`


## STL Example 1

```{r}
stl_dcmp_1 <- us_retail_employment %>%
  model(stl = STL(Employed)) %>%
  components()
```

```{r}
stl_dcmp_1 %>% autoplot()
```

```{r}

```

The default setting of `season(window = 13)` does not allow the trend component to be flexible enough to adapt to the 2008 financial crisis. As a result, the effects of this financial crisis leak into de remainder component.

## STL Example 2

Manually adjust the value of the trend window (remember the default is 13) so that the effect of the financial crisis is better captured by the STL decomposition:

```{r, eval=FALSE, include=!params$print_sol_int}
us_retail_employment %>%
  model(
    STL(Employed ~ trend(window = Integer) + # Manually change this value from the default 13
                   season(window = "periodic"),
        robust = TRUE)) %>%
  components() %>%
  autoplot()
```


```{r, include=params$print_sol_int}
us_retail_employment %>%
  model(
    STL(Employed ~ trend(window = 7) + # Manually change this value from the default 13
                   season(window = "periodic"),
        robust = TRUE)) %>%
  components() %>%
  autoplot()
```

```{r, eval=FALSE, include=params$print_sol_int}
Choosing appropriate values for the STL decomposition can be difficult and 
may require iterating over a set of values until a decomposition with a 
remainder that fulfils certain features is achieved.

In some instances it might not be possible to obtain a decomposition that works
well in all time periods.

We will see this in the exercises
```

# IMPORTANT: Summary of features to be satisfied by a good decomposition

1. A remainder component with a smaller variance than the seasonal and trend component. In other words, the trend and the seasonal component capture most of the structure in the time series.
2. A remainder component with an autocorrelation that is as small as possibe. In other words, the trend and the seasonal component capture most of the time information of the time series.

In some instances it might not be possible to obtain a decomposition that fulfills these two features for the entirety of the time range considered.

# Some definitions

* **Trading day effects**: variations associated with the composition of the calendar which are due to the fact that the activities of some days of the week are more important than others. 
  + Only non-leap year Februaries have four of each day (four Mondays, for Tuesdays...). 
  + **All other months have an excess of some types of days.** **If an activity is higher on some days compared to others, then the series can have a trading day effect**
* **Holiday factors**: arise from holidays whose dates vary over time if:
  (1) The activity measured by the series regularly increases or decreases around the date of the holiday.
  (2) The moving holiday or moving festival component is attributed to calendar variations, due to the fact that some holidays change date in successive years. 

* Effects of holidays with a fixed date (e.g. Christmas) are indistinguishable from fixed seasonal effects.     
* Examples of moving holidays are:
  + Easter (moves between months of march or April), Labor Day, Thanksgiving... found in American and Canadian time series.
  + Chinese New Year (depends on the lunar calendar).
  + Ramadan (falls 11 days earlier from year to year)

```{r, eval = FALSE, include = FALSE}
TODO:
  - include information on the seasonal strength and trend strength features.
```

# Homerwork 1. 

Labour force in Australia - Decomposition

The series `labour` details the number of persons in civilian labour force in Australia, each month, from February 1978 to August 1995.

Bear in mind that you need to **install and load the library `fma`** for the series to be available

```{r}
labour_tsibble <-as_tsibble(labour)
autoplot(labour_tsibble)
```

```{r}

```

## 1.1 Perform an STL decomposition of the data with the default values for the trend and seasonal window (that is, without specifying further parameters.)

```{r, include = params$print_sol}
stl_dcmp_1 <- labour_tsibble %>%
  model(stl = STL(value)) %>%
  components()

stl_dcmp_1 %>% autoplot()
```

## 1.2 Take a look at the crisis around 1991-1992 and answer these questions:

* Do the trend and or seasonal components adequately capture this crisis?
  
```{r, eval=FALSE, include=params$print_sol}
The trend does not adequately capture the crisis.
The default averaging window used for the moving average in the STL function
is too wide and the trend is relatively insensitive to these changes.
```

* What do you think of the time series components in the vicinity of this crisis?

```{r, eval=FALSE, include=params$print_sol}
The trend and seasonal component remain relatively insensitive to the crisis.
As a result most of the crisis is transferred to the remainder component.
```

* The grey bars printed on the left of the decomposition graphs when using `autoplot()` are created to compare the scale between graphs (the length of the  bar is the same on all graphs). Comparing the scale of the graphs, **do you think this is a good decomposition?** **why? why not?**
  
```{r, eval=FALSE, include=params$print_sol}
The decomposition does not seem sensible, at least around the crisis of 91-92.
There the fluctuations of the randim component are much greater than those
of the seasonal component. This is clear if one compares the grey bars in both graphs.
```

* How would you **change the window parameters so that the trend captures better the 91-92 crisis?** Perform several attempts to improve the STL decomposition.
  
```{r, include = params$print_sol}
# Reduction of the averaging windows to try to better capture the crisis at 91-92.
labour_tsibble %>%
  model(
    STL(value ~ trend(window = 5) + # Manually change this value from the default 13
                season(window = 5))
    ) %>%
  components() %>%
  autoplot()
```
```{r}

```

```{r, eval=FALSE, include=params$print_sol}
After multiple attempts, we see that the crisis is still cascaded down to the
remainder component to a great extent. In that region the remainder becomes
at least of the same order than the seasonal component, if not greater.

In this particular case the decomposition would not bring much to our analysis
in the vicinity of the crisis. Whatever forecasting model we created for this 
analysis would have to account foit this crisis. For example:

* Introducing macro regressors that related to the behavior of this 
  macro variable in the crisis.
* Introducing an intervention variable that would account for the crisis region.

Alternatively, we could exclude the crisis from our analysis.
```

# Homework 2. 

Repeat the decomposition of the time series of the average electricity consumption in Victoria (Australia), this time using an STL decomposition. Consider a seasonal period of 1 week (7 days).

Essentially we computed daily average demand and performed a decomposition of this time series. Previously we computed the classical decomposition. This time we going to use the STL decomposition.

```{r}
vic_elec_w <-
  vic_elec %>%
    index_by(Date) %>%
    summarize(avg_demand = mean(Demand)) %>%
    filter(year(Date) == 2012)
```

Note that now we need to specift `period = 7` within season. The decomposition with default window arguments would be:

```{r}
  vic_elec_w %>%
      model(
        decomp = STL(avg_demand ~ season(period = 7))
            ) %>%
      components() %>% 
      autoplot()
```

## 2.1 Do you see any problem with this decomposition?

```{r, eval = FALSE, include=params$print_sol}
At the beginning and the end of the time series, where the seasonal pattern (see
the original time series) deviates from the regular pattern in the middle of the
time series, the variance of the remainder component becomes much larger than in
the central region.

So much so that its variance is greater than the variance of the seasonal components
and even of the same order of magnitude as the variance of the trend component.

A good decomposition would be able to capture the different patterns of the seasonal
component, having a window that can adapt to the different time-scales that
make up the dynamic of the time series.
```

## 2.2 Adjust the windows of the seasonal and the trend component to improve the STL decomposition to the extent that it is possible:

A possible expected output is depicted below:

```{r, echo=params$print_sol}
vic_elec_w %>%
    model(
      decomp = STL(avg_demand ~ season(period = 7, window = 5) + 
                                trend(window = 7))
          ) %>%
    components() %>% 
    autoplot()
```