---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)
PBS_h02
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
PBS_h02_montly <- select(PBS_h02, Month, Concession, Cost) %>%
  index_by(Month) %>%
  summarise(
    Total_Costs_Month = sum(Cost, na.rm = TRUE),
  )

PBS_h02_montly
```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
autoplot(PBS_h02_montly) +
  scale_x_yearmonth(date_breaks = "5 year",
                  date_minor_breaks = "1 years", 
                  date_labels = "%y-%b") +

# Flip x-labels by 90 degrees
theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

**Your interpretation goes here**: From the series above we can see that there is a seasonality. At the beginning of the year costs decrease rapidly, and as the years goes by they increase dramatically. We can also see that there is a slight upward trend.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
# Your code goes here
gg_season(PBS_h02_montly)
PBS_h02_montly %>%
  gg_subseries(Total_Costs_Month, period = "year") + 
  labs(
    y = "[MW]",
    title = "Total electricity demand for Victoria, Australia"
  )
```

------------------------------------------------------------------------

**Your interpretation goes here**: Looking at the season's graph we see that throughout the years total costs increase. This statement is backed up by the subseries graph, where we see that each month the costs were higher than the previous month.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
# Your code goes here
PBS_h02_montly %>%
  ACF(lag_max = 120) %>%
  autoplot()
```

------------------------------------------------------------------------

**Your interpretation goes here**: The series exhibits both a positive trend and yearly seasonality. We can see this because of the spikes at lags multiple of 12. Because this is monthly data, this corresponds to a year.

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
total_private <- us_employment %>%
  filter(Title == "Total Private")

total_private
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
# Your code goes here
autoplot(total_private) +
  scale_x_yearmonth(date_breaks = "10 year",
                  date_minor_breaks = "1 years", 
                  date_labels = "%y-%b") +

theme(axis.text.x = element_text(angle = 90))
```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
gg_season(total_private)
total_private %>%
  gg_subseries(Employed, period = "year") 

```

------------------------------------------------------------------------

**Your interpretation goes here**: From the season's plot, we see that we have a positive trend, where each year the number of employed increases. And the subseries graph shows that these increase was very similar each month, throughout the years.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
total_private %>%
  ACF(Employed, lag_max = 160) %>%
  autoplot()
```

------------------------------------------------------------------------

**Your interpretation goes here**: The series exhibits a positive trend and no seasonality. There are no spikes in the lag, therefore, no seasonality. It also shows a high autocorrelation between lags.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to find what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}
# Your code goes here
peak_closing_stock <- gafa_stock %>%
  group_by(Symbol) %>%
  filter(Close == max(Close)) 

peak_closing_stock
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))

damzn
```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here:** When one writes TRUE, you create a new index. Since the data has now less value, it will need to re-index all the data instead of storing them as they used to be.

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
# Your code goes here
(damzn$diff2 = lag(damzn$diff, 1))
damzn
```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}
# Your code goes here
damzn %>%
  autoplot(Close) +
  scale_x_yearweek(date_breaks = "20 days",
                  date_minor_breaks = "10 days", 
                  date_labels = "%y-%b") +

theme(axis.text.x = element_text(angle = 90))

damzn %>%
  autoplot(diff) +
  scale_x_yearweek(date_breaks = "20 days",
                  date_minor_breaks = "10 days", 
                  date_labels = "%y-%b") +

theme(axis.text.x = element_text(angle = 90))

damzn %>%
  autoplot(diff2) +
  scale_x_yearweek(date_breaks = "20 days",
                  date_minor_breaks = "10 days", 
                  date_labels = "%y-%b") +

theme(axis.text.x = element_text(angle = 90))
```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
# Your code goes here
damzn %>%
  ACF(Close, lag_max = 100) %>%
  autoplot()

damzn %>%
  ACF(diff, lag_max = 100) %>%
  autoplot()

damzn %>%
  ACF(diff2, lag_max = 100) %>%
  autoplot()
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here**: Looking at the auto correlations we can see that just two lags go out of the blue boundary. This means that 98% of them lie inside the boundaries and therefore there is no correlation between the series. This means that it is white noise.

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here**: On the contrary, more than 5% of the lags lie outside the boundaries, meaning that there is autocorrelation between the series. This means that the closing dates can not be considered white noise.

------------------------------------------------------------------------
