---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
A1 <- PBS_h02 %>%
  index_by(month = yearmonth(Month)) %>%
  summarise(total_cost = sum(Cost))
```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
autoplot(A1) +
scale_x_yearmonth(breaks = "2 years",
                  minor_breaks = "1 year") +
xlab("months") + 
ylab("costs")
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

The above graph shows a yearly seasonality. We can observe that the changes in cost happen in a consistent pattern every year; starting low at the beginning peaking towards the end, and then fluctuating again at the beginning of the following year.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
A1 %>%
  gg_season(total_cost) + 
  labs(
    y = "cost",
    title = "seasonal plot"
  )

A1 %>%
  gg_subseries(total_cost) +
  labs(
    y = "cost",
    title = "seasonal subseries plot",
  )
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

The graphs above further emphasize the seasonal behavior of the data. The seasonal plot shows jumps in costs each year yet the jumps get smaller as the years progress. Both plots depict the pattern showing how the cost is highest in january, fluctuates drastically until february, and steadily increases afterwards.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
A1 %>%
  ACF(lag_max = 24) %>%
  autoplot()

A1 %>%
  gg_lag(y = total_cost, geom = "point", lags = 1:12)

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 30. words)

Both the ACF and lag plots show yearly seasonality with the 12 month lag matching on the lag plot and the spikes every 12 months on the ACF. The lag plots show a positive linear pattern suggesting autocorrelation.

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
total_private <- us_employment %>%
  filter(Title == "Total Private")

total_private
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
autoplot(total_private) +
scale_x_yearmonth(breaks = "10 years",
                  minor_breaks = "1 year") +
xlab("months") + 
ylab("employed")
```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
total_private %>%
  gg_season(Employed) + 
  labs(
    y = "employed",
    title = "seasonal plot"
  )

total_private %>%
  gg_subseries(Employed) +
  labs(
    y = "employed",
    title = "seasonal subseries plot",
  )
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

The seasonal plot shows a yearly increase in the amount of employment yet no significant increase throughout the year. This can also be seen on the subseries plots all of which are fairly similar and show no excessive increase throughout the year, only a slight increase during the summer months.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
total_private %>%
  ACF(Employed) %>%
  autoplot()

total_private %>%
  gg_lag(y = Employed, geom = "point", lags = 1:12)

```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

The ACF clearly shows a trend in the data with the high peaks slowly decreasing as the amount of lags increase. It also demonstrates that the effect of trend is stonger than the seasonality. The lag plots show a positive linear pattern meaning there is a positive trend and an autocorrelation.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to finde what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}
gafa_stock %>%
  group_by(Symbol) %>%
  filter(Close == max(Close))
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))
```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here (max 30 words)**

After filtering the times would arranged in irregular intervals which is why it must be redefined and made regular to properly analyse

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
damzn[[paste0("diff2")]] = lag(damzn$diff, 1)
damzn
```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}
damzn %>%
  autoplot(Close) + 
  scale_x_yearweek(date_breaks = "20 days",
                      minor_breaks = "10 days")

damzn %>%
  autoplot(diff) + 
  scale_x_yearweek(date_breaks = "20 days",
                      minor_breaks = "10 days") 

damzn %>%
  autoplot(diff2) + 
  scale_x_yearweek(date_breaks = "20 days",
                      minor_breaks = "10 days")
```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
damzn %>%
  ACF(Close, lag_max = 100) %>%
  autoplot()

damzn %>%
  ACF(diff, lag_max = 100) %>%
  autoplot()
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

The differences in stock demonstrate white noise due to the fact that the autocorrelation remains close to 0 and only two of the spikes cross the bounds which in this case is less than the 5%

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

The original series does show a strong autocorrelation with most values above the bounds meaning it is not white noise and there is a strong autocorrelation which also proves that the data does not follow a random pattern.

------------------------------------------------------------------------
