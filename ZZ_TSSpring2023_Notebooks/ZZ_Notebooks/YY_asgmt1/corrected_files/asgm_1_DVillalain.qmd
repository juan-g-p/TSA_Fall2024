---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
library(patchwork)
library(GGally)
library(fma)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
# Your code goes here
dataframe1 <- PBS_h02 %>% 
  index_by(Month) %>%
  summarise(Value = sum(Cost) )

print(dataframe1)
```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
# Your code goes here
dataframe1 %>% 
  autoplot(Value) +
  scale_x_yearmonth(breaks = "1 year") +
  theme(axis.text.x = element_text(angle = 90))
  
```

**Your interpretation goes here** (max 50. words)

We can see a strong seasonality among years. The value increases a lot in the middle months of the year. We can also observe a that the graph has a multiplicative seasonality however it is not really strong.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
# Your code goes here
dataframe1 %>%
  gg_subseries(Value) +
  theme(legend.position = "none")

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words):

This is a confirmation of our initial hypothesis. We can see that, as time passes, there is more difference between the first month and the lat month (therefore it is multiplicative time series.) Moreover, the median increases.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
# Your code goes here
dataframe1 %>%
  ACF() %>%
  autoplot()

dataframe1 %>%
  gg_lag(y = Value, geom = "point", lags = 1:12) + theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 30. words)

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
dataframe2 <- us_employment %>%
  filter(Title == "Total Private")

dataframe2
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
# Your code goes here
autoplot(dataframe2) +
scale_x_yearweek(date_breaks = "10 years",
                  date_minor_breaks = "1 year") +
                theme(axis.text.x = element_text(angle = 90))
```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
dataframe2 %>% gg_season(Employed, period = "1 year") +
  labs(y="Employement", title="Us_employment")
  
dataframe2 %>% gg_subseries(Employed, period = "1 year") +
  labs(y = "Employement", title = "Us_employment",
  )
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

We can observe that the median stays the same across months and also the size of the seasonality effect. We can see that the graphs stay more or less the same.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
dataframe2 %>%
  ACF(y = Employed) %>%
    autoplot()

dataframe2 %>%
  gg_lag(y = Employed, geom = "point", lags = 1:12) + theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

As a confirmation for our hypothesis above, the are no major changes in the graph. Lags are more or less the same meaning there is a strong correlation between variables.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to finde what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}
# Your code goes here

dataframe3 <- gafa_stock %>% 
  group_by(Symbol) %>% 
  filter(Close == max(Close)) %>% 
  select(Symbol, Close)

dataframe3
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))
```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here (max 30 words)**

We need to re-index the data in order to have the data more organized as well as making the intervals equal.

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
# Your code goes here
damzn %>% 
  add_column(diff2 = lag(damzn$diff))
```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}
# Your code goes here
damzn %>%
  autoplot(Close) +
  scale_x_continuous(breaks = seq(1, max(damzn$trading_day), by = 20),
                     minor_breaks = seq(1, max(damzn$trading_day), by = 10)) + 
  theme(axis.text.x = element_text(angle = 90))

damzn %>%
  autoplot(diff) +
  scale_x_continuous(breaks = seq(1, max(damzn$trading_day), by = 20),
                     minor_breaks = seq(1, max(damzn$trading_day), by = 10)) + 
  theme(axis.text.x = element_text(angle = 90))
```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
# Your code goes here
damzn %>%
  ACF(Close, lag_max = 100) %>%
    autoplot()


damzn %>%
  ACF(diff, lag_max = 100) %>%
    autoplot()
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

We can see that the lags are long with 2 of them surpassing the boundaries. Therefore, we will conclude that it is not white noise the differences in the stock.

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

With this graph we can see a more evident result. We can see that all spikes (or the vast majority of them) are outside the boundaries meaning that it is not white noise.

------------------------------------------------------------------------
