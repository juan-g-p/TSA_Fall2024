---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
# Your code goes here
PBS_h02_month <- PBS_h02 %>% 
  index_by(Month) %>% summarise(Costs = sum(Cost))
PBS_h02_month 
```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
# Your code goes here
PBS_h02_month %>% autoplot(Costs) + 
  scale_x_yearmonth(date_breaks = "5 years", 
                    minor_breaks = "1 year")
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

We can observe a strong seasonal pattern that repeats itself every year. We see an increase in costs during the year and then a drop at the beginning of the year. We can also identify a slowly growing trend.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
# Your code goes here
PBS_h02_month %>% gg_season(Costs, labels = "both")

PBS_h02_month %>% gg_subseries(Costs, period = "year")
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

We can clearly identify a large jump in costs in January followed by a decrease in costs in February. The following months the costs continue to increase. Here we can observe with more clarity that each year the costs are higher.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
# Your code goes here
PBS_h02_month %>% gg_lag(Costs, geom = "point", lags = 1:12)
PBS_h02_month %>% ACF(Costs, lag_max = 30) %>% autoplot()

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 30. words)

We can observe the strong seasonality on the lag 12 and the ACF plot confirms that the seasonality of the data is yearly as in the multiples of 12 we can observe the highest peaks.

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
total_private <- us_employment %>%
  filter(Title == "Total Private")

total_private
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
# Your code goes here
total_private %>% autoplot(Employed) + 
  scale_x_yearmonth(date_breaks = "10 years",
                    minor_breaks = "1 year") + 
  theme(axis.text.x = element_text(angle = 90))
```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
total_private %>% gg_season(Employed, labels = "both")
total_private %>% gg_subseries(Employed, period = "year")
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

From the plots we can observe a positive trend. In addition, during the whole year the numbers of employees is slightly the same so we could say that there is monthly seasonal trend.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
total_private %>% ACF(Employed) %>% autoplot()
total_private %>% gg_lag(Employed, geom = "point", lags = 1:12)
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

From the ACF we can observe the increasing trend as the lags become slightly smaller every time. In addition, all lags have a high autocorrelation and in the lag plot all the lags have a strongly positive relationship. We can definitely say that there is a monthly seasonal pattern.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to finde what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}
# Your code goes here
gafa_stock %>% as_tibble() %>% group_by(Symbol) %>% summarize(highest_close = max(Close)) 
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))
damzn
```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here (max 30 words)**

The code re-index the tsibble to set the trading_day variable as the index of the tsibble and the regular argument is used to specify that that the time intervals are regular (in this case is daily).

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
# Your code goes here
damzn <- damzn %>% add_column(diff2 = lag(damzn$diff))
damzn
```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}
# Your code goes here
big_breaks = seq(0, max(damzn$trading_day), 20)
small_breaks = seq(0, max(damzn$trading_day), 10)
damzn %>% autoplot(Close) + scale_x_continuous(breaks = big_breaks , minor_breaks = small_breaks)


```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
# Your code goes here
damzn %>% ACF(Close, lag_max = 100) %>% autoplot
damzn %>% ACF(diff, lag_max = 100) %>% autoplot
damzn %>% ACF(diff2, lag_max = 100) %>% autoplot
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

The difference in stock prices look like white noise as in both cases more than 95% of the spikes are inside the bounds and there are no large spikes outside the bounds.

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

The original series Close does not look like white noise as more than 5% of the spikes are outside the bounds and more than 2 large spikes are outside these bounds.

------------------------------------------------------------------------
