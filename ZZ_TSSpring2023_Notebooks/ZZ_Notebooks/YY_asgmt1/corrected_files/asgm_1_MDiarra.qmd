---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)
PBS_h02
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
# Your code goes here
PBS_HO2_graph=PBS_h02 %>% 
  index_by(month = yearmonth(Month))%>%summarise(TC_per_Month=sum(Cost))
PBS_HO2_graph
```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
# Your code goes here
PBS_HO2_graph%>% 
   autoplot(TC_per_Month)+ 
  scale_x_yearmonth(date_breaks = "1 year",
                      minor_breaks = "1 year") +
  # Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

We can observe a seasonal trend every year. Every year the total cost per month drop from january a and then later sees a huge spike throughout the other months until january of the next year.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
# Your code goes here
PBS_HO2_graph %>%
  gg_season(TC_per_Month, labels = "both") + 
  labs(y = "Total Cost Per month")
```

```{r}
PBS_HO2_graph %>%
  gg_subseries(TC_per_Month) +
  labs(
    y = "Total Cost Per month",
    
  )

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

The seasonal plot shows that every year, there is huge drop in cost from january until February but from frebruary, cost dramatically goes up until december. The seasonal subplot further confirms the interpretation as the mean cost in january is very high but in february is lower as idicated by the blue lines.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
# Your code goes here
PBS_HO2_graph%>% ACF(lag_max = 60) %>%
  autoplot()
```

```{r}
PBS_HO2_graph %>%
    gg_lag(TC_per_Month, geom='point',lags = 1:12)
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 30. words)

With the ACF, we can observe seasonality for 5 years (60 months). Autocorrelation is higher at the seasonal lags. Every 12 lags(months) the autocorrelation hits its lowest before starting to go back up again. This pattern shows seasonality.

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
total_private <- us_employment %>%
  filter(Title == "Total Private")

total_private
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
# Your code goes here
total_private%>% autoplot(Employed)+ 
  scale_x_yearmonth(date_breaks = "10 year",
                      minor_breaks = "1 year") +
  # Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))

```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
total_private%>% gg_season(Employed, period = "year") +
  theme(legend.position = "none") 
```

```{r}
total_private%>% 
  gg_subseries(Employed, period = "year")
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

We can observe an increasing trend over the years with the time series plot. The subseries plot helps to identify the seasonal of each year. Ever year there is a small increase in employed from around may until august and a slight decrease after.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
# Your code goes here
 total_private%>%
  gg_lag(y = Employed, geom = "point", lags = 1:20)
 
 

```

```{r}
 total_private %>%
  ACF(Employed, lag_max =84) %>%
  autoplot()
```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

The ACF graph shows both trend and seasonality pattern. The slow decrease in the ACF as the lags increase is due to the trend, while the scalloped shape also observe in the graph is due to the seasonality.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to finde what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}
# Your code goes here
gafa_stock %>% group_by(Symbol) %>% filter(Close==max(Close))
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))
damzn

```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here (max 30 words)**

To have a regular time interval. The interval for AMZN by date would not be the same for each row as we used a filter for AMZN. So we use the code above to change our index to use the row numbers so that the interval for each row is the same.

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
# Your code goes here
damzn[['Close_lag1']]= lag(damzn[['Close']])
damzn_diff2=damzn %>% mutate(diff2 = difference(Close_lag1))
damzn_diff2

```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}
# Your code goes here
# Closing Prices
damzn_closing=damzn %>% select(trading_day,Close)
major_ticks_seq = seq(0, max(damzn_closing$trading_day), 20)
minor_ticks_seq= seq(0, max(damzn_closing$trading_day), 10)
damzn_closing%>%
  autoplot() +
  scale_x_continuous(breaks = major_ticks_seq,
                     minor_breaks = minor_ticks_seq)



```

```{r}
#difference 
damzn_difference=damzn %>% select(trading_day,diff)
major_ticks_seq = seq(0, max(damzn_difference$trading_day), 20)
minor_ticks_seq= seq(0, max(damzn_difference$trading_day), 10)
damzn_difference%>%
  autoplot() +
  scale_x_continuous(breaks = major_ticks_seq,
                     minor_breaks = minor_ticks_seq)
```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
# Your code goes here
damzn_closing%>%
  ACF(lag_max = 100) %>%
  autoplot()
```

```{r}
damzn_difference%>%
  ACF(lag_max = 100) %>%
  autoplot()
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

Yes the differences looks like white noise as only two of the large spikes are out of bound. Furthermore, we have 100 lags and 5% of 100 is 5. Since we have less than 5% of spikes outside these bounds we can consider the difference in stock to be white noise.

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

It is not white noise. Almost every lag spikes (more than 5%) are out of the bounds.

------------------------------------------------------------------------
