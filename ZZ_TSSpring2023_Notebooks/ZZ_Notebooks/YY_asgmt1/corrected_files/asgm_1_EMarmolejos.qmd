---
title: "asgmt1_tsgraphs"
format: html
editor: visual
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r}
library(fpp3)
```

# Instructions

-   This notebook contains a series of exercises **to be solved individually by each student**.

-   When answering the questions please **stick to the questions asked and respect the limit to the number of words** (use an online word counter or your text processor of choice).

-   **Answering more than what is asked for in the question will not provide additional points**. More often than not, it actually leads to a worse grade since the additional info provided usually shows a lack of understanding of some concepts on the student's part.

-   **Before delivering the assignment** **make sure you are delivering executable code**. To do this (dedicated video on the appendix RStudio Basics)

    1.  Delete all variables in your environment.
    2.  Restart your R Session.
    3.  Click on Run -\> Run all

    -   **IMPORTANT:** if the code you deliver is not executable from beginning to end, you will be somewhat penalized in your assignment (depending on the severity of the issue). So please bear this in mind. At university level the least expected is that you deliver executable code.

# 1. (3.3 points)

The PBS dataset included in fpp3 contains Monthly Medicare Australia prescription data. Run `?PBS` on the console for further info.

We would like to focus on the prescriptions with ATC (Anatomical Therapeutic Chemical Index level 2) equal to H02. This group corresponds to corticosteroids for systemic use.

```{r}
PBS_h02 <- PBS %>%
  filter(ATC2 == "H02") %>%
  select(ATC2, Month, Cost, everything()) %>%
  arrange(Month)

PBS_h02
```

1.  As you can see, after filtering for `ATC2 == H02` there are 4 entries per month corresponding to different combinations of the columns Concession and Type. We would like to add the Cost associated to those 4 entries for every month, to obtain a time series of the total cost per month. Use `index_by()` and `summarise()` to get the total cost per month **(1 point)**

```{r}
# Your code goes here
PBS_1 <- PBS_h02 %>%
  index_by(month = yearmonth(Month)) %>%
  summarise(total_cost = sum(Cost))


PBS_1

```

2.  Create and interpret a time-plot with sufficient resolution to visually identify the seasonality **(0.8 points)**

```{r}
# Your code goes here
PBS_1 %>% autoplot(total_cost) +
  scale_x_yearmonth(date_breaks = "1 year",
                      date_labels = "%Y") +
  # Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

As we can see, there is a strong upward trend that peaks at the end of each year and then falls, but we can see that in the long term, cost continues to rise over time.

------------------------------------------------------------------------

3.  Create and interpret a seasonal plot and a seasonal subseries plots to identify the evolution of the seasonal component. **(0.8 points)**

```{r}
# Your code goes here
PBS_1 %>%
  gg_season(total_cost, labels = "both") + # Labels -> "both", "right", "left"
  labs(y = "Total Cost",
       title = "Cost Seasonal Plot")
```

```{r}
PBS_1 %>%
  gg_subseries(total_cost, labels = "both") + # Labels -> "both", "right", "left"
  labs(y = "Total Cost",
       title = "Cost Subseries")

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 50. words)

We may further support the claim that total cost increases annually by pointing out that the increased trend begins in February and peaks in December or January. The increase that happens month by month and year by year is precisely depicted in both of these graphs.

------------------------------------------------------------------------

4.  Create and interpret ACF plots and lag plots to identify the seasoanlity **(0.8 points)**

```{r}
# Your code goes here
PBS_1 %>%
  ACF(total_cost) %>%
  autoplot()

```

```{r}
PBS_1 %>%
  gg_lag(y = total_cost, geom = "point", lags = 1:12)

```

------------------------------------------------------------------------

**Your interpretation goes here** (max 30. words)

The peak at lag m = 12 in this correlogram shows the strong yearly seasonality of the data.

------------------------------------------------------------------------

# 2. (3.3 points)

Use the following graph functions: autoplot(), gg_season(), gg_subseries(), gg_lag(), ACF() and explore features of the time series Total Private from the dataset us_employment (loaded with fpp3) (3.3 points)

```{r}
total_private <- us_employment %>%
  filter(Title == "Total Private")

total_private
```

-   2.1 Generate a timeplot that has major ticks every ten years and minor ticks every year **(1.1 points)**

```{r}
total_private %>%
  autoplot(Employed) + 
  scale_x_yearmonth(date_breaks = "10 years",
                      minor_breaks = "1 year") 
# Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))
  

```

-   2.2 Use `gg_season()` and `gg_subseries()` to examine the evolution of the seasonal components over time (period of 1 year). That is, generate the graphs and interpret them **(1.1 points)**

```{r}
total_private %>% gg_season(Employed, period = "year") +
  labs(y="Employed", title="Employed Seasonal Plot")
```

```{r}
total_private %>% gg_subseries(Employed, period = "year") +
  labs(y="Employed", title="Employed Subseries")

```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

As we can see the number of employees doesn't change significantly month by month but there is an increase yearly as shown by both the seasonal plot and time series plot.

------------------------------------------------------------------------

-   2.3 Use `gg_lag()` and `ACF()` to examine the autocorrelation of the series. Again, generate the graphs and interpret them **(1.1 points)**

```{r}
total_private %>%
  ACF(Employed) %>%
  autoplot()
```

```{r}
total_private %>%
  gg_lag(y = Employed, geom = "point")

```

------------------------------------------------------------------------

**Your interpretation goes here** (Max 50. words)

The ACF plot and the lag plot show the strong positive correlation of the data.

------------------------------------------------------------------------

# 3. Stock prices (3.4/10 points)

The GAFA stock prices dataset in the ffp3 package contains historical stock prices from 2014-2018 for Google, Amazon, Facebook and Apple. All prices are in \$USD

## 3.1 Use `group_by()` in combination with `filter()` and `max()` to finde what days correspond to the peak closing price for each of the four stocks in the dataset `gafa_stock` (**0.5 points**)

```{r}

gafa_stock
peak <- gafa_stock %>%
  group_by(Symbol) %>%
  filter(Close == max(Close))

peak
# Your code goes here
```

## 3.2 Amazon Stock Prices

The following code computes the daily changes in Amazon closing stock prices from 2018 onwards:

```{r}
damzn <- gafa_stock %>%
  filter(Symbol == "AMZN", year(Date) >= 2018) %>%
  mutate(trading_day = row_number()) %>%
  update_tsibble(index = trading_day, regular = TRUE) %>%
  mutate(diff = difference(Close))

damzn
```

-   3.2.1 Why does the code above re-index the tsibble? Hint: run `?update_tsibble()` on the console to access the documentation and read about the argument regular (**0.5 points**)

------------------------------------------------------------------------

**Your answer goes here (max 30 words)**

The argument regular enables us to get the regular time interval, however in order to do so, we must reindex in order to obtain the index column's greatest common divisor.

------------------------------------------------------------------------

-   3.2.2 Use the function `lag()` to compute an additional column `diff2` that should be equal to the column `diff`. Hint: you need to compute the first lag of the variable Close to do this. (**0.5 points**)

```{r}
first_lag <- lag(damzn$Close)
damzn$diff2 <- lag(damzn$diff)

# Your code goes here
```

-   3.2.3 Create a time plot of the closing prices and a time plot of the differences. These plots must have major ticks every 20 trading days and minor ticks every 10 trading days (**0.5 points**)

```{r}

major_ticks_seq = seq(0, max(damzn$trading_day), 20)
major_ticks_seq

minor_ticks_seq = seq(0, max(damzn$trading_day), 10)
minor_ticks_seq

damzn %>%
  autoplot(Close) +
  scale_x_continuous(breaks = major_ticks_seq,
                     minor_breaks = minor_ticks_seq)
# Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))

  
damzn %>%
  autoplot(diff) +
  scale_x_continuous(breaks = major_ticks_seq,
                     minor_breaks = minor_ticks_seq)
# Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))

  
```

-   3.2.4 Create the correlogram of the closing prices and of the differences in prices using the ACF() and autoplot() functions. Depict 100 lags (look at the argument lag_max). **(0.5 points)**

```{r}
autoplot(ACF(damzn, Close, lag_max = 100))
autoplot(ACF(damzn, diff, lag_max = 100))
# Your code goes here
```

-   3.2.5 Do the differences in the stock look like white noise? **(0.45 points)**.

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

We can infer that the time series is white noise if there are only 2% of spikes that are out of range.

------------------------------------------------------------------------

-   3.2.6 What about the original series `Close`? **(0.45 points)**

------------------------------------------------------------------------

**Your answer goes here** Max 50 words

There are numerous spikes that are outside of of the expected range; more than 5% of the spikes show that the time series is not white noise.

------------------------------------------------------------------------
