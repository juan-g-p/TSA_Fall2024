ts_data %>%
autoplot(value, colour = "gray") +
geom_line(aes(y = log_trend_class), colour = "#D55E00")
ts_data_log <-
ts_data %>%
mutate(
log_detrended = value - log_trend_class,
)
ts_data_log %>% autoplot(log_detrended)
ts_data_log <-
ts_data %>%
mutate(
log_detrended = log_value - log_trend_class,
)
ts_data_log %>% autoplot(log_detrended)
ts_data_log <-
ts_data %>%
mutate(
log_detrended = value - log_trend_class,
)
ts_data_log %>% autoplot(log_detrended)
stl_dcmp =  ts_data_log %>%
model(stl = STL(value)) %>%
components()
class_dcmp= ts_data_log %>%
model(
classical = classical_decomposition(value, type = "multiplicative")
) %>%
components()
stl_dcmp %>% autoplot()
class_dcmp %>% autoplot()
all.equal(ts_data$log_trend_class,class_dcmp$trend)
ts_quarterly = ts_data %>% index_by(ym) %>% summarise(quarterly= last(log_value))
ts_quarterly = ts_data %>% index_by(ym) %>% summarise(quarterly= last(log_value))
ts_quarterly = ts_data %>% index_by(ym) %>% summarise(quarterly = mean(first(log_value),last(log_value)))
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
view(ts_data)
ts_data %>% autoplot() +
scale_x_yearmonth(
breaks = "1 years",
minor_breaks = "1 year"
)
ts_data = ts_data %>% mutate('log_trend_class' = slider::slide_dbl(value, mean,
#.complete = TRUE -> function evaluated only on full windows
# This means that the MA will not be computed for the first
# and last three points of the time series
.before = 3, .after = 3, .complete = TRUE))
view(ts_data)
ts_data %>% select(log_trend_class, ym) %>% autoplot() +
scale_x_yearmonth(
breaks = "1 years",
minor_breaks = "1 year"
)
ts_data = ts_data %>% mutate('log_detrended' = value/log_trend_class)
view(ts_data)
ts_data %>% select(log_detrended, ym) %>% autoplot() +
scale_x_yearmonth(
breaks = "1 years",
minor_breaks = "1 year"
)
ts_data %>% select(log_detrended, ym) %>% ACF() %>%
autoplot()
stl_dcmp_1 = ts_data %>%
model(stl_dcmp = STL(value)) %>%
components()
class_dcmp_1 =  ts_data %>%
model(class_dcmp = classical_decomposition(value)) %>%
components()
stl_dcmp_1 %>% autoplot()
class_dcmp_1 %>% autoplot()
class_dcmp_1 =  ts_data %>%
model(class_dcmp = classical_decomposition(log_trend_class)) %>%
components()
class_dcmp_1 %>% autoplot()
FALSE
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data$ym <- as.Date(ts_data$ym)
ggplot(ts_data, aes(x = ym, y = value)) +
geom_line() +
scale_x_date(
date_labels = "%Y",
date_breaks = "1 year",
date_minor_breaks = "4 years"
) +
labs(x = "Year", y = "Value", title = "Original Time Series")
ggplot(ts_data, aes(x = ym, y = log(value))) +
geom_line() +
scale_x_date(
date_labels = "%Y",
date_breaks = "1 year",
date_minor_breaks = "4 years"
) +
labs(x = "Year", y = "Log(Value)", title = "Log-Transformed Time Series")
window_size <- 7
ts_data <- ts_data %>%
mutate(log_trend_class = zoo::rollmean(log(value), k = window_size, align = "center", fill = NA))
ggplot(ts_data, aes(x = ym)) +
geom_line(aes(y = log(value), color = "Log-Transformed Series")) +
geom_line(aes(y = log_trend_class, color = "Log Trend Class")) +
scale_x_date(date_labels = "%Y", date_breaks = "1 year", date_minor_breaks = "4 years") +
labs(x = "Year", y = "Value", title = "Log-Transformed Series with Log Trend Superimposed") +
scale_color_manual(values = c("Log-Transformed Series" = "blue", "Log Trend Class" = "red"))
ts_data <- ts_data %>%
mutate(log_detrended = log(value) - log_trend_class)
ggplot(ts_data, aes(x = ym, y = log_detrended)) +
geom_line() +
scale_x_date(date_labels = "%Y", date_breaks = "1 year", date_minor_breaks = "4 years") +
labs(x = "Year", y = "Log Detrended", title = "Log Detrended Time Series")
acf_log <- acf(ts_data$log_trend_class, plot = FALSE, na.action = na.pass)
acf_log_detrended <- acf(ts_data$log_detrended, plot = FALSE, na.action = na.pass)
plot(acf_log, main = "ACF of Log-Transformed Series")
plot(acf_log_detrended, main = "ACF of Log Detrended Series")
par(mfrow=c(1,1))
stl_dcmp <- STL(ts_data$value)
class_dcmp <- classical_decomposition(ts_data$value, type = "multiplicative")
autoplot(stl_dcmp, series = "seasonal") +
labs(title = "Seasonal Component (STL Decomposition)")
autoplot(stl_dcmp, series = "seasonal") +
labs(title = "Seasonal Component (STL Decomposition)")
ts_data$ym <- as.Date(ts_data$ym)
ts_quarterly_last <- ts_data %>%
mutate(quarter = floor_date(ym, "quarter")) %>%
group_by(quarter) %>%
summarise(value = last(value))
ts_quarterly_last
ts_data
floor_date(ym, "quarter")
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data %>%
autoplot() +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_datalog <- ts_data %>% mutate(log_T = log(value))
ts_datalog %>% autoplot(log(value))
log_trend_class <- ts_datalog %>%
mutate(
`12-MA` = slider::slide_dbl(log_T, ~mean(.x, na.rm = TRUE),
.before = 5, .after = 6, .complete = TRUE),
`2x12-MA` = slider::slide_dbl(`12-MA`, ~mean(.x, na.rm = TRUE),
.before = 1, .after = 0, .complete = TRUE)
)
log_trend_class %>%
autoplot(log_T, colour = "white") +
geom_line(aes(y = `2x12-MA`), colour = "#D78E00") +
labs(y = "Log_Value",
title = "Moving averages for the log transformed")
ts_data$log_detrended <- ts_data$log_T - ts_data$log_trend_class
ts_datalog
stl_dcmp <-
ts_datalog %>%
model(
stl = STL(value)
) %>%
components()
class_dcmp <-
ts_datalog %>%
model(
classical = classical_decomposition(value)
) %>%
components()
library(forecast)
# Compute ACF plot for the log-transformed time series
Acf(ts_data$log_T, lag.max = 48, main = "ACF of Log-Transformed Time Series")
autoplot(stl_dcmp, series = "stl$seasonal") +
labs(title = "Seasonal Component (STL Decomposition)")
autoplot(class_dcmp, series = "classical$seasonal") +
labs(title = "Seasonal Component (Classical Decomposition)")
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data <-
ts_data%>%
mutate(
log_value <- log(value)
)
ts_data%>%
index_by(month=yearmonth(ym))
ts_data%>%
autoplot(value) +
scale_x_yearweek(breaks = "4 years",
minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
labs(title = "Time Series", x = "Year", y = "value")
ts_data%>%
autoplot(log_value) +
scale_x_yearweek(breaks = "4 years",
minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
ts_data
ts_data <-
ts_data%>%
mutate(
log_value = log(value)
)
ts_data%>%
index_by(month=yearmonth(ym))
ts_data%>%
autoplot(value) +
scale_x_yearweek(breaks = "4 years",
minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
labs(title = "Time Series", x = "Year", y = "value")
ts_data%>%
autoplot(log_value) +
scale_x_yearweek(breaks = "4 years",
minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
labs(title = "log Time Series", x = "Year", y = "log(value)")
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
log_trend_class <-
ts_data%>%
mutate(
log_trend_class = slider::slide_dbl(log_value, mean,
.before = 3, .after = 3, .complete = TRUE)
) %>%
select(ym ,log_value, log_trend_class)
log_trend_class
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
log_detrended <-
ts_data %>%
mutate(
log_detrended = log_value - log_trend_class,
)
ts_data %>%
ACF(log_value, lag_max = 160) %>% autoplot()
ts_data %>%
ACF(log_detrended, lag_max = 160) %>% autoplot()
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
stl_dcmp <-
ts_data %>%
model(stl = STL(value~trend(window=5)+season(window=5))) %>%
components()
class_dcmp<-
ts_data %>%
model(
classical = classical_decomposition(value, type = "additive")
) %>%
components()
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
stl_dcmp %>% autoplot()
class_dcmp%>%autoplot()
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data %>% autoplot(value) + scale_x_yearmonth(date_breaks = "4 year",minor_breaks = "1 year")
ts_data <- ts_data %>% mutate(log_value = log(value))
ts_data %>% autoplot(log_value) + scale_x_yearmonth(date_breaks = "4 year",minor_breaks = "1 year")
ts_data <-
ts_data %>%
mutate(
`12-MA` = slider::slide_dbl(log_value, mean,
.before = 5, .after = 6, .complete = TRUE),
log_trend_class = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
ts_data
# Compute the detrended component:
ts_data <-
ts_data %>%
mutate(
log_detrended = log_value - log_trend_class,
)
ts_data %>% autoplot(log_detrended)
ts_data %>% ACF(log_value,lag_max = 24) %>% autoplot()
ts_data %>% ACF(log_detrended,lag_max = 24) %>% autoplot()
stl_dcmp <- ts_data %>% model(STL(log_value ~ trend(window = 21) + season(window = 9))) %>% components()
stl_dcmp %>% autoplot()
class_dcmp <- ts_data %>% model(classical = classical_decomposition(log_value, type = "additive")) %>% components()
stl_dcmp %>% autoplot(season_year)
class_dcmp %>% autoplot(seasonal)
all.equal(ts_data$log_trend_class, class_dcmp$trend)
ts_quarterly <- ts_data %>%
index_by(yearquarter(ym)) %>%
summarise(
quarterly = last(log_value)
)
# Display the resulting quarterly time series
print(ts_quarterly)
ts_quarterly <- ts_data %>%
index_by(yearquarter(ym)) %>%
summarise(
quarterly = mean(first(log_value),last(log_value))
)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data %>%
autoplot() +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_datalog <- ts_data %>% mutate(log_T = log(value))
ts_datalog %>% autoplot(log(value))
ts_detrended <- ts_data %>%
mutate(log_detrended = log_transformed - log_trend_class)
ts_log_t <- ts_data %>%
mutate(
log_transformed = log(value),
log_trend_class = slider::slide_dbl(log_transformed, mean, .before = 3, .after = 3, .complete = TRUE)
)
ts_data %>%
autoplot(log_transformed) +
geom_line(aes(y = log_trend_class), color = "red") +
labs(
y = "Log(value)",
title = "Log-Transformed Time Series with Log Trend (Classical Decomposition)"
)
stl_dcmp <- ts_data %>%
model(stl = STL(log_transformed)) %>%
components()
# Create a time plot for the seasonal component of stl_dcmp
autoplot(stl_dcmp$seasonal) +
labs(title = "Seasonal Component (STL Decomposition)")
ts_data$ym <- as.Date(ts_data$ym)
ts_quarterly <- ts_data %>%
mutate(quarter = floor_date(ym, "quarter")) %>%
group_by(quarter) %>%
summarise(value = last(value))
ts_quarterly
ts_data
ts_quarterly
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data$Date <- as.Date(ts_data$ym)
ggplot(data = ts_data, aes(x = Date, y = value)) +
geom_line() +
labs(title = "Original Time Series", x = "Year", y = "Value") +
scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
theme_minimal()
ggplot(data = ts_data, aes(x = Date, y = log(value))) +
geom_line() +
labs(title = "Log-transformed Time Series", x = "Year", y = "Log Value") +
scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
theme_minimal()
library(ggplot2)
library(slider)
library(dplyr)
library(tsibble)
ts_data <- ts_data %>%
mutate(log_value = log(value))
m <- 12
k <- m/2
ts_data <- ts_data %>%
mutate(uncentered_ma = slider::slide_dbl(log_value, mean, .before = k-1, .after = 0, .complete = TRUE))
ts_data <- ts_data %>%
mutate(log_trend_class = slider::slide_dbl(uncentered_ma, mean, .before = 0, .after = 1, .complete = TRUE))
ggplot(data = ts_data, aes(x = Date)) +
geom_line(aes(y = log_value),, alpha = 0.6) +
geom_line(aes(y = log_trend_class), colour = "#D55E00") +
labs(title = "Log-transformed Time Series with Classical Decomposition Trend",
x = "Year", y = "Log Value") +
theme_minimal()
ts_data$log_detrended <- ts_data$log_value - ts_data$log_trend_class
ggplot(data = ts_data, aes(x = Date, y = log_detrended)) +
geom_line() +
scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
theme_minimal()
library(fma)
library(readr)
# ACF of Log-transformed Time Series
autoplot(acf(ts_data$log_value, lag.max = 20, plot = FALSE))
sum(is.na(log_detrended))
library(fma)
library(readr)
# ACF of Log-transformed Time Series
autoplot(acf(ts_data$log_value, lag.max = 20, plot = FALSE))
autoplot(acf(log_detrended, lag.max = 20, plot = FALSE))
stl_dcmp <-
ts_data %>%
model(
stl = STL(value)
) %>%
components()
class_dcmp <-
ts_data %>%
model(
classical = classical_decomposition(value)
) %>%
components()
autoplot(class_dcmp,
title = "Seasonal Component from Classical Decomposition")
classical_trend <- class_dcmp$trend
matching_trends <- all(abs(ts_data$log_trend_class - classical_trend) < 0.0000001)
matching_trends
ts_quarterly <- ts_data %>%
group_by(quarter = floor_date(ym, "quarter")) %>%
summarise(value = last(value)) %>%
as_tsibble(index = quarter)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
library(ggplot2)
ts_data$ym <- as.Date(ts_data$ym)
library(ggplot2)
original_plot <- ggplot(ts_data, aes(x = ym, y = value)) +
geom_line() +
scale_x_date(date_labels = "%Y", date_breaks = "4 years") +
labs(title = "Original Time Series", x = "Year and Month", y = "Value")
log_plot <- ggplot(ts_data, aes(x = ym, y = log(value))) +
geom_line() +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
labs(title = "Log-Transformed Time Series", x = "Year and Month", y = "Log(Value)")
print(original_plot)
print(log_plot)
library(dplyr)
library(zoo)
window_size <- 12
ts_data <- ts_data %>%
mutate(log_trend_class = rollmean(log(value), k = window_size, fill = NA))
head(ts_data)
library(ggplot2)
log_trend_plot <- ggplot(ts_data, aes(x = ym)) +
geom_line(aes(y = log(value)), color = "blue", size = 1, linetype = "solid", alpha = 0.7) +
geom_line(aes(y = log_trend_class), color = "red", size = 1, linetype = "solid")
labs(title = "Log Transformed Time Series",
x = "Year and Month", y = "Log Value")
print(log_trend_plot)
library(ggplot2)
log_detrend_plot <- ggplot(ts_data, aes(x = ym, y = log_detrended)) +
geom_line(color = "blue") +
labs(title = "Log Detrended Time Series", x = "Year and Month", y = "Log Detrended Value")
print(log_detrend_plot)
# STL Decomposition
stl_dcmp <- log_detrended %>%
model(
stl = STL(log_detrended)
) %>%
components()
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data %>% autoplot() + scale_x_yearmonth(breaks="4 years", minor_breaks = "1 year")
ts_data %>% autoplot(log(value)) + scale_x_yearmonth(breaks="4 years", minor_breaks = "1 year")
arg1 = ts_data %>% mutate(log_trend_class = slider::slide_dbl(value, mean, .before = 5, .after = 6, .step=1,  .complete = TRUE)) %>% mutate(log_trend_class = log(log_trend_class))
arg1 %>% autoplot(log_trend_class) + scale_x_yearmonth(breaks="4 years", minor_breaks="1 year")
arg2 = arg1 %>% mutate(`2x12MA`= slider::slide_dbl(log_trend_class, mean, .before = 1, .after = 0, .step=1,  .complete = TRUE),
log_detrended = log(value) - `2x12MA`)
arg2 %>% autoplot(log_detrended)
arg2 %>% filter(log_detrended > 0)%>% acf(log_detrended)
arg2 %>% filter(log_detrended > 0)
arg2 %>% filter(log_detrended > 0)%>% ACF(log_detrended)
arg2 %>%  acf(log_detrended)
arg2 %>%  ACF(log_detrended)
stl_dcmp = ts_data %>% model(stl = STL(value)) %>% components()
class_dcmp = ts_data %>% model(clas = classical_decomposition(value)) %>% components()
stl_dcmp %>% autoplot(season_year)
class_dcmp %>% autoplot(seasonal)
all.equal(round(stl_dcmp$trend, 3), (class_dcmp$trend))
