---
title: "04_A_TSDecomposition"
format: html
edi?tor: source
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# References

1.  Hyndman, R.J., & Athanasopoulos, G., 2021. *Forecasting: principles and practice*. 3rd edition.
2.  Kourentzes, Nikolaus. *Additive and multiplicative seasonality - can you identify them correctly?* [Link](https://kourentzes.com/forecasting/2014/11/09/additive-and-multiplicative-seasonality/#comments)

# Packages

```{r}
library(fpp3)
```

# Additive vs. Multiplicative decomposition

A time series might be decomposed, in general terms, in three different components:

-   A seasonal component $S_t$

-   A trend-cycle component $T_t$

    -   Some authors separate the trend and cycle component. Here **we consider trend-cycle** because the usual decomposition algorithms extract them together, not separately.

-   The remainder component $R_t$

Typically we distinguish between **two types of decomposition schemes**:

-   An **additive scheme**: the variation around the trend-cycle of the seasonal pattern does NOT vary with the level of the time series (with the trend component value).

```{=tex}
\begin{align*}
y_t = S_t + T_t + R_t
\end{align*}
```
-   A **multiplicative scheme**: the variation around the trend-cycle of the seasonal pattern appears to be proportional to the level of the time series (to the value of the trend component).

```{=tex}
\begin{align*}
  y_t = S_t\times{T_t}\times{R_t}
\end{align*}
```
-   In this case, the logarithmic transformation is commonly used, in which case the resulting scheme is:

```{=tex}
\begin{align*}
  log{y_t}= \log{S_t} + \log{T_t} + \log{R_t}
\end{align*}
```

## Example 1 - Additive scheme

We will work with the number of persons employed in retail in the US as shown in Figure 3.5. We can see the monthly number of persons in thousands employed in the retail sector across the US since 1990:

```{r}
us_retail_employment <- us_employment %>%
  filter(year(Month) >= 1990, Title == "Retail Trade") %>%
  select(-Series_ID)
autoplot(us_retail_employment, Employed) +
  labs(y = "Persons (thousands)",
       title = "Total employment in US retail")
```

```{r}

```

With this code we can obtain the components using STL decomposition (more on that later in the chapter):

```{r}
dcmp <- us_retail_employment %>%
  model(stl = STL(Employed))
components(dcmp)
```

```{r}
components(dcmp) %>%
  as_tsibble() %>%
  autoplot(Employed, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "Persons (thousands)",
    title = "Total employment in US retail"
  )
```

```{r}

```

Using autoplot, we can have a look at the components:

```{r}
components(dcmp) %>% autoplot()
```

```{r}

```

## Example 2 - Multiplicative scheme:

Let us resort again to the monthly medicare Australian prescription data, because it shows a clear multiplicative scheme:

```{r}
a10 <- PBS %>%
  filter(ATC2 == "A10") %>%
  select(Month, Concession, Type, Cost) %>%
  summarise(TotalC = sum(Cost)) %>%
  mutate(Cost = TotalC / 1e6)

autoplot(a10, Cost) +
  labs(y = "$ (millions)",
       title = "Australian antidiabetic drug sales")
```

```{r}
a10
```

With this code we can obtain the components using X11 decomposition. We use this method because the series is multiplicative (more about that later in the chapter):

```{r}
x11_dcmp <- a10 %>%
  model(x11 = X_13ARIMA_SEATS(Cost ~ x11())) %>%
  components()

x11_dcmp
```

The following code overlays the trend component obtained by the decomposition on the original time-series

```{r}
x11_dcmp %>%
  as_tsibble() %>%
  autoplot(Cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "$ (millions)",
    title = "Australian antidiabetic drug sales"
  )
```

```{r}

```

Again we can depict the components using autoplot:

```{r}
x11_dcmp %>% autoplot()
```

```{r}

```

## Multiplicative scheme under different transformations:

Most of the time multiplicative schemes can be made more "additive-like" with certain mathematical transformations. We will study these in a separate notebook, but let us examine them in a cursory manner here:

Let us look at the effect of applying different transformations of increasing strength to stabilize variations. **The purpose is to turn the multiplicative scheme into an additive scheme.**

Specifically we will apply a **square root**, a **cubic root**, a **log** and an **inverse** transformation:

```{r}
a10 <- mutate(a10, sqrt_cost = sqrt(Cost), 
              cbrt_cost = Cost^(1/3), 
              log_cost = log(Cost), 
              inv_cost = -1/Cost)
a10
```

```{r}

```

Now let us explore the effect of each transformation on the data (please excuse the spaghetti code style, in a production environment dedicated functions or at least a for loop should have been written to avoid code repetition)

```{r}
dcmp <- a10 %>%
  model(stl = STL(sqrt_cost))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(sqrt_cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "square root $ (millions)",
    title = "Australian antidiabetic drug sales"
  )
```

```{r}
dcmp <- a10 %>%
  model(stl = STL(cbrt_cost))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(cbrt_cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "cubic root $ (millions)",
    title = "Australian antidiabetic drug sales"
  )
```

```{r}
dcmp <- a10 %>%
  model(stl = STL(log_cost))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(log_cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "log root $ (millions)",
    title = "Australian antidiabetic drug sales"
  )

```

```{r}
dcmp <- a10 %>%
  model(stl = STL(inv_cost))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(inv_cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "Inverse cost $ (millions)",
    title = "Australian antidiabetic drug sales"
  )
```

```{r}

```

In conclusion, in terms of **the strength of these transformations to turn a multiplicative scheme into an additive scheme**, we can state the following
x
$$
\sqrt{x}  < \sqrt[3]{x} < log(x) < \frac{1}{x}
$$

## Further visual examples of additive vs. multiplicative

The following image further clarifies the basic difference between an additive and a multiplicative time series. It has been borrowed from reference \[2\].

```{r, echo=FALSE, out.width='100%', fig.align="center", fig.cap="Multiplicative vs additive schemes. From reference [2]."}
knitr::include_graphics('./figs/5_1_AdditiveScheme.png')
```

In **reference \[2\]**, there is an **interesting interactive game where you can practice to recognize visual cues in additive and multiplicative schemes**. I strongly encourage you to spend some minutes doing this.

## Automating the identification of additive vs multiplicative schemes

Visual inspection is a first approach to assessing the scheme type and it is interesting for developing your intuition as analysts. However, when you are faced with batches of time series you need to process, it is definitely not the best approach. There are different ways in which the type of scheme could be evaluated.

One way of systematically assessing whether we should consider an additive or multiplicative scheme is to:

1.  Decompose the series using a method that is appropriate for additive schemes and a method appropriate for a multiplicative scheme.

2.  Assess the goodness of fit of each method. For example, assessing the amount of autocorrelation in the remainder of each decomposition.

Another possibility would be to:

1.  Fit an exponential smoothing with an additive scheme
2.  Fit an exponential smoothing with a multiplicative scheme.
3.  Compare their Akaike Information Criteria ($AIC$ or $AIC_c$) to see which fits best

By the end of the course you should be able to understand all this completely.

# Detrended and Seasonally Adjusted time series

## Detrended time series

If $T_t$ is the trend-cycle component of a time series, the **detrended time series $D_t$** is computed by removing the trend component from the time series. This is done **differently depending on whether the time series is additive or multiplicative**

| Additive scheme  <br> $y_t = T_t + S_t + R_t$ | Multiplicative scheme  <br> $y_t = T_t \cdot S_t \cdot R_t$ |
|:---------------------------------------------:|:----------------------------------------------------------:|
| $$D_t = y_t - T_t = S_t + R_t$$                                 | $$D_t = \frac{y_t}{T_t} = S_t \cdot R_t$$                                         |


## Seasonally adjusted time series

If $S_t$ is the seasonal component, the **seasonally-adjusted time series $A_t$** is computed by removing the seasonal component from the time series. This is done **differently depending on whether the time series is additive or multiplicative**:

| Additive scheme  <br> $y_t = T_t + S_t + R_t$ | Multiplicative scheme  <br> $y_t = T_t \cdot S_t \cdot R_t$ |
|:---------------------------------------------:|:----------------------------------------------------------:|
| $$A_t = y_t - S_t = T_t + R_t$$                                 | $$A_t = \frac{y_t}{S_t} = T_t \cdot R_t$$                                         |

It contains **the rmainder as well as the trend-cycle component**. Therefore it is not "smooth". Its short term fluctuations due to the remainder can be misleading when trying to predict a trend from it.

* Technically, the slope of the tangent line to the curve (the derivative) changes abruptly every time-step due to these short term fluctuations. The trend is a smoother version with a smoother derivative and is therefore better to make an analysis of the overall direction of the time series.

* If you want to **look for turning poins and interpret changes in direction**, it is best to **use the trend cycle component** rather than the seasonally adjusted data

The seasonally adjusted data is **useful if the variation due to seasonality is not of primary interest**.

* Example: **unemployment data are usually seasonally adjusted** in order to **highlight variation due to the underlying state of the economy rather than the seasonal variation**

## Example 1: additive scheme

Further up in this notebook we looked at the `us_retail_employment` time series and concluded it followed an additive scheme:

```{r}
us_retail_employment %>% autoplot()
```
For this example we are going to fit a `classical_decomoposition` model. The specifics of this syntax will be explained in later sessions, but they are fairly straight forward.

```{r}
classical_dcmp <- 
  us_retail_employment %>% 
  
  # 1. Fit the model
  model(
    dcmp = classical_decomposition(Employed, type = "additive")
  ) %>% 
  
  # 2. Extract the components
  components()

classical_dcmp
```

The resulting dataframe contains the following columns:

* `trend`: trend component
* `seasonal`: seasonal component
* `random`: random component
* `season_adjust`: seasonally adjusted component

Let us compute the **detrended time series.** Because the scheme is additive, we simply subtract the estimate of the trend from the original time series:

```{r}
classical_dcmp <- 
  
  classical_dcmp %>% 
  
  # Compute new column containing the detrended component
  mutate(
    detrended = Employed - trend
  )

# Depict the result:
classical_dcmp %>% 
  autoplot(detrended)
```

The detrended time series contains both the effect of the remainder and the seasonal component.

To compute the **seasonally adjusted time series** we simply remove the seasonal component from the time series. Since the scheme is additive, we attain this by subtraction. Note that the decomposition already provided a `season_adjust` column. We are going to compute it manually and then check that it leads to the same result:

```{r}
classical_dcmp <- 
  
  classical_dcmp %>% 
  
  # Compute new column containing the detrended component
  mutate(
    season_adjust_manual = Employed - seasonal
  )

# Depict the result along with the original time series
classical_dcmp %>% 
  as_tsibble() %>% 
  autoplot(Employed, colour="gray") +
  geom_line(aes(y=season_adjust_manual), colour = "#D55E00") +
  labs(
    y = "Persons (thousands)",
    title = "Total employment in US retail"
  )
```

Note how **the seasonally adjusted time series is different than the trend**. It contains the trend plus the random component. You can recognize it in the short term fluctuations of the seasonally adjusted component. Compare it with the figure of trend, just below:

```{r}
classical_dcmp %>% 
  as_tsibble() %>% 
  autoplot(Employed, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00") +
  labs(
    y = "Persons (thousands)",
    title = "Total employment in US retail"
  )
```

Comparing both, we see that the seasonally adjusted time series is not "smooth". "Downturns" or "upturms" can be misleading. If you want to **look for turning poins and interpret changes in direction**, it is best to **use the trend cycle component** rather than the seasonally adjusted data

Finally, we can check that our computation matches the seasonally adjusted compunent computed when using `classical_decomposition()` as follows:

```{r}
all.equal(classical_dcmp$season_adjust, classical_dcmp$season_adjust_manual)
```

For the above code to evaluate to `TRUE`, sometimes you will require to round some of the components to a specific number of decimals for this to evaluate to true. This has to do with floating point inaccuracies etc... which you should have studied as part of computer science.

## Example 2: multiplicative scheme

Further up in this notebook we have computed the dataset `a10`, corresponding to the expenses in anti-diabetic medications in Australia's publich healthcare system. We concluded that this time series followed an additive scheme:

```{r}
a10 %>% 
  autoplot()
```
For this example we are going to fit a `classical_decomoposition` model. The specifics of this syntax will be explained in later sessions, but they are fairly straight forward.

```{r}
classical_dcmp <- 
  
  a10 %>% 
  
  # 1. Fit the model
  model(
    dcmp = classical_decomposition(Cost, type = "multiplicative")
  ) %>% 
  
  # 2. Extract the components
  components()

classical_dcmp
```

The resulting dataframe contains the following columns:

* `trend`: trend component
* `seasonal`: seasonal component
* `random`: random component
* `season_adjust`: seasonally adjusted component

To compute the **de-trended time series**, since this is a **multiplicative scheme**, we need to **divide by the trend estimate**:

```{r}
classical_dcmp <- 
  
  classical_dcmp %>% 
  
  # Compute new column containing the detrended component
  mutate(
    detrended = Cost / trend
  )

# Depict the result:
classical_dcmp %>% 
  autoplot(detrended)
```

The detrended component contains both the effect of the remainder and the seasonal component.

To compute the **seasonally adjusted time series** we simply remove the seasonal component from the time series. Since the scheme is multiplicative, we attain this by division. Note that the decomposition already provided a `season_adjust` column. We are going to compute it manually and then check that it leads to the same result:

```{r}
classical_dcmp <- 
  
  classical_dcmp %>% 
  
  # Compute new column containing the detrended component
  mutate(
    season_adjust_manual = Cost / seasonal
  )

# Depict the result along with the original time series
classical_dcmp %>% 
  as_tsibble() %>% 
  autoplot(Cost, colour="gray") +
  geom_line(aes(y=season_adjust_manual), colour = "#D55E00")
```

Note how **the seasonally adjusted component is different than the trend**. It contains the trend plus the random component. You can recognize it in the short term fluctuations of the seasonally adjusted component. Compare it with the figure of trend, just below:

```{r}
classical_dcmp %>% 
  as_tsibble() %>% 
  autoplot(Cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00")
```

Finally, we can check that our computation matches the seasonally adjusted compunent computed when using `classical_decomposition()` as follows:

```{r}
all.equal(classical_dcmp$season_adjust, classical_dcmp$season_adjust_manual)
```

For the above code to evaluate to `TRUE`, sometimes you will require to round some of the components to a specific number of decimals for this to evaluate to true. This has to do with floating point inaccuracies etc... which you should have studied as part of computer science.

# Mixed schemes

In many occasions schemes cannot be unequivocally classified as additive or multiplicative. We will deal with such cases when studying the box-cox transformation.

A common scheme that is not fully additive or multiplicative is a so called *mixed scheme* of the form:

```{=tex}
\begin{align*}
y_t = (S_t \times T_t ) + R_t
\end{align*}
```

-   Trend-cycle and seasonality components relate in a multiplicative manner.
-   The remainder component is super-imposed in an additive scheme.

This scheme is relevant when:

-   The irregular component of the oscillations $R_t$ does not grow with the level of the time series (and therefore is super-imposed in an additive manner)
-   The seasonal component grows with the level of the time series, and therefore is combined with the trend in a multiplicative manner.

