---
title: "02_B_tsibbles"
editor: source
params:
  print_sol: true
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Libraries

```{r, echo=FALSE, include=FALSE}
library(kableExtra)
```

```{r}
library(fpp3)
library(nycflights13)
```

A *tsibble* is a time series object much easier to work with than `ts`, `xts` and other alternatives available in R. It **extends the concept of tibble**, adding additional properties that make it particularly fit for time series data.

**Time series**: sequential **registers of measurements** (for one or several variables) **over time** for **one or several observational units**

A tsibble object structures data in the following manner;

1. **An index**, which is a **variable with inherent ordering from past to present** (time-related)
2. **A key**, which is a **variable or set of variables** that **identifies observational units** unambiguously (optional).
3. **Measured variables**: numbers of interest.

Each **observation** is **uniquely identified** by a combination of **index** and **key**. That is **the combination of key and index must be unique**, no repetitions are allowed.

![](./figs/2_tsibble_ex_global_economy.png)
![](./figs/2_tsibble_ex_tourism.png)

The screenshots above correspond to the dataset `global_economy`, which is loaded along the `fpp3` library. The datasets loaded along with fpp3 are already in tsibble format, as the output below shows:

```{r}
global_economy
```

The output gives some important information:

* The **[1Y]** indicates the frequency of the data sampling (yearly)
* The **Key** indicates us that the column country uniquely identifies the observational units. Remember that the combination of **key** and **index** (in this case year) must be unique. Otherwise we would have more than one observation at a specific point in time for an observational unit, making our data inconsistent.

Importantly **sometimes the Key will consist of more than one column**. Identifying the observational units might require more than one column. For example, you may need both name and surname to identify a specific person). 

# Creating a tsibble

### tsibble():

```{r}
data_1 <- tsibble(
  year = 2012:2016,
  y = c(123, 39, 78, 52, 110),
  index = year
)
data_1
```

Note the line `A tsibble 5 x 2 [1Y]` The **[1Y]** indicates the frequency of the data sampling and helps us identify we are in fact dealing with a tsibble.

### as_tsibble():

We could also coerce an existing tibble or data.frame to a tsibble using `as_tsibble()`

```{r}
data_1 <- tibble(
  year = 2012:2016,
  y = c(123, 39, 78, 52, 110)
) %>%
as_tsibble(index = year)

data_1
```

### Index variable: frequency of observations and time class functions.

For observations that are more frequent than once per year, we need to use a time class function on the index.

```{r, echo=FALSE}
test <- tibble(
  Frequency = c("Anual", "Quartetly", "Monthly", "Weekly", "Daily", "Sub-daily"),
  Function = c("`start:end` (e.g. 1978:2020)", "`yearquarter()`", "`yearmonth()`", "`yearweek()`", "`as_date()`, `ymd()`", "`as_datetime()`, `ymd_hms()`")
)

knitr::kable(test, 
             caption="<center><strong>Functions for time index variables depending on frequency</strong></center>", 
             format="html"
             ) %>%
  
kable_styling(full_width = FALSE)
```

An interval is automatically obtained based on the corresponding time representation:

* `integer/numeric/ordered:` either “unit” or “year” `(Y)`
* `yearquarter/yearqtr:` “quarter” `(Q)`
* `yearmonth/yearmon:` “month” `(M)`
* `yearweek:` “week” `(W)`
* `Date:` “day” `(D)`
* `difftime:` “week” `(W)`, “day” `(D)`, “hour” `(h)`, “minute” `(m)`, “second” `(s)`
* `POSIXct/hms:` “hour” `(h)`, “minute” `(m)`, “second” `(s)`, “millisecond” `(us)`, “microsecond” `(ms)`
* `nanotime:` “nanosecond” `(ns)`

# Example: creating a tsibble from a tibble with a multi-column index

We need: 

1. an **index variable that signals time and acts as an index**.
2. a **key** that uniquely identifies the observational units.

The `flights` dataset, from the `nycflights13` library provides the datetime of departure and arrival for every flight in nyc airports during 2013.

In this case the **observational units** are the flights. To uniquely identify a flight we need both the **carrier code** and the **flight number**. That is, our key will now consist in two columns rather than one:

```{r}
flights_ts <- 
  flights %>%
  
  #Select columns of interest
  select(year, carrier, flight, month, day, hour, minute, distance) %>%
  
  #Create timestamp
  mutate(time = make_datetime(year, month, day, hour, minute)) %>%

  #Drop columns
  select(time, everything(), -c(year, month, day, hour, minute)) %>%

  #Create a tsibble, 
  #NOTE: flight and carrier are both required to uniquely identify observations
  as_tsibble(key=c(carrier, flight), index = time)

#Inspect result
flights_ts
```

`flights_ts` is a tsibble, while `flights`is a tibble.

Note that, if we only included `flight` as the key, we would get an error signaling the lack of uniqueness:

```{r, error=TRUE}
flights_ts <-
  
  flights %>%
  
  #Select columns of interest
  select(year, carrier, flight, month, day, hour, minute, distance) %>%
  
  #Create timestamp
  mutate(time = make_datetime(year, month, day, hour, minute)) %>%

  #Drop columns
  select(time, everything(), -c(year, month, day, hour, minute)) %>%

  #Create a tsibble, 
  #NOTE: flight and carrier are both required to uniquely identify observations
  as_tsibble(key=flight, index = time)
```

# `index_by()`

When working with a `tsibble`, any operation that does away with the time information will not be performed. A `tsibble` is designed to consistently store time series data and therefore refuses to either:

1. Drop the time information (the index column).
2. Reduce the resolution of the time information. That is any `group_by` operation that aggregates the data to a time frequency higher than that of the index will not be performed, or will not be performed as expected.

In the newly created `flights_ts` tsibble, the index column (time information) is `time`. If we try to select a subset of the tsibble that does not contain the column `time``, we will not succeed. The tsibble refuses to drop the time information. All the columns that make up the key will also be implicitly selected, since it is the combination if key and index that uniquely identifies each observation.

```{r}
# Refuses to drop time information. Column time is selected implicitly
# Column carrier also selected implicitly, since it is part of the key
flights_ts %>% 
  select(flight)

# To succeed in selecting only the column flight, we need to cast the tsibble
# to a tibble first.
flights_ts %>% 
  as_tibble() %>% # Cast to a tibble
  select(flight)
```

For these reasons, any `group_by` operation that reduces the resolution of the time information will not be performed at all or will not be performed as intended. 

For example, let us say we want to compute the average distance of the flights taking off each month of the year. We would like an output of one row per month, giving the mean_distance flown by all flights:

```{r, echo=FALSE}
flights_ts %>%
  index_by(month = yearmonth(time)) %>%
  summarise(mean_dist = mean(distance))
```

If we try using `group_by` on the tsibble in the usual manner, the operation will not be performed because the resolution of the time index is reduced (we have information down to the minute of every flight and the resulting operation would only contain monthy information):

```{r}
flights_ts %>%
  group_by(month = yearmonth(time)) %>% # group by month
  summarise(mean_dist = mean(distance))
```

The result of this operation is weird, not what we expected. To understand it, let us look at the first row: it gives us the mean distance of all the flights that took off on January the 1st at 05:15:00. But this is not what we wanted! We want the average distance flown by every flight taking off in January 2013.

What is happening?

Because the desired operation reduces the resolution of the time index and flights_ts is a tsibble, the operation is not performed. One potential solution is to cast flight_ts to a tibble using `as_tibble()` prior to performing the aggregation.

```{r}
flights_ts %>%
  as_tibble() %>% # cast to tibble
  group_by(month = yearmonth(time)) %>% # group by month
  summarise(mean_dist = mean(distance)) # cast to tsibble
```

While this works, there is a problem: the output, as you can see, is a tibble and not a tsibble. And the libraries we will be working with require us to use tsibbles. A solution to this could be to use `as_tsibble()` to cast the result back to a tsibble.

```{r}
flights_ts %>%
  as_tibble() %>% # cast to tibble
  group_by(month = yearmonth(time)) %>% # group by month
  summarise(mean_dist = mean(distance)) %>% 
  as_tsibble(index = month) # cast to tsibble
```

Now the reult is a tsibble, as desired.

The function `index_by()`, from the fpp3 library, performs all this casting implicitly for us. We can use it just like group_by() for aggregations that imply reducing the resolution of the time index of a tsibble.

```{r}
flights_ts %>%
  index_by(month = yearmonth(time)) %>%
  summarise(mean_dist = mean(distance))
```

Note that **the output is still directly tsibble!**. Only the **time index is now a yearmonth column** instead of a datetime column. We can therefore use `index_by()`` to perform aggregations that involve reducing the time resolution of a tsibble.