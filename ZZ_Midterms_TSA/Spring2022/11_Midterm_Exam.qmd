---
title: "TSeries_Analysis_I_Midterm_exam"
author: 
output:
  bookdown::html_document2:
    number_sections: no
    toc: true
    toc_depth: 6
    toc_float: false
    toc_collapsed: false
    self_contained: true
    lib_dir: libs
---

### Student name

Please type here your name and last name:

* **Name**: _____
* **Last Name**: _____

### Import libraries

```{r, error=FALSE, warning=FALSE, message = FALSE}
library(fpp3)
```

### 1. Import the .csv data and format it as a tsibble (**0 points**)

The dataset consists of a date column (yearmonth column) and a data column detailing the total number of unemployed people in Spain.

```{r, eval=FALSE}
# Place the .csv file on the same folder than this .rmd file
unemp <- readr::read_csv("spain_unemployment_format.csv")

# Convert column "date" to a yearmonth object
unemp <- unemp %>% 
      mutate(date = yearmonth(date)) %>% 
      as_tsibble()

head(unemp)
```

### 2. Graphical analysis (**4 points**):

#### 2.1 Generate a timeplot of the data, adjusting its grid adequately to signal at least the end of every year (**1 point**)

```{r}

```

#### 2.2 Generate a seasonal subseries plot (**0.5 points**)

```{r}

```

#### 2.3 Answer the following questions based on the foregoing graphs and any other graphs you might deem necessary (**1 point**).

1. Which seasonal period would you expect? (Justify briefly)
2. Describe the average seasonal pattern exhibited by the unemployment in Spain (Justify briefly)
3. Would you say the series is multiplicative or additive? (Justify briefly)

#### 2.4 Generate and interpret a correlogram of the series (**1.5 points**)

* IMPORTANT: extend the correlogram to cover **at least 4 seasonal periods.**

For the interpretation, briefly answer these:

* Any particular pattern you can recognize?
* Can you spot the seasonality on the correlogram?. If not: 
  + Why?
  + How could you solve this?

```{r}

```

### 3. Decomposition (**3 points**)

#### 3.1 STL Decomposition with default arguments (**1 point**) 

Perform an STL decomposition using default arguments. Depict the decomposition. Compare the seasonal and remainder components. 

* Are there any time periods that are not adequately captured by the decomposition? Pay attention to the remainder component and justify briefly your answer.

* Does the relative magnitude of the resulting components make sense? (how big they are compared to one another). Justify briefly.

```{r}

```

#### 3.2 Adjust the arguments used in the STL decomposition to improve the decomposition in those time regions. (**1 point**).

* NOTE: be sure to store the result of the decomposition in a separate variable prior to printing it. We will be working with the components.

* NOTE: the resulting decomposition may not be perfect regarding the homoskedasticity of the remainder, but there must be an improvement in the relative magnitude of the components.

```{r}

```

#### 3.3 Generate the correlogram of the seasonal component. (**1 point**)

* Include at least 4 seasonal periods.
* **Briefly interpret the correlogram.**

```{r}

```

### 4. Converting to quarterly data (**2 points**)

#### 4.1 Using `index_by()` compute a quarterly series based on the **average quarterly unemployment (1 point)**

* Store the result of the index_by() operation in a separate variable

```{r}

```

#### 4.2 Perform an STL decomposition of the result (**0.5 Points**)

* NOTE: you may use the default arguments for the decomposition

* Describe briefly how the seasonal component has changed compared to the decomposition of the original series.

```{r}

```

#### 4.3 Generate again the correlogram of the seasonal component (**0.5 Points**)

* Extend the results for at least 4 seasonal periods
* What can you say about the seasonal period?

```{r}

```

### 5. Time Series data wrangling (**1 point**) 

So far, we have averaged the unemployment values over each quarter. Technically, to make the unemployment series quarterly starting from monthly data, we should pick up the value corresponding to the last month of every quarter.

Follow these steps to achieve this:

#### 5.1 Convert the original monthly series back to a tibble using `as_tibble()` and store it in a new variable (**0 points**)

```{r}

```

#### 5.2 Generate a new column called `quarter` indicating the year and quarter of each data point using `mutate()` and `yearquarter()` (**0 points**)

```{r}

```

#### 5.3. Using `group_by()`combined with `max()` on the result of 5.2, generate a table (a tibble) that, for each quarter, details the last month of the quarter. Store it in a new variable. (**0.5 points**)

```{r}

```

#### 5.4. Using a `left_join()` between this new tibble and the original monthly tsibble, obtain a series that keeps only one data point per quarter (the point corresponding to the latest month of each quarter). (**0.5 points**)

**NOTE**: you may need to use the argument `by` of `left_join()` to specify that the column on which you wish to join both tables has a different name in each table. You may run `?left_join()` on your console to read the documentation or google how to do this.

```{r}

```