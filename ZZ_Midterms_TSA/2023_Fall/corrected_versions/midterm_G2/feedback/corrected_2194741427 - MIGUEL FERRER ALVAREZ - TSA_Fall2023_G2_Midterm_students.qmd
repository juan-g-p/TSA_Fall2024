---
title: "Untitled"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
## YOUR CODE GOES HERE
pedestrian0 <- 
  pedestrian %>% 
  filter(Sensor == "Southern Cross Station" | Sensor == "Bourke Street Mall(North)") %>% 
  filter(Date >= date("2016-07-01"), Date <= date("2016-10-25"))

pedestrian1 <- pedestrian0 %>% index_by(date = date(Date)) %>% summarise(sum = sum(Count, na.rm=TRUE))
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
## YOUR CODE GOES HERE
southern <- pedestrian %>% filter(Sensor == "Southern Cross Station")
bourke <- pedestrian %>% filter(Sensor == "Southern Cross Station")

ggplot(data=southern)
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

FEEDBACK: CODE DOES NOT RUN, BUT YOU GOT THE IDEA

```{r}
## YOUR CODE GOES HERE
southern_sum <- southern %>% index_by(Date) %>% summarise(sum = sum(Count, na.rm=TRUE))

bourke_sum <- bourke %>% index_by(Date) %>% summarise(sum = sum(Count, na.rm=TRUE))

max(southern_sum)
max(bourke_sum)

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>% autoplot() + scale_x_date(date_breaks="5 weeks",
                                              minor_breaks = "5 weeks")
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

It is difficult to tell due to the minor breaks, but it is obvious that m (seasonal period) should equal to 7 (1 week). This is because we can observe that every week the time series consistently has the same pattern.

------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

```{r}
## YOUR CODE GOES HERE
scs_pedestrians <- scs_pedestrians %>% 
  mutate(ma = slider::slide_dbl(Count, mean, .before = 3,.after = 3, complete=TRUE))

scs_pedestrians %>% autoplot() + 
  geom_line(aes(x=Date, y=mean_val),color="blue", linetype="dashed") +
  geom_line(aes(x=Date, y=ma), color="orange")

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

The seasonal naive model is appropriate to produce forecasts as it is a combination of the mean and naive model. If we set alpha to something neutral, it will weight higher the more distant points but still keep the further points to make our forecast, which creates a balanced and more accurate forecast.

------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
## YOUR CODE GOES HERE
fit <- scs_pedestrians %>% model(mean = MEAN(Count),
                                 drfit = RW(Count ~ drift()),
                                 snaive = SNAIVE(Count)
                                 )
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal na√Øve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
## YOUR CODE GOES HERE
fit_forecast <- fit %>% forecast(h = 7)

fit_forecast %>% filter(.model == "snaive") %>% autoplot(scs_pedestrians)

fit_forecast %>% filter(.model=="mean") %>% autoplot(scs_pedestrians)

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>% ACF(Count) %>% autoplot()

fit %>% select(mean) %>% augment() %>% ACF(.innov) %>% autoplot()
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Then compare both ACFs below

------

Both the mean model residuals have the same AFC as the main time series. The reason for this is that the time series itself has very clear seasonality without any trend. This makes it so that the residuals from the mean model follow the same ACF: This is because the difference between the mean and the actual points (residuals) is in line with the actual time series itself. In other words, the time series is equal to the difference between the mean and its actual points. That causes the ACF to be the same.

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
## YOUR CODE GOES HERE
fit %>% select(mean) %>% gg_tsresiduals()

fit %>% select(mean) %>% augment() %>% features(.innov, box_pierce, lag = 24, dof = 1)
fit %>% select(mean) %>% augment() %>% features(.innov, ljung_box, lag = 24, dof = 1)

count <- fit %>% select(mean) %>% augment() %>% select(Count)

# Generate qq_plot
p1 <- ggplot(count, aes(sample = .innov))
p1 <- p1 + stat_qq() + stat_qq_line()

# Generate box-plot
p2 <- ggplot(data = count, aes(y = .innov)) +
      geom_boxplot(fill="light blue", alpha = 0.7) +
      stat_summary(aes(x=0), fun="mean", colour= "red") # Include the mean

p1 + p2
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

------

Looking at the distribution for our residuals, we can observe there is not much bias as the model fails as well positively as negatively. It is true that it tends to bias more the positive residuals meaning negative values.

FEEDBACK: YOU COULD HAVE ACTUALLY COMPUTED THE VALUE

------

FEEDBACK: THIS IS ONE OF THE BEST EXAMS. CONGRATS. KEEP IT UP PLEASE