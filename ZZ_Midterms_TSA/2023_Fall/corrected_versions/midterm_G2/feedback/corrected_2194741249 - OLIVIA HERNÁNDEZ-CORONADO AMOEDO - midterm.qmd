---
title: "Untitled"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
new_ped<-
  pedestrian%>%
  filter(Sensor=="Southern Cross Station")%>%
  
  filter(Date > "2016-07-01" & Date< "2016-10-25")


```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
new_ped%>%
  autoplot()
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
scs_pedestrians %>% 
  
  autoplot() +
  
  scale_x_yearweek(
    breaks = "5 weeks",
    minor_breaks = "1 week"
  ) +
    theme(axis.text.x = element_text(angle = 90))
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

It is a weekly seasonal data of length 1 week. 

FEEDBACK: m=7
------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

```{r}
scs_pedestrians <- 
  scs_pedestrians%>%

  # Generate the moving average
  mutate(
    
    #The slider function applies a function to "sliding" time windows.
    #In this case it is a 7-MA because we are moving from j=-3 (before = 3) 
    # to j=+3 (after = 3).
    `trend` = slider::slide_dbl(Count, mean,
                               
                #.complete = TRUE -> function evaluated only on full windows
                # This means that the MA will not be computed for the first
                # and last three points of the time series
                .before = 3, .after = 3, .complete = TRUE)
  )

scs_pedestrians %>%
  autoplot(Count) +
  geom_line(aes(y = trend), colour = "red")+
  geom_line(aes(y = mean_val), colour = "blue", linetype = "dashed")

```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

SEASONAL NAÏVE: Each forecast equal to the last observed value from the same season (e.g. the same month of the previous year). As the dataset has that strong seasonality, the best forecast would de the naive model. 

------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
fit <-
  scs_pedestrians %>% 
  model(
    snaive = SNAIVE(Count),
    mean = MEAN(Count),
    drift = RW(Count ~ drift())
  )
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal naïve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
fc = fit %>%
  forecast(h = 8)

fc %>%
  filter(.model =="snaive") %>%
  autoplot(scs_pedestrians, level = 95) 

fc %>%
  filter(.model =="mean") %>%
  autoplot(scs_pedestrians, level = 95) 
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
scs_pedestrians %>%
  ACF(Count) %>%
  autoplot()

# FIT THE VALUES OF THE MEAN MODEL 
model_vals <- 
  fit %>%
  augment() %>% 
  filter(.model == "mean")

model_vals %>%
  ACF(.innov) %>%
  autoplot()
```

Then compare both ACFs below

------

ACF OF THE INITIAL TIME SERIES: The ACF plot with high peaks shows the strength of the seasonality (7 days), against the trend.

ACF OF THE INNOVATION RESIDUALS: It looks the same 

FEEDBACK: WHY

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
fit %>% 
  select(mean) %>% 
  gg_tsresiduals()

# Compute the mean of the residuals
model_vals %>% as_tibble() %>%
  filter(.model == "mean")%>%
  summarise(mean = mean(.innov, na.rm = TRUE))

model_vals 


```

------

To measure if the residuals are biased it is necessary to check if the mean is near 0. As the mean is not close to 0, they are biased. 

FEEDBACK: THE MEAN IS OF THE ORDER OF 1E-16. THIS IS NUMERICALLY REALLY CLOSE TO 0

------