---
title: "Mar Javaloy"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
## YOUR CODE GOES HERE
pedestrian %>% 
  filter((Sensor == "Bourke Street Mall (North)")  | (Sensor == "Southern Cross Station")) %>% 
  filter(Date >= "2016-07-01" & Date <= "2016-10-25") %>% group_by(day = day(Date_Time)) %>%  mutate(Count) 

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>%
  autoplot(Count) + 

  scale_x_yearweek(date_breaks = "5 weeks",
                      minor_breaks = "1 week") +

  theme(axis.text.x = element_text(angle = 90))
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

YOUR ANSWER GOES HERE (MAX 30 WORDS)
Looking at the time plot we can observe that the length of the seasonal period is 
1 week, as we can observe weekly repeated peaks. 
------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

```{r}
## YOUR CODE GOES HERE
mov_scs_pedestrians = scs_pedestrians %>%
  mutate(
    `7-MA` = slider::slide_dbl(Count, mean,
                               .before = 3, .after = 3, .complete = TRUE),
   trend_class = `7-MA`
  )

mov_scs_pedestrians %>%
  autoplot(Count, colour = "grey") +
  geom_line(aes(y = `trend_class`), colour = "pink") +
  geom_line(aes(y = `mean_val`), colour = "blue", linetype = "dashed")
  labs(y = "Count",
       title = "Moving avergae")

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

YOUR ANSWER GOES HERE (Max. 30 words)
Based on the previous graph I would pick the drift naive model that allow us
to draw a line between the first and last observations and extrapolating into the future 
in this case 1 week.

FEEDBACK: no. See solution. 

------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
## YOUR CODE GOES HERE
fit <-
  scs_pedestrians %>% 
  model(
    mean = MEAN(Count),
    drift = RW(Count ~ drift()),
    snaive = SNAIVE(Count)
  )

fit %>% augment()


## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal na√Øve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
## YOUR CODE GOES HERE
sn_fit  <-  fit %>% 
  forecast(h = 7)

sn_fit %>% 
  filter(.model == "snaive") %>%
  autoplot(scs_pedestrians) 

m_fit  <-  fit %>% 
  forecast(h = 7)

m_fit %>% 
  filter(.model == "mean") %>%
  autoplot(scs_pedestrians) 


## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>%
  ACF(Count) %>%
  autoplot()


fit %>%
  ACF(mean) %>% 
  autoplot()


## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Then compare both ACFs below

------

COMPARE BOTH ACF PLOTS (Max 50 words)
On the first ACF plot we clearly observe a seasonal behavior with peaks in the
seasonal component 7,14... each week.

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

FEEDBACK: CODE DOES NOT RUN AND IS WRONG

```{r}
## YOUR CODE GOES HERE
fit %>% as_tibble() %>%
  filter(.model == "mean") %>%
  summarise(mean = mean(.innov, na.rm = TRUE))

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

------

YOUR ANSWER GOES HERE (30 words max)

------

FEEDBACK: PRACTICE THE CODING PART MUCH MORE.

ALSO YOU NEED TO UNDERSTAND MORE IN DEPTH THE THEORY GIVEN YOUR BAD CHOICE FOR A MODEL.