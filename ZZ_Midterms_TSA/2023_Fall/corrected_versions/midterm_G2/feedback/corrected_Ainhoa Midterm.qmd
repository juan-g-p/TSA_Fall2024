---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>%
  autoplot() + 
  scale_x_yearmonth(breaks = "4 years", 
                   minor_breaks = "1 year") 

log_data <- ts_data %>% mutate(log_T = log(value))
log_data %>% autoplot(log(value)) + 
  scale_x_yearmonth(breaks = "4 years", 
                   minor_breaks = "1 year")
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

We transform the data into a log transformation as it makes our time series more additive like, rather than multiplicative.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
ts_data = ts_data %>% mutate(log_T = log(value))

ts_data = ts_data %>%
  mutate(
    
    `12-MA` = slider::slide_dbl(log_T, mean,
                .before = 5, .after = 6, .complete = TRUE),
    log_trend_class = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
    
  )

ts_data 

# Plot the computed trend
ts_data %>%
  autoplot(log_T, colour = "gray") +
  geom_line(aes(y = log_trend_class), colour = "#D55E00") 

####


```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

FEEDBACK: you tried to detrend the original varable and not the log transformed data. Obviously does not work

```{r}
log_detrended <- 
  ts_data %>%
  mutate(
      detrended = value - log_trend_class,
    )
log_detrended %>% autoplot(detrended)

```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

FEEDBACK: incomplete code and incomplete interpretation because you failed to detrend5

```{r}
ts_data %>% 
  ACF() %>% 
  autoplot()

log_detrended %>% 
  ACF() %>% 
  autoplot()

```

------------------------------------------------------------------------

Both ACF plots look the same, representing data with a trend (no negative autocorrelation coefficients), rather than a seasonality. The fact that the seasonal component is barely noticeable on correlogram does not mean that the data does not have a seasonal component, but rather than the ACF does not reflect it.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
#STL DECOMPOSITION
stl_dcmp <- ts_data %>%
  model(stl = STL(value)) %>% 
  components() 

stl_dcmp %>% 
  autoplot()

#CLASSICAL DECOMPOSITION

class_dcmp = ts_data %>%
  model(
    class_dcmp = classical_decomposition(value)
  ) %>%
  components()

class_dcmp %>% 
  autoplot()

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% 
  autoplot(season_year)

class_dcmp %>% 
  autoplot(seasonal)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The seasonal component from the STL seems to be increasing, with somewhat of a trend, while the classical seasonal component shows that the data has perfectly stable seasonality of aproximately 1 year.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK: right code to compare, wrong output. Should have been a hint that you were not comaring the proper things

```{r}
all.equal(ts_data$log_trend_class, class_dcmp$trend)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
ts_data = ts_data %>% 
  index_by(ym) %>% 
    mutate(
      yq = yearquarter(yearmonth(ym)),
      quarter = quarter(yearmonth(ym))
   )


# FEEDBACK: FAILED TO AGGREGATE TO 1 QUARTER PER POINT
ts_quarterly = ts_data %>% 
  index_by(yq) %>% 
  summarise(
    tail = tail(yq, na.rm = TRUE),
  ) 


```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
ts_quarterly
```
