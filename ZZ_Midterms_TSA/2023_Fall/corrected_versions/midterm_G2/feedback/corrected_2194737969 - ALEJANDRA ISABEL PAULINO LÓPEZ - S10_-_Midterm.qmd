---
title: "Untitled"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
## YOUR CODE GOES HERE

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
## YOUR CODE GOES HERE

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
## YOUR CODE GOES HERE

scs_pedestrians %>%
  autoplot() +
  scale_x_date(breaks = "5 weeks",
               minor_breaks = "1 week") + 
  theme(axis.text.x = element_text(angle = 90))

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

I would say the lenth of the seasonal period is one week or seven days. For m, I would use that same period. 

------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

FEEDBACK: mean line is missing

```{r}
## YOUR CODE GOES HERE

#Compute the moving average

dcmp_ped <-
  scs_pedestrians %>%
  #Generate the moving average
  mutate(
    MA_7 = slider::slide_dbl(Count, mean,
                .before = 3, .after = 3, .complete = TRUE)
  ) %>% 
  select(Count, MA_7)


#Extract the trend component
scs_pedestrians <- 
  dcmp_ped %>% 
  mutate(trend_class = MA_7)

#Plot the time series + the trend & the mean val
scs_pedestrians %>%
  autoplot() +
  geom_line(aes(x = Date, y = trend_class), 
            color = "steelblue2", linetype = "dashed") +
  scale_x_date(breaks = "5 weeks") + 
  theme(axis.text.x = element_text(angle = 90))


## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

YOUR ANSWER GOES HERE (Max. 30 words)

I would use the drift model. Unlike the other two models, it would not assign one value to everyday (mean) or given seasonal data (SNAIVE). Since we are talking about pedestrians, the drift model seems most appropriate, given it would take into account historical data (such as holidays and perhaps even when roads are closed) before assigning values.

FEEDBACK: the seasonal naive is the only one with seasonality...

------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
## YOUR CODE GOES HERE

fit <-
  scs_pedestrians %>% 
  model(
    mean = MEAN (Count),
    drift = RW(Count ~ drift()),
    snaive = SNAIVE(Count)
  )

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal naïve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

FEEDBACK: WHERE ARE THE GRAPHS?

```{r}
## YOUR CODE GOES HERE

#FORECAST OF THE SEASONAL NAIVE MODEL:
fc_snaive <- fit %>% 
  select(snaive) %>%
  forecast(h=7)

fc_snaive

#FORECAST OF THE MEAN MODEL:
fc_mean <- fit %>% 
  select(mean) %>%
  forecast(h=7)

fc_mean

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
## YOUR CODE GOES HERE

scs_pedestrians %>%
  ACF(Count) %>%
  autoplot()


fit %>% 
  select(mean) %>%
  gg_tsresiduals()

fitted_vals <- augment(fit) 

fitted_vals %>% 
  as_tibble() %>% 
  filter(.model == "mean") %>% 
  summarise(mean = mean(scs_pedestrians, na.rm = T))

mean_vals <- filter(fitted_vals, .model == "mean")

mean_vals %>%
  ACF(.innov) %>%
  autoplot()

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Then compare both ACFs below

------

COMPARE BOTH ACF PLOTS (Max 50 words)

The ACF Plots are extremely similar, with both having the same margin of error so to say, given that both have the same amount of lines approximately outside of the dashed lines that usually indicate normality.

FEEDBACK: WHY ARE THEY THE SAME!

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
## YOUR CODE GOES HERE

p1 <- ggplot(mean_vals, aes(sample = Count))
p1 <-  p1 + stat_qq() + stat_qq_line()

p1

#qq plots miden normality

p2 <- ggplot(data = mean_vals, aes(y = Count)) +
  geom_boxplot(fill = "darkolivegreen1") +
  stat_summary(aes(x = 0), fun = "mean", color = "violet")

p2


## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

------

The qq-plot shows there's a distinct lack of normality among the residuals. 
Meanwhile, the box plot evidently shows the model is biased, with it being highly unbalanced (it is much larger below the line). 

feedback: you are not making the graphs of the residuals. See solution
------


FEEDBACK: you need to study and practice coding. Obviously you do not understand concepts or the code very wel. This won tcut it for the fi nañ