---
title: "Untitled"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
pedestrian_filtered <- 
  pedestrian %>% 
  filter(Sensor == "Southern Cross Station" | Sensor == "Bourke Street Mall (North)") %>% 
  filter(date(Date) >= "2016-07-01" & date(Date) <= "2016-10-25") %>%
  group_by(Sensor) %>%
  index_by(Date) %>%
  summarise(sum = sum(Count))
```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
pedestrian_filtered %>% 
  filter(Sensor == "Southern Cross Station" | Sensor == "Bourke Street Mall (North)") %>%
  autoplot() +
  scale_x_yearweek(breaks = "5 weeks",
                   minor_breaks = "1 week")
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
max_south <- pedestrian_filtered %>% 
  filter(Sensor == "Southern Cross Station") %>% select(sum) %>%
  max(sum)

max_bourk <- pedestrian_filtered %>% 
  filter(Sensor == "Southern Cross Station") %>% select(sum) %>%
  max(sum)
```

FEEDBACK: YOU ALMOST GOT EVERYTHING.

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.

scs_pedestrians %>% 
  
  autoplot() +
  
  scale_x_yearweek(
    breaks = "1 week",
    minor_breaks = "5 weeks"
  ) + theme(axis.text.x = element_text(angle = 90))

```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

There is a clearly repeating pattern every week that indicates weekly seasonality. Since the data is daily, the seasonal period would be m = 7.

------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

FEEDBACK: only a 7-ma would have sufficed, yhis is too much and incorret...

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
scs_pedestrians <- scs_pedestrians %>% 
  mutate(
    `7-MA` = slider::slide_dbl(Count, mean, .before = 3, .after = 3, .complete = TRUE),
    trend_class = slider::slide_dbl(`7-MA`, mean, .before = 1, .after = 0, .complete = TRUE)
  )

scs_pedestrians %>% autoplot() + geom_line(aes(y = mean_val), color = "blue", linetype = 'dashed') +
  geom_line(aes(y = trend_class), color = "orange", linetype = 'dashed')
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

Mean model because all observations are of equal importance, so we need to assign them equal weights when generating the forecasts.


------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
fit <-
  scs_pedestrians %>% 
  model(
    mean = MEAN(Count),
    drift = RW(Count ~ drift()),
    snaive = SNAIVE(Count)
  )
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal na√Øve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
fc <- fit %>% forecast(h=7)

#figure for seasonal naive
fc %>% filter(.model == "snaive") %>% autoplot(scs_pedestrians)
#figure for mean model
fc %>% filter(.model == "mean") %>% autoplot(scs_pedestrians)


```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
scs_pedestrians %>% ACF(Count) %>% autoplot()

fit %>% 
  select(mean) %>% 
  gg_tsresiduals()

```

Then compare both ACFs below

------

Both ACF plots look very similar. The lines are outside the blue lines which mean that the residuals are correlated.There are correlations between innovation residuals.Therefore, there is information left in the residuals which should be used in computing forecasts.Clearly the residuals themselves exhibit the same trend than the data. After all the residuals are the difference between the model and the fitted values and, since the latter are constant in this model, the residuals exhibit the same trend than the original series.

FEEDBACK: THERE IS NO TREND IN THE DATA. SEE SOLUTION

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
model_vals <- fit %>% augment()

model_vals %>% as_tibble() %>%
  filter(.model == "mean") %>%
  summarise(mean = mean(.innov, na.rm = TRUE))


mean_vals <- filter(model_vals, .model=="mean")


```

------

Mean is super close to 0 which means that the mean model is unbiased To formally assess if this really small difference of being close to 0 is statistically significant we could perform a t-test.


------