---
title: "MIDTERM EXAM TSA - CRISTINA DIEZ HOYOS"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian couns are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.

```{r}
## YOUR CODE GOES HERE
pedestrian %>% 
  filter(Sensor == "Southern Cross Station") %>% 
  index_by(Date > "2016-07-01"&"2016-10-25")
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
## YOUR CODE GOES HERE
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>% 
  autoplot(Count) +
  scale_x_yearweek(breaks = "5 weeks",
                  minor_breaks = "1 week") +
  theme(axis.text.x = element_text(angle = 90), axis.text.y = element_text(angle = 90))

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------
I would expect a seasonal period from the beginning to the ends (every week) due to the fact that there is a repeating pattern. With weekly data, the seasonal period wold be m = 7
------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

FEEDBACK: CODE DOES NOT RUN

```{r}
## YOUR CODE GOES HERE
scs_pedestrians <- scs_pedestrians %>%
  mutate(
    `trend_class` = slider::slide_dbl(Count, mean,
                .before = 3, .after = 3, .complete = TRUE)
  )

#Plot
scs_pedestrians %>%
  autoplot(Count, colour = "black") +
  geom_line(aes(y = `trend_class`), colour = "red") +
  geom_line(aes(y = `mean_val`), colour = "grey")

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------
I would say mean model sbecasue of stable MA It is for forecasts of all future values are equal to the average of the historical data.

FEEDBACK. IT IS A POSSIBILITY. THE BEST IS SNAIVE
------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

feedback: why do you fit the drift model?

```{r}
## YOUR CODE GOES HERE
fit <-
  scs_pedestrians %>% 
  model(
    mean = MEAN(Count),
    drift = RW(Count~ drift()),
    snaive = SNAIVE(Count)
                )
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal naïve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
## YOUR CODE GOES HERE
fc = fit %>%
  forecast (h= 8)

fc %>%
  filter(.model =="snaive") %>%
  autoplot(scs_pedestrians, level = 95) 

fc %>%
  filter(.model =="mean") %>%
  autoplot(scs_pedestrians, level = 95) 
## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
## YOUR CODE GOES HERE
scs_pedestrians %>%
  ACF(Count) %>% 
  autoplot() +
  labs(title="DAILY PEDESTRIAN")

model_vals <-
  fit %>% 
  augment() %>% 
  filter(.model == "mean")

model_vals %>% 
  ACF(.innov) %>% 
  autoplot()

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

Then compare both ACFs below

------
the 1º ACF plot => As it is most of the time outside the correlations lines, it is correlated so i would say is bad because the decomposition does not loss any information. 

FEEDBACK: WHAT DECOMPOSITION? THERE IS NO DECOMPOSITION... DO YOU MEAN THE MODEL?

FEEDBACK: PLEASE TRY TO UNDERSTAND AND NOT JUST REPEAT... AND YOU HAD MULTPLE EXAMPLES OF THIS

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
## YOUR CODE GOES HERE

fit %>% 
  select(mean) %>%
  gg_tsresiduals()

# Compute the mean of the residuals
model_vals %>% as_tibble() %>%
  filter(.model == "mean") %>%
  summarise(mean = mean(.innov, na.rm = TRUE))

## DO NOT CREATE ADDITIONAL CODE SNIPPETS, KEEP EVERYTHING IN A SINGLE SNIPPET.
```

------
If the mean of the residuals is actually 0 it will be unbiased, very bad model. 
The fact that the mean of the residuals is 0 does not mean that they are small, it means that positive and negative residuals compensate.

feedback: yes, but you did not analyrze anything
------

FEEDBACK: YOU HAVE PROBLEMS WITH THE CODE (MINOR CORRECTIONS MADE) AND ALSO WITH THE CONCEPTS... 

FEEDBACK: STUDY MORE PLEASE.