---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE

ts_data %>% autoplot()+ scale_x_yearmonth(
  date_breaks = "4 years",
  minor_breaks = "1 year")

ts_stl<- ts_data %>%
  model(stl = STL(value))
components(ts_stl)

ts_data<- mutate(ts_data, log_ts_data =log(value))
ts_data

ts_data %>% autoplot(log_ts_data)+ scale_x_yearmonth(
  date_breaks = "4 years",
  minor_breaks = "1 year")

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation transforms the multiplicative schemes into a more "additive-like" scheme and makes it easier to work with

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.

manual_dcmp <- ts_data %>% mutate(
  `log_trend_class` = slider::slide_dbl(log_ts_data, mean, .before=5, .after=6, .complete=TRUE),
  `2xlog_trend_class` = slider::slide_dbl(`log_trend_class`, mean, .before=1, .after=0, .complete=TRUE)
)

manual_dcmp %>%  autoplot(log_ts_data, colour = "gray") +
  geom_line(aes(y = `2xlog_trend_class`), colour = "violet") +
    scale_x_yearmonth(date_breaks = "4 year",
                      minor_breaks = "1 year") +
  
  theme(axis.text.x = element_text(angle = 90))

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.

detrended_class <- 
  manual_dcmp %>%
  mutate(
      log_detrended = log_ts_data - `2xlog_trend_class`,
    )
detrended_class %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

# Detrended
detrended_class %>%
  ACF(log_detrended, lag_max = 48) %>%
  autoplot()

# Log
ts_data %>%
  select(log_ts_data) %>%
  ACF(lag_max = 48) %>%
  autoplot()

```

------------------------------------------------------------------------

we see that in the detrended ACF we can clearly see the seasonal component of the time series while in the original log-transformed time series it can not be seen since the trend component is much stronger.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

stl_dcmp <- 
  ts_data %>%
  model(stl = STL(value)) %>%
  components()

stl_dcmp %>% autoplot()

class_dcmp<- ts_data %>% model(
    classical = classical_decomposition(value, type = "additive")
  ) %>% 
  components()

class_dcmp %>% autoplot()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

stl_dcmp %>% autoplot(season_year)

class_dcmp %>% autoplot(seasonal)

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The STL component has more variance and it can be seen as the seasonal component grows over time while on the other hand the classical dcmp component remains constant.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK: you were suppossed to use all.equal() to obtain a single b oolean

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS

TC<-manual_dcmp$log_trend_class 

CT<-class_dcmp$trend

TC==CT

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
ts_data_quarter <- ts_data %>% mutate(quarter=yearquarter(ym))

ts_quarterly<- ts_data_quarter %>% index_by(quarter) 
ts_quarterly

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
