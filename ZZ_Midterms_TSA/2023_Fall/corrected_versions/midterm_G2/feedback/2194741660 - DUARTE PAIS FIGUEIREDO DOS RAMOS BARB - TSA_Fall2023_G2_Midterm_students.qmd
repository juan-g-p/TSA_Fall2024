---
title: "Untitled"
format: html
editor: source
---

```{r}
library(fpp3)
```

## 1. Transform data to an appropriate granularity (1.5 points)

The `pedestrian` dataset is loaded along with the fpp3 library

This dataset contains hourly pedestrian counts from 2015-01-01 to 2016-12-31 at 4 sensors in the city of Melbourne.

* **Sensor**: name of the sensor (key of the tsibble).
* **Date_time**: time when the pedestrian counts are recorded (time index).
* **Date**: date at which the pedestrian counts are recorded.
* **Time**: hour associated with **Date_Time**.
* **Counts**: hourly pedestrian counts.

We want to aggregate this data to compute the **total number of pedestrians measured by each sensor in a day**. More specifically, we want to compute this for: 

1. Only two sensors (filter out the rest of the sensors):

    * "Southern Cross Station"
    * "Bourke Street Mall (North)"
    
2. The time period comprised between "2016-07-01" and "2016-10-25".

**WRITE BELOW THE CODE THAT PERFORMS THIS AGGREGATION**. 

  * Note that the variable `Date` already gives you the day to which each data point corresponds. Use it.


```{r}
agg <- 
  pedestrian %>%
  
  filter(
    (Sensor == "Southern Cross Station") | (Sensor == "Bourke Street Mall (North)")
    ) %>%
  
  group_by(Sensor) %>%
  
  index_by(Day = as_date(Date)) %>%
  
  summarise(mean_ped = mean(Count, na.rm = TRUE)) %>%
  
  ungroup()

agg
```


**CREATE A SINGLE GRAPH CONTAINING ONE TIME PLOT FOR EACH OF THE TWO SENSORS (single graph with two curves)**

  * Use minor breaks every week and labelled breaks every 5 weeks

```{r}
agg %>%
  autoplot(mean_ped) +
  scale_x_yearmonth(breaks = '5 week', minor_breaks = "1 week") +
  theme(axis.text.x = element_text(angle = 45))
```

**FOR EACH SENSOR, DETERMINE THE DAY AT WHICH THE GREATEST NUMBER OF PERSONS IS MEASURED**

```{r}
agg_1 <- agg %>%
  filter(Sensor == "Southern Cross Station")

max(agg_1$mean_ped)

agg_2 <- agg %>%
  filter(Sensor == "Bourke Street Mall (North)")

max(agg_2$mean_ped)

```

FEEDBACK: COMPUTED THEMEAN INSTEAD OF THE TOTAL COUNT.

## 2. Load the data (0 points)

The snippet below loads the daily aggregated data measuring the number of pedestrians at the `Southern Cross Station` sensor in the city of Melbourne. It also transforms it to a tsibble.

Run the code and a pop-up window will appear. Select the file **scs_daily_pedestrian.csv** that has been provided along with the exam.

```{r, eval=FALSE}
scs_pedestrians <- 
  read.csv(file.choose()) %>% 
  mutate(Date = as.Date(Date)) %>% 
  as_tsibble(index=Date)

scs_pedestrians
```

## 3. Time plot (2 points)

Create a time plot of the series, set minor breaks every week and major breaks every 5 weeks.

```{r}
scs_pedestrians %>%
  autoplot(Count)+
  scale_x_yearmonth(breaks = '5 week', minor_breaks = "1 week")+
  theme(axis.text.x = element_text(angle = 45))
```

Based on the time-plot, which **length of the seasonal period would you consider from this data and why?. Specify the value you would use for m, what we have called the length of the seasonal period**.

------

For this time-plot the seasonal period is one week. As it can be seen, the data is daily, and every week is a period of seasonality. Therefore, m = 7.

------

## 4. Time Series decomposition (3 points)

First, run the following code to create a new variable within `scs_pedestrians` containing the mean value of the time series:

```{r}
scs_pedestrians$mean_val = mean(scs_pedestrians$Count, na.rm = TRUE)

scs_pedestrians
```

### 4.1 Use an appropriate moving average to compute the trend of the time-series as **classical_decomposition** would. Then depict the time series along with this trend estimate and the `mean_val` computed just before. Use a dahsed line for the `mean_val`.

* Store the trend in a column called `trend_class` within `scs_pedestrians`

```{r}
scs_pedestrians <-
  scs_pedestrians %>%
  
  mutate(
    
      trend_class = slider::slide_dbl(Count, mean, .before = 3, .after = 3, .complete = TRUE)
    )

scs_pedestrians %>%
  autoplot(Count, colour="gray") +
  geom_line(aes(y=mean_val), colour = "#D55E00", linetype = "dashed") +
  geom_line(aes(y=trend_class), colour = "black")
```

### 4.2 Based on the previous grqph, which of the following models would you pick to produce forecasts of up to 1 week ahead?

* Mean model
* Drift
* Seasonal Naive model

------

I would use a Seasonal Naive model since this type is more indicated for when we have a seasonality without trend. The seasonal naive model would replicate the seasonal patterns for forecasting.

------

## 5. Fitting models (3.5 points)

### 5.1 Fit the following models and store the result in a variable called `fit`.

Use the following names

* `mean`: mean model
* `drift`: drift model
* `snaive`: seasonal naive model

**The three models must be included within the same fitted object**.

```{r}
fit <-
  scs_pedestrians %>% 
  
  model(
    mean = MEAN(Count),
    drift = RW(Count ~ drift()),
    snaive = SNAIVE(Count)
                )
```

#### 5.2 Perform forecasts of up to one week ahead. The produce two figures

1. Forecasts of the seasonal na√Øve model (including prediction intervals)
2. Forecasts of the mean model (including prediction intervals)

```{r}
forecasts <- fit %>% forecast(h = 7, level = c(80,95)) 

forecasts %>% filter(.model == 'snaive') %>% autoplot(scs_pedestrians)
forecasts %>% filter(.model == 'mean') %>% autoplot(scs_pedestrians)
```

#### 5.3 Residuals of the mean model

Analyze the residuals of the mean model. Specifically do the following

##### 5.3.1. Produce an autocorelation plot (a.k.a correlogram) of:

1. The original time series `Count` in `scs_pedestrians`.
2. The innovation residuals of the `mean` model.

```{r}
scs_pedestrians %>% ACF(Count, lag_max = 21) %>% autoplot()

fitted_vals <- 
  fit %>%
  select(mean) %>%
  augment()

fitted_vals %>% ACF(.innov, lag_max = 21) %>% autoplot()
```

Then compare both ACFs below

------

Both graphs look the same which makes sense. Since we are using a mean model, that does not capture the seasonal component, the residuals will basically be the seasonality. Which will have a lot of autocorrelation (since we are leaving information behind) and will match with the autocorrelation of the original variable.

------

##### 5.3.2 Analyze whether the residuals of the mean model are biased or not

```{r}
fitted_vals %>% as_tibble() %>%
  filter(.model == "mean") %>%
  summarise(mean = mean(.innov, na.rm = TRUE))
```

------

The residuals of the model are not biased since they average zero. Since we are using a mean model and there is no trend and a regular seasonality, there will be no bias in the residuals, as they will balance each other out.

------

FEEDBACK: THIS IS ONE OF THE BEST EXAMS. KEEP IT UP AND REVIEW THE SOUTION SINCE SOME PARTS COULD BE BETTER EXPLAINED AND LACK SOME NUANCES. 