---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% autoplot(value) + scale_x_yearmonth(date_breaks = "4 year",minor_breaks = "1 year") 

ts_data <- ts_data %>% mutate(log_value = log(value))

ts_data %>% autoplot(log_value) + scale_x_yearmonth(date_breaks = "4 year",minor_breaks = "1 year")
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation, changes the scheme from a multiplicative scheme to an additive one

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
ts_data <- 
  ts_data %>%
  mutate(
    `12-MA` = slider::slide_dbl(log_value, mean,
                .before = 5, .after = 6, .complete = TRUE),
    
    log_trend_class = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
  )
ts_data
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# Compute the detrended component:
ts_data <- 
  ts_data %>%
  mutate(
      log_detrended = log_value - log_trend_class,
    )

ts_data %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>% ACF(log_value,lag_max = 24) %>% autoplot()

ts_data %>% ACF(log_detrended,lag_max = 24) %>% autoplot()
```

------------------------------------------------------------------------

In the autocorrelation of the log-transformed data, we can clearly see the trend component is strong.
Whereas the plot done on the log_detrended, the plot show the seasonal component, and no trend component,as the trend component is deleted

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <- ts_data %>% model(STL(log_value ~ trend(window = 21) + season(window = 9))) %>% components()

stl_dcmp %>% autoplot()

class_dcmp <- ts_data %>% model(classical = classical_decomposition(log_value, type = "additive")) %>% components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot(season_year)

class_dcmp %>% autoplot(seasonal)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

We can see that the size of the seasonal component in the classical decomposition is constant, which is one of the limitaions of classical decomposition, whereas in STL, the size of the season changes over time.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
all.equal(ts_data$log_trend_class, class_dcmp$trend)

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}



ts_quarterly <- ts_data %>%
  index_by(yearquarter(ym)) %>%
  summarise(
    quarterly = last(log_value)
  )





# Display the resulting quarterly time series
print(ts_quarterly)

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
ts_quarterly <- ts_data %>%
  index_by(yearquarter(ym)) %>%
  summarise(
    quarterly = mean(first(log_value),last(log_value))
  )
```
