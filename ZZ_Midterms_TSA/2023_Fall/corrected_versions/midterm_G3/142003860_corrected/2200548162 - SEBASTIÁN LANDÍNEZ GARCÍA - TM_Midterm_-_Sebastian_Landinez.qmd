---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks four years and minor breaks every year.

Then answer the question.

```{r}
ts_data %>% autoplot() + 
  scale_x_yearquarter(date_breaks = "4 year",
    minor_breaks = "1 year") 

log_ts_data = ts_data %>% mutate (value=log(value))

log_ts_data %>% autoplot() + 
  scale_x_yearquarter(date_breaks = "4 year",
    minor_breaks = "1 year")

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation makes the numbers in the data smaller, which in this case it helps show patterns more clearly when plotting the data.

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
# YOUR CODE GOES HERE
log_trend <- ts_data %>%
  mutate(
    `12-MA` = slider::slide_dbl(log_data, ~mean(.x, na.rm = TRUE),
                .before = 5, .after = 6, .complete = TRUE),
    `2x12-MA` = slider::slide_dbl(`12-MA`, ~mean(.x, na.rm = TRUE),
                .before = 1, .after = 0, .complete = TRUE)
  )

log_trend %>%
  autoplot(log_data) +
  geom_line(aes(y = `2x12-MA`))
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# YOUR CODE GOES HERE

```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
# YOUR CODE GOES HERE

# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
STL_decomp <- 
  log_ts_data %>%
  model(stl = STL(value)) %>%
  components()
STL_decomp

CLASS_decomp <- 
  log_ts_data %>% 
  model(
    dcmp = classical_decomposition(value, type = "additive")
  ) %>% 
  components()
CLASS_decomp

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
STL_decomp %>% 
  select(season_year) %>% autoplot()
CLASS_decomp %>% 
  select(seasonal) %>% autoplot()
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The first graph has a larger variance than the second, one reaches its peaks to 0.6, the other only to 0.4.

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
# FALSE
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
