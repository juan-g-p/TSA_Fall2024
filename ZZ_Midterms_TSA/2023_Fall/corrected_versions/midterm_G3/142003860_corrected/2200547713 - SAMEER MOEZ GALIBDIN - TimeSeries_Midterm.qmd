---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
library(ggplot2)
library(dplyr)
library(lubridate)
library(fma)
library(readr)
library(patchwork) 
library(GGally)
library(readxl)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
# YOUR CODE GOES HERE


#Original time series
original_plot <- ts_data %>%
  autoplot(value) +
  labs(title = "Original Time Series")+
  theme_minimal()



#Log-transformed time series

log_plot <- ts_data %>%
  mutate(log_value = log(value)) %>%
  autoplot(log_value) +
  labs(title = "Log-Transformed Time Series",
       x = "Date",
       y = "Log-Transformed Value") +
  theme_minimal() 
  
original_plot / log_plot



# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**

the log transformation reduces skewness, stabilizes awareness and reduces the impact of outliers.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
# YOUR CODE GOES HERE

  
log_trend_class <- ts_data %>%
  mutate(log_value = log(value),
         log_trend_class = slider::slide_dbl(log_value, mean, .before = 3, .after = 3, .complete = TRUE))


log_trend_class %>%
  autoplot(value) +
  labs(title = "Log-Transformed Series with Moving Average",
       y = "Value",
       x = "Time") +
  theme_minimal()


# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# YOUR CODE GOES HERE

log_detrended <- ts_data %>%
  mutate(log_value = log(value),
         log_trend_class = slider::slide_dbl(log_value, mean, .before = 3, .after = 3, .complete = TRUE),
         log_detrended = log_value - log_trend_class)

autoplot(log_detrended)


# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
# YOUR CODE GOES HERE

log_plot %>%
  ACF() %>%
  autoplot()

log_detrended %>%
  ACF() %>%
  autoplot()

# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
# YOUR CODE GOES HERE

#STL decomposition
stl_dcmp <- ts_data %>%
 model(stl = STL(value)) %>%
 components()

stl_dcmp %>% autoplot()

#Classical Decomposition

class_dcmp <- ts_data %>% 
model( classical = classical_decomposition(value))

classical_comps <- class_dcmp %>%
 components() 

classical_comps %>% autoplot()






# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
# YOUR CODE GOES HERE

stl_dcmp <- ts_data %>%
 model(stl = STL(value)) %>%
 components() 

autoplot(stl_dcmp, feature = "seasonal")

class_dcmp <- ts_data %>% 
model( classical = classical_decomposition(value))

classical_comps <- class_dcmp %>%
 components() 

autoplot(classical_comps, feature = "seasonal")

                                    
                                    

# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

both seasonal components because

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE

trend_class <- classical_comps$log_trend_class

trend_class

#ANSWER IS FALSE

## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE


ts_quarterly <- ts_data %>%
  mutate(yearquarter = yearquarter(ym)) %>%
  group_by(yearquarter) %>%
  summarise(value = last(value))

ts_quarterly


## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE

ts_quarterly <- ts_data %>%
  mutate(yearquarter = yearquarter(ym)) %>%
  group_by(yearquarter) %>%
  summarise(mean_value = mean(c(first(value), last(value))))

ts_quarterly
          

            
  
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
