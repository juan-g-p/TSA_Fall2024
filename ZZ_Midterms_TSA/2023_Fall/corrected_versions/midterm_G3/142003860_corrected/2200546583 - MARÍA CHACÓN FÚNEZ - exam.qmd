---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data$ym <- as.Date(ts_data$ym)

ggplot(ts_data, aes(x = ym, y = value)) +
  geom_line() +
  scale_x_date(
    date_labels = "%Y",
    date_breaks = "1 year",
    date_minor_breaks = "4 years"
  ) +
  labs(x = "Year", y = "Value", title = "Original Time Series")

ggplot(ts_data, aes(x = ym, y = log(value))) +
  geom_line() +
  scale_x_date(
    date_labels = "%Y",
    date_breaks = "1 year",
    date_minor_breaks = "4 years"
  ) +
  labs(x = "Year", y = "Log(Value)", title = "Log-Transformed Time Series")
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**
#The log transformation stabilizes variance, making trends more apparent, and it also reduces data fluctuations, which helps us in modeling and identifying underlying patterns
------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
window_size <- 7

ts_data <- ts_data %>%
  mutate(log_trend_class = zoo::rollmean(log(value), k = window_size, align = "center", fill = NA))

ggplot(ts_data, aes(x = ym)) +
  geom_line(aes(y = log(value), color = "Log-Transformed Series")) +
  geom_line(aes(y = log_trend_class, color = "Log Trend Class")) +
  scale_x_date(date_labels = "%Y", date_breaks = "1 year", date_minor_breaks = "4 years") +
  labs(x = "Year", y = "Value", title = "Log-Transformed Series with Log Trend Superimposed") +
  scale_color_manual(values = c("Log-Transformed Series" = "blue", "Log Trend Class" = "red"))
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- ts_data %>%
  mutate(log_detrended = log(value) - log_trend_class)

ggplot(ts_data, aes(x = ym, y = log_detrended)) +
  geom_line() +
  scale_x_date(date_labels = "%Y", date_breaks = "1 year", date_minor_breaks = "4 years") +
  labs(x = "Year", y = "Log Detrended", title = "Log Detrended Time Series")
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
acf_log <- acf(ts_data$log_trend_class, plot = FALSE, na.action = na.pass)
acf_log_detrended <- acf(ts_data$log_detrended, plot = FALSE, na.action = na.pass)
plot(acf_log, main = "ACF of Log-Transformed Series")
plot(acf_log_detrended, main = "ACF of Log Detrended Series")
par(mfrow=c(1,1))
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)
#The ACF of the Log-Transformed Series exhibits strong autocorrelation, with all values outside the critical zone, indicating a persistent pattern. While, the ACF of the Log Detrended Series shows weaker autocorrelation, with some values within the critical zone, suggesting that the detrending process reduced the autocorrelation, making the data more stationary. The presence of both positive and negative values in the ACF of the Log Detrended Series indicates both positive and negative lags in the autocorrelation, reflecting more random variation.
------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <- STL(ts_data$value)
class_dcmp <- classical_decomposition(ts_data$value, type = "multiplicative")
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
autoplot(stl_dcmp, series = "seasonal") +
  labs(title = "Seasonal Component (STL Decomposition)")

autoplot(class_dcmp, series = "seasonal") +
  labs(title = "Seasonal Component (Classical Decomposition)")
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
ts_data$ym <- as.Date(ts_data$ym)
ts_quarterly_last <- ts_data %>%
  mutate(quarter = floor_date(ym, "quarter")) %>%
  group_by(quarter) %>%
  summarise(value = last(value))
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}

ts_data$ym <- as.Date(ts_data$ym)
ts_quarterly_mean <- ts_data %>%
  mutate(quarter = floor_date(ym, "quarter")) %>%
  group_by(quarter) %>%
  summarise(value = mean(c(first(value), last(value))))
```
