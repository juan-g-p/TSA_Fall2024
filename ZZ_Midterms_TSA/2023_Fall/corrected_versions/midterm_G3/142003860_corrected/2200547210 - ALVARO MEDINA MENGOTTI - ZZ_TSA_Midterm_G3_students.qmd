---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% 
  autoplot(value) +
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 years"
  ) 

ts_data %>% mutate(log_val = log(value)) %>% 
  autoplot(log_val)+
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 years"
  ) 
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

it is used to transform multiplicative schemes into additive schemes

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
ts_data <- 
  ts_data %>%
  mutate(
    `7-MA` = slider::slide_dbl(value, mean, 
                               .before = 3, .after = 3, .complete = TRUE)
  ) 

ts_data %>% 
  autoplot(value, color = "black", alpha = 0.5) + 
  geom_line(aes(y = `7-MA`), color = "#D55E00")
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- 
  ts_data %>% 
  mutate(
    log_detrended = value / `7-MA`
  ) 
ts_data %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>% ACF(log_detrended) %>% autoplot()

ts_data %>% ACF(`7-MA`) %>% autoplot()
```

------------------------------------------------------------------------

**the detrended transformation has most of its lags significant and it shows seasonal pattern, the second plot shows a trend pattern but we could specify a higher number of lags to actually see the pattern through time**

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <- 
  ts_data %>% 
  model(
    stl = STL(value)
  ) %>% components()

class_dcmp <- 
  ts_data %>% 
  model(
    classical = classical_decomposition(value, type = "multiplicative")
  ) %>% components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot()

class_dcmp %>% autoplot()
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

the random component in classical decomposition explains most of its variance across different groups, for stl decomposition its remainder also explains most if its variance. The remainder and random component follow a different pattern.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
all.equal(class_dcmp$trend, ts_data$`7-MA`)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
ts_quarterly <-
  ts_data %>% 
  mutate(quarter = yearquarter(ym)) %>% 
  filter(quarter == (yearquarter(quarter)))

ts_quarterly %>% 
  index_by(((quarter))) %>% summarise((last(ym)))
  
?dplyr::last()
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
ts_quarterly %>% 
  index_by(value) %>% summarise(avgq = mean(first(quarter))+ last(quarter))
```
