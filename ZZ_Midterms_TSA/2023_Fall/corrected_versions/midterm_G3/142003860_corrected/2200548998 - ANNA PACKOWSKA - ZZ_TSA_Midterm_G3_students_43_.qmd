---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
head(ts_data)
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every 4 years and minor breaks every 1 year.

Then answer the question.

```{r}
ts_data %>%
  autoplot() +
  scale_x_yearmonth(breaks = "4 years",
                     minor_breaks = "1 year")+
  theme(axis.text.x = element_text(angle = 90))
```

```{r}
ts_data %>%
  autoplot(log(value)) +
  scale_x_yearmonth(breaks = "4 years",
                     minor_breaks = "1 year")+
  theme(axis.text.x = element_text(angle = 90))
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

Transformations such as log transformation are used to to change the multiplicative scheme into the additive one. It can be also used to show on the graph different magnitude of values.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
ts_data <- 
ts_data %>%
  mutate(
    `12-MA` = slider::slide_dbl(log(value), mean,
                .before = 5, .after = 6, .complete = TRUE),
    `log_trend_class` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
  ) %>%
  select(ym, value, log_trend_class)
ts_data
```
```{r}
ts_data %>%
  autoplot(log(value)) +
  geom_line(aes(y = `log_trend_class`), colour = "#D55E00")
```


## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- 
  ts_data %>%
  mutate(log_detrended = log(value) - `log_trend_class`)
ts_data %>%
  autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>%
  ACF(log_detrended) %>%
  autoplot()
```
```{r}
ts_data %>%
  ACF(log(value)) %>%
  autoplot()
```

------------------------------------------------------------------------

In case of log-transformed time series and the ACF plot, the seasonality was not seen on the graph. That is due to the weak seasonal component comparing to trend component. As we detrend the time series and plot ACF plot, the seasonality becomes visible. The time series are monthly data with yearly seasonality, which can be clearly seen by high positive peak for lag-12

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <-
  ts_data %>%
  model(
    stl_dcmp = STL(log(value)) 
  ) %>%
  components()
```
```{r}
class_dcmp <-
  ts_data %>%
  model(
    class_dcmp = classical_decomposition(log(value), type = "additive")
  ) %>%
  components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>%
  autoplot
```

```{r}
class_dcmp %>%
  autoplot()
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

For both decompositions the variance of the remainder component is relatively low comparing to trend and seasonal components. For classical decomposition it looks slightly better, as the overall variance is lower, however when we look at STL decomposition, we can see that its variance is higher due to the beginning of time series, which were not computed in classical decomposition, as it uses the moving averages. Also for STL it is possible to change the parameters of windows and try to make seasonal and trend components to capture the structure of time series, that for now might leak into the remainder. This is not possible for classical decomposition.
We could also check the ACF plot of the remainder to check for which of the decompositions the remaider is less autocorrelated, more white-noise like.
------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
all.equal(ts_data$log_trend_class, class_dcmp$trend)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
?dplyr::last()

ts_quarterly <- 
  ts_data %>%
  index_by(quarter = yearquarter(ym)) %>%
  summarise(last(value))
ts_quarterly
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
ts_quarterly <- 
  ts_data %>%
  index_by(quarter = yearquarter(ym)) %>%
  mutate(first(value))%>%
  mutate(last(value))
ts_quarterly

?seq

ts_quarterly <- 
  ts_data %>%
  index_by(quarter = yearquarter(ym)) %>%
  summarise(average = mean(c(first(value), last(value))))
ts_quarterly
x = c(1,2)
mean(x)
```
