# DO NOT CREATE ADDITIONAL CODE SNIPPETS
ts_data %>%
ACF(value_log) %>%
autoplot()
ts_data %>%
ACF(log_detrended) %>%
autoplot()
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
#since its additive, we are ussing log
stl_dcmp<-
ts_data %>%
model(stl=STL(value_log)) %>%
components()
class_dcmp<-
ts_data %>%
model(
dcmp=classical_decomposition(value_log,type="additive")
) %>%
components()
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
#plot os stl_dcmp
stl_dcmp %>%
autoplot()
class_dcmp %>%
autoplot()
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
round(class_dcmp$trend,4)==round(log_trend_class$`2x12-MA`,4)
max_err = max(class_dcmp$trend - log_trend_class$`2x12-MA`, na.rm = TRUE)
max_err
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
?dplyr::last
ts_quarterly<-
ts_data %>%
summarise(
last(ym,order_by=yearquarter(ym),na_rm=TRUE)
)
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data %>%
autoplot() +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data =
ts_data %>%
mutate(
logval = log(value)
)
ts_data %>%
autoplot(logval) +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data <- ts_data %>%
mutate(
log_trend_class = slider::slide_dbl(logval, mean,
.before = 3, .after = 3, .complete = TRUE)
)
ts_data %>%
autoplot(log_trend_class) +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data = ts_data %>%
mutate(
log_detrended = logval - log_trend_class
)
ts_data %>%
autoplot(log_detrended) +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data %>%
ACF(logval) %>%
autoplot()
ts_data %>%
ACF(log_detrended) %>%
autoplot()
stl_dcmp =
ts_data %>%
model(stl = STL(value)) %>%
components()
stl_dcmp %>% autoplot()
class_dcmp =
ts_data %>%
model(class = classical_decomposition(log_trend_class)) %>%
components(class_dcmp)
class_dcmp %>% autoplot()
stl_dcmp %>%
autoplot(season_year)
class_dcmp %>%
autoplot(seasonal)
ts_data <- ts_data %>%
mutate(
log_trend_class = slider::slide_dbl(logval, mean,
.before = 3, .after = 3, .complete = TRUE)
)
ts_data %>%
autoplot(log_trend_class) +
scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data %>%
ACF(logval) %>%
autoplot()
ts_data %>%
ACF(log_detrended) %>%
autoplot()
stl_dcmp =
ts_data %>%
model(stl = STL(value)) %>%
components()
stl_dcmp %>% autoplot()
class_dcmp =
ts_data %>%
model(class = classical_decomposition(log_trend_class)) %>%
components(class_dcmp)
class_dcmp %>% autoplot()
stl_dcmp %>%
autoplot(season_year)
class_dcmp %>%
autoplot(seasonal)
ts_data %>%
autoplot(log_trend_class)
class_dcmp %>%
autoplot(trend)
ts_data$log_trend_class == class_dcmp$trend
ts_data = ts_data %>%
mutate(
quarter = yearquarter(ym)
)
ts_quarterly = ts_data %>%
group_by(quarter) %>%
summarise(last(value))
ts_quarterly %>%
select(last(quarter))
ts_quarterly
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
# YOUR CODE GOES HERE
ts_data %>% autoplot() + scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
ts_data %>% mutate(log_transformed = log(value)) %>% autoplot(log_transformed) + scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year"
)
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
# YOUR CODE GOES HERE
ts_data <- ts_data %>% mutate(log_transformed = log(value))
ts_data <- ts_data %>% mutate(log_trend_class = slider::slide_dbl(log_transformed,mean,.before = 5,.after = 5,.complete = TRUE))
ts_data %>% autoplot(log_transformed) + geom_line(aes(y = log_trend_class), colour = "#D55E00")
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
# YOUR CODE GOES HERE
ts_data <- ts_data %>% mutate(log_detrended = log_transformed - log_trend_class)
ts_data %>% autoplot(log_detrended) + scale_x_yearmonth(
breaks = "4 years",
minor_breaks = "1 year")
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
# YOUR CODE GOES HERE
ts_data %>% ACF(log_transformed) %>% autoplot()
ts_data %>% ACF(log_detrended) %>% autoplot()
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
# YOUR CODE GOES HERE
class_dcmp <- ts_data %>% model(classical= classical_decomposition(log_transformed)) %>% components()
stl_dcmp <- ts_data %>% model(stl = STL(log_transformed)) %>% components()
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
# YOUR CODE GOES HERE
class_dcmp %>% autoplot()
stl_dcmp %>% autoplot()
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
## YOUR CODE GOES HERE
all.equal(ts_data$log_trend_class,class_dcmp$trend)
## DO NOT ADD ADDITIONAL CODE SNIPPETS
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
log_data = ts_data%>% mutate (value=log(value))
log_data %>% autoplot() +scale_x_yearquarter(date_breaks = "4 year",
minor_breaks = "1 year")
log_trend_class <- ts_data %>%
mutate(log_trend_class = slider::slide_dbl(value, mean, .before = 3, .after = 3, .complete = TRUE))
ts_data %>%
autoplot(value, series = "Log Transformed Series") +
autolayer(log_trend_class, series = "Moving Average", alpha = 0.7) +
labs(title = "Log-Transformed Series Moving Average")
ts_data <- ts_data %>%
mutate(log_trend_class = slider::slide_dbl(log(value), mean, .before = 3, .after = 3, .complete = TRUE))
ts_data <- ts_data %>%
mutate(log_detrended = log(value) - log_trend_class)
ts_data %>%
autoplot(log_detrended, series = "Log Detrended Series") +
labs(title = "Log Detrended Series")
ts_data1 <- na.omit(ts_data)
acf(ts_data1$value, lag.max = 50)
acf(ts_data1$log_detrended, lag.max = 50)
stl_dcmp <- ts_data %>%
model(stl = STL(value)) %>%
components()
stl_dcmp %>% autoplot()
class_dcmp <- ts_data %>%
model( classical = classical_decomposition(value))
classical_comps <- class_dcmp %>%
components()
classical_comps %>% autoplot()
stl_seasonal_plot <- stl_dcmp %>%
autoplot(seasonal) +
labs(title = "Seasonal Component of stl_dcmp")
stl_dcmp
classSeasonalPlot <- class_dcmp %>%
autoplot(seasonal) +
labs(title = "Seasonal Component of class_dcmp")
stl_seasonal_plot <- stl_dcmp %>%
autoplot(seasonal) +
labs(title = "Seasonal Component of stl_dcmp")
classSeasonalPlot <- class_dcmp %>%
autoplot(seasonal) +
labs(title = "Seasonal Component of class_dcmp")
class_dcmp <- ts_data %>%
model(classical = classical_decomposition(value))
classical_comps <- class_dcmp %>%
components()
class_trend <- classical_comps$trend
trendMatch <- all(log_trend_class, class_trend) %>% as.logical()
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
library(ggplot2)
log_trans <-
ts_data$ym <- as.Date(ts_data$ym)
ts_data$minor_break <- year(ts_data$ym) %% 4 == 0
ts_data$major_break <- month(ts_data$ym) == 1
ts_data$log_value <- log(ts_data$value)
ggplot(ts_data, aes(x = ym, y = log_value)) +
geom_line() +
scale_x_date(breaks = "1 year", minor_breaks = "4 years") +
labs(title = "Log-Transformed Time Series", x = "Year", y = "Log(Value)")
library(ggplot2)
library(dplyr)
log_trans <-
ts_data$ym <- as.Date(ts_data$ym)
ts_data$log_value <- log(ts_data$value)
# Calculate the moving average of the log-value variable
ts_data$log_moving_avg <- ts_data$log_value[1:12] %>%
mean()
ts_data$log_detrended <- ts_data$log_value - ts_data$log_moving_avg
# Create a timeplot of the log-detrended variable
log_timeseries <-
ts_data %>%
ggplot(aes(x = ym, y = log_detrended)) +
geom_line() +
labs(title = "Log-Detrended Time Series",
x = "Year",
y = "Log-Detrended Value") +
scale_x_date(date_breaks = "1 year", minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
library(ggplot2)
library(dplyr)
log_trans <-
ts_data$ym <- as.Date(ts_data$ym)
ts_data$log_value <- log(ts_data$value)
# Calculate the moving average of the log-value variable
ts_data$log_moving_avg <- ts_data$log_value[1:12] %>%
mean()
ts_data$log_detrended <- ts_data$log_value - ts_data$log_moving_avg
# Create a timeplot of the log-detrended variable
log_timeseries <-
ts_data %>%
ggplot(aes(x = ym, y = log_detrended)) +
geom_line() +
labs(title = "Log-Detrended Time Series",
x = "Year",
y = "Log-Detrended Value") +
scale_x_date(date_breaks = "1 year", minor_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 90))
log_timeseries
library(ggplot2)
library(dplyr)
library(forecast)
ts_data %>% ACF(log(log_trans)) %>% autoplot()
library(dplyr)
# load the data
data(ts_data)
# perform seasonal decomposition using STL
stl_dcmp <- ts_data %>%
mutate(Employed = value) %>%
model(stl = STL(Employed, seasonal = TRUE)) %>%
components()
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
# original time plot
ts_data %>% autoplot(value) + scale_x_yearmonth(date_breaks = "4 years", minor_breaks = "1 year")
# log-transformation
ts_data %>% autoplot(log(value)) + scale_x_yearmonth(date_breaks = "4 years", minor_breaks = "1 year")
value_log <- log(ts_data$value)
log_trend_class <- ts_data %>%
mutate(
`12-MA` = slider::slide_dbl(value_log, mean,
.before = 5, .after = 6, .complete = TRUE),
`2x12-MA` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
log_trend_class
log_trend_class %>%
autoplot(value_log, colour = "gray") +
geom_line(aes(y = `2x12-MA`), colour = "#D55E00")
log_detrended <- log_trend_class %>%
mutate(detrended = value - `2x12-MA`)
log_detrended
log_detrended %>% autoplot(detrended)
log_detrended
log_trend_class
log_detrended <- log_trend_class %>%
mutate(detrended = value - `2x12-MA`)
log_detrended
log_detrended %>% autoplot(detrended)
log_trend_class %>% ACF(value) %>% autoplot()
log_detrended %>% ACF(detrended) %>% autoplot()
# STL decomposition
stl_dcmp <- ts_data %>% model(stl = STL(value)) %>% components()
stl_dcmp
#classical decomposition
class_dcmp_add <- ts_data %>%
model(decomp = classical_decomposition(value, type = "additive")) %>%
components()
class_dcmp_add
class_dcmp_mul <- ts_data %>%
model(decomp = classical_decomposition(value, type = "multiplicative")) %>%
components()
class_dcmp_mul
stl_dcmp %>% autoplot()
class_dcmp_add %>% autoplot()
class_dcmp_mul %>% autoplot()
ts_data %>%
model(decomp = classical_decomposition(value_log, type = "additive")) %>%
components() %>%
mutate(
`12-MA` = slider::slide_dbl(value_log, mean,
.before = 5, .after = 6, .complete = TRUE),
`2x12-MA` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
) %>%
autoplot()
ts_data %>%
model(decomp = classical_decomposition(value_log, type = "multiplicative")) %>%
components() %>%
mutate(
`12-MA` = slider::slide_dbl(value_log, mean,
.before = 5, .after = 6, .complete = TRUE),
`2x12-MA` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
) %>%
autoplot()
class_dcmp %>% autoplot()
ts_data
ts_quarterly <- ts_data %>%
index_by(yearquarter(ym)) %>%
summarise(last_value = last(value))
head(ts_quarterly)
ts_quarterly <- ts_data %>%
group_by(yearquarter(ym)) %>%
summarise(mean_first_last = mean(c(first(value), last(value))))
head(ts_quarterly)
ts_data
ts_data
ts_quarterly <- ts_data %>%
index_by(yearquarter(ym)) %>%
summarise(last_value = last(value))
head(ts_quarterly)
ts_quarterly <- ts_data %>%
group_by(yearquarter(ym)) %>%
summarise(mean_first_last = mean(c(first(value), last(value))))
head(ts_quarterly)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
library(fpp3)
ts_data$ym <- yearmonth(ts_data$ym)
ts_data_ts <- ts(ts_data$value, frequency = 12)
ts_data_tsibble <- ts_data %>%
as_tsibble(index = ym) %>%
mutate(log_value = log(value))
ts_data %>% autoplot() +
scale_x_yearquarter(date_breaks = "4 year",
minor_breaks = "1 year")
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
library(fpp3)
ts_data$ym <- yearmonth(ts_data$ym)
ts_data_ts <- ts(ts_data$value, frequency = 12)
#
# ts_data_tsibble <- ts_data %>%
#   as_tsibble(index = ym) %>%
#   mutate(log_value = log(value))
ts_data %>% autoplot() +
scale_x_yearquarter(date_breaks = "4 year",
minor_breaks = "1 year")
ts_data
ts_data %>% autoplot()
library(fpp3)
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
library(fpp3)
ts_data$ym <- yearmonth(ts_data$ym)
ts_data_ts <- ts(ts_data$value, frequency = 12)
#
# ts_data_tsibble <- ts_data %>%
#   as_tsibble(index = ym) %>%
#   mutate(log_value = log(value))
ts_data %>% autoplot() +
scale_x_yearquarter(date_breaks = "4 year",
minor_breaks = "1 year")
library(fpp3)
library(fpp3)
library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE
library(fpp3)
ts_data$ym <- yearmonth(ts_data$ym)
ts_data_ts <- ts(ts_data$value, frequency = 12)
#
# ts_data_tsibble <- ts_data %>%
#   as_tsibble(index = ym) %>%
#   mutate(log_value = log(value))
ts_data %>% autoplot() +
scale_x_yearquarter(date_breaks = "4 year",
minor_breaks = "1 year")
ts_data %>% autoplot()
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
library(fpp3)
ts_data$log_detrended <- ts_data$log_value - ts_data$log_trend_class
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
acf(log_transformed_series, main = "ACF of Log-Transformed Series")
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
STL_decomposition <-
log_data %>%
model(stl = STL(value)) %>%
components()
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
STL_decomposition %>%
select(season_year) %>% autoplot()
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
library(dplyr)
ts_data <- ts_data %>%
mutate(timestamp = as.Date(timestamp))
