---
title: "Midterm Roberto Par√°s"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% autoplot(value)

log_data= ts_data%>% mutate (value=log(value))

log_data %>% autoplot() +scale_x_yearmonth(date_breaks = "4 year",
    minor_breaks = "1 year")

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

It attains a change in the x and y values to better fit the plot.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
log_trend_class <- 
  log_data %>%
  mutate(
    `7-MA` = slider::slide_dbl(value, mean,
                .before = 3, .after = 3, .complete = TRUE)
  ) %>% 
  select(value, `7-MA`)

log_trend_class

log_trend_class %>%
  autoplot(value) +
  
  geom_line(aes(y = `7-MA`), colour = "#D55E00") +
  
  labs(y = "Value",
       title = "Log_trend_class")
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
log_detrended <- 
  log_trend_class %>%
  mutate(
      detrended = value - `7-MA`,
    )
log_detrended %>% autoplot(detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
log_data %>% ACF(value) %>% autoplot()
log_detrended %>% ACF(detrended) %>% autoplot()
```

------------------------------------------------------------------------

**In the log transformed you can see a clear downward trend, while in the log-detrended you cans see a seasonal pattern in which not much of it is significant with a couple of outliers.**

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <-as_tsibble(log_data) %>%
  model(stl = STL(value)) %>%
  components() 

stl_dcmp %>% autoplot()


class_dcmp <- log_data %>%
  
  # Fit model
  model(
    classical = classical_decomposition(value, type = "additive")
  ) %>% 
  
  # Extract components
  components() %>% 
  
  # Plot (if you want to)
  autoplot()
class_dcmp
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}

stl_dcmp %>% autoplot(season_year)

class_dcmp %>% autoplot(seasonal)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**They differ on the variance, the classical dcmp has less variance than the stl.**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
?dplyr::last()
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
