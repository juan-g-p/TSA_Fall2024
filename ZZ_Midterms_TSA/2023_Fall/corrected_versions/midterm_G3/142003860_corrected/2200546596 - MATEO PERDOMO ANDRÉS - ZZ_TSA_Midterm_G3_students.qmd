---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every 4 years and minor breaks every year.

Then answer the question.

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE

library(ggplot2)

ggplot(df, aes(x = date, y = Value)) +
  geom_line() +
  scale_x_date(
    date_breaks = "1 year",   
    date_labels = "%Y",     
   
  ) +
  scale_x_date(
    date_breaks = "4 years",    
    date_labels = "%Y",      
    expand = expansion(mult = c(0.02, 0))     
  ) +
  labs(x = "Year") +
  ggtitle("Time Series Plot with Yearly and 4-Year Breaks")



```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**The goal of the log transformation is to reduce the impact of outlier values by making the data easier to read for certain statistical analysis.**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
df <- value %>%
  # Create the different Moving Averages of order i. # Note that i is always uneven 
for (i in seq(3, 13, by = 2)){

 col_name <- paste0(as.character(i), "-MA") width = (i-1)/2 # Number of points to be left to the left an to the right aus_exports[[col_name]] = slider::slide_dbl(aus_exports$Exports, mean, 
#.complete = TRUE -> function evaluated only on full windows .before = width, .after = width, .complete = TRUE) 

} 

df <- df %>%
 select(value,) 
df
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
df %>%
  ACF() %>%
  autoplot()

```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
#STL decomposition
stl_dcmp_1 <- ts_data %>%
 model(stl = STL(value)) %>%
 components()

stl_dcmp_1 %>% autoplot()

#Clasical decomposition
classical_dec <- ts_data %>% 
model( classical = classical_decomposition(value,
 type = "additive") )

classical_comps <- classical_dec %>%
 components() 

classical_comps %>%
 autoplot()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
library(fable)
library(fabletools)

seasonal <- ts_data %>% select(value)

fit_snaive <- seasonal %>% model(SNaive = SNAIVE(value))

fitted_vals_snaive <- fit_snaive %>% augment()
forecasts_snaive <- fit_snaive %>% forecast(h = 36)

ts_data %>%
  autoplot(value, level = FALSE) +
  autolayer(fitted_vals_snaive, .fitted, colour = "red", linetype = "dashed")

#plot for seasonal component of class_dcmp
library(fable)
library(fabletools)

seasonal2 <- ts_data %>% select(value)
fit_snaive2 <- seasonal2 %>% model(SNaive = SNAIVE(value))

fitted_vals_snaive2 <- fit_snaive2 %>% augment()
forecasts_snaive2 <- fit_snaive2 %>% forecast(h = 36)

forecasts_snaive2 %>%
  autoplot(level = FALSE) +
  autolayer(fitted_vals_snaive2, .fitted, colour = "red", linetype = "dashed")

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

The STL decomposition's seasonal component has a higher value overall, meaning the trend component is stronger here, although still peaking at the same points in time as the classical decomposition's.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
# Assuming 'trend_class' and 'classical_decomp_trend' are the trend components

# Assuming 'ts_data' is your time series data
# Assuming 'ts_data' is your time series data
stl_result <- stl(ts_data, s.window = "periodic")
trend_stl <- stl_result$time.series[, "trend"]


match <- all.equal(trend_stl, trend)

match

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS


```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
