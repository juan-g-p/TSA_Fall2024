---
title: "ALI ELSAMRA"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data$Date <- as.Date(ts_data$ym)
ggplot(data = ts_data, aes(x = Date, y = value)) +
  geom_line() +
  labs(title = "Original Time Series", x = "Year", y = "Value") +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal()


ggplot(data = ts_data, aes(x = Date, y = log(value))) +
  geom_line() +
  labs(title = "Log-transformed Time Series", x = "Year", y = "Log Value") +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal()
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

Log transformation compresses the scale, reducing skewness and making patterns more suitable, especially when data spans several orders of magnitude.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column within `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
library(ggplot2)
library(slider)
library(dplyr)
library(tsibble)

ts_data <- ts_data %>%
  mutate(log_value = log(value))

m <- 12
k <- m/2

ts_data <- ts_data %>%
  mutate(uncentered_ma = slider::slide_dbl(log_value, mean, .before = k-1, .after = 0, .complete = TRUE))

ts_data <- ts_data %>%
  mutate(log_trend_class = slider::slide_dbl(uncentered_ma, mean, .before = 0, .after = 1, .complete = TRUE))

ggplot(data = ts_data, aes(x = Date)) +
  geom_line(aes(y = log_value),, alpha = 0.6) +
  geom_line(aes(y = log_trend_class), colour = "#D55E00") +
  labs(title = "Log-transformed Time Series with Classical Decomposition Trend", 
       x = "Year", y = "Log Value") +
  theme_minimal()

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data$log_detrended <- ts_data$log_value - ts_data$log_trend_class
ggplot(data = ts_data, aes(x = Date, y = log_detrended)) +
  geom_line() +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal()


```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
library(fma)
library(readr)

# ACF of Log-transformed Time Series
autoplot(acf(ts_data$log_value, lag.max = 20, plot = FALSE))
sum(is.na(log_detrended))
log_detrended <- na.omit(log_detrended)

autoplot(acf(log_detrended, lag.max = 20, plot = FALSE))


```

------------------------------------------------------------------------

The "log_detrended" ACF plot drops quickly, suggesting more stationarity. The "ts_data\$log_value" ACF plot declines slowly, indicating stronger autocorrelation, likely from trends or seasonality.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <- 
  ts_data %>% 
    model(
      stl = STL(value)
    ) %>% 
  components()


class_dcmp <- 
  ts_data %>% 
  model(
    classical = classical_decomposition(value)
  ) %>% 
  components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
autoplot(stl_dcmp, 
         title = "Seasonal Component from STL Decomposition")
autoplot(class_dcmp, 
         title = "Seasonal Component from Classical Decomposition")
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?\
Both show annual oscillations. STL's seasonal is more fluctuant. Classical's seasonal has larger amplitude and appears smoother in comparison.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
classical_trend <- class_dcmp$trend
matching_trends <- all(abs(ts_data$log_trend_class - classical_trend) < 0.0000001)
matching_trends


```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}

ts_quarterly <- ts_data %>%
  group_by(quarter = floor_date(ym, "quarter")) %>% 
  summarise(value = last(value)) %>%                
  as_tsibble(index = quarter)
ts_quarterly

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
