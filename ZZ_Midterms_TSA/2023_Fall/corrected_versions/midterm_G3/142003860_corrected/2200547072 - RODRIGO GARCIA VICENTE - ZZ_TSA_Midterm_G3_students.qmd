---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% 
  
  autoplot() +
  
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 years"
  )

ts_data %>% mutate(value = log(value))  %>% 
  
  autoplot()+
  
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 years"
  )
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**It is used to the reduce the amount of extreme variables**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column within `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
log_trend <- 
  
  ts_data %>%
  
  # Generate the moving average
  mutate(
    
    #The slider function applies a function to "sliding" time windows.
    #In this case it is a 7-MA because we are moving from j=-3 (before = 3) 
    # to j=+3 (after = 3).
    `7-MA` = slider::slide_dbl(value, mean,
                               
                #.complete = TRUE -> function evaluated only on full windows
                # This means that the MA will not be computed for the first
                # and last three points of the time series
                .before = 3, .after = 3, .complete = TRUE)
  ) %>% 
  
  select(`7-MA`)

ts_data$log_trend_class = log_trend

ts_data %>% 
  
  autoplot()+
  
  autolayer(ts_data, log_trend_class$`7-MA`)+
  
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 years"
  )
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- ts_data %>%
  mutate(log_detrended = value - log_trend_class$`7-MA`)

autoplot(ts_data, log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
acf(ts_data$log_trend_class, na.action = na.pass)
acf(ts_data$log_detrended, na.action = na.pass)

```

------------------------------------------------------------------------

Both plot differ because the moving average can be a good tool to visualize the trend, however it is hard to see any patterns. By calculating the detrended log value, we can see the patterns in the change which is very useful.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
classical_dec <- ts_data %>%
  model(
    classical = classical_decomposition(value, type = "additive")
  ) 
class_dcmp <- 
  classical_dec %>% 
  components()

stl_dcmp <- 
  ts_data %>%
  model(stl = STL(value)) %>%
  components()รง
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot(season_year)
class_dcmp %>% autoplot(seasonal)

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The seasonal components differ because the one from STL decomposition is growing whilst the other isn't.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
ts_data$log_trend_class$`7-MA`- class_dcmp$trend
FALSE
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
