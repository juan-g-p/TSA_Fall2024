---
title: "Untitled"
format: html
editor: visual
---

library(fpp3)

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS.
# ALL THE CODE SHALL BE CONTAINED HERE


#plot of original time serie


ts_data %>% 

  autoplot()+
  #scale_x_datetime
  scale_x_yearmonth(breaks = "4 years",
                     minor_breaks = "1 year")

#plot log 
ts_data %>% 
  mutate(valuelog=log(value)) %>% 
  autoplot(valuelog) +
  scale_x_yearmonth(breaks = "4 years",
                     minor_breaks = "1 year")
  
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**

#Values have a different range. From value, ranges where from 200-9000 and with the log transformation the value are in the range of 7.6-9

#also, **:** in the log transformation the variation around the trend-cycle of the seasonal pattern does not vary anymore

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.

#since it a yearmont, m=12 so 
ts_data<-ts_data %>%
  mutate(value_log=log(value))
  
log_trend_class<-
  ts_data %>% 

  mutate(
    # Unbalanced window for the first 12-MA: 1 point to the left, two
    # points to the right
    `12-MA` = slider::slide_dbl(value_log, mean,
                .before = 5, .after = 6, .complete = TRUE),
    
    # Subsequent two MA to make the overall window balanced
    `2x12-MA` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
  )
log_trend_class %>% select(ym, value_log, `12-MA`, `2x12-MA`) %>% head(20)


#CHECK
#round(mean(ts_data$value_log[1:12]),4)==round(log_trend_class$`2x12-MA`[[12]], 4)

#plot
log_trend_class %>%
  autoplot(value_log) +
  
  geom_line(aes(y = `2x12-MA`), colour = "#D55E00") 


  
  
  
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
# YOUR CODE GOES HERE
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.

ts_data<-
  log_trend_class %>% 
 mutate(
   log_detrended=value_log-`2x12-MA`,
 ) 

#plot

ts_data %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS


ts_data %>% 
  ACF(value_log) %>% 
  autoplot()

ts_data %>% 
  ACF(log_detrended) %>% 
autoplot()

```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

In the original time series, the trend component is very strong, so the plot decrease as time passes.

At the other hand, since we detrend the serie, the trend component disapear and the acf plot shows more the seasonal component.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

#since its additive, we are ussing log
stl_dcmp<-
ts_data %>%
  model(stl=STL(value_log)) %>% 
components()

class_dcmp<-
  ts_data %>% 
  model(
    dcmp=classical_decomposition(value_log,type="additive")
  ) %>% 
  components()
  
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

#plot os stl_dcmp
stl_dcmp %>% 
  autoplot()

class_dcmp %>% 
  autoplot()
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

In the STL decomposition, the variance of the remainder is smaller than all other components(season year and trend). The graph seem to capture well

In the classeical decomposition, thevariance of the random is also smaller than all the components and seem to have even a smaller variance than in the STL decomposition.

In this case, the classical decomp seems a better tool.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS


round(class_dcmp$trend,4)==round(log_trend_class$`2x12-MA`,4)

max_err = max(class_dcmp$trend - log_trend_class$`2x12-MA`, na.rm = TRUE)
max_err 

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
?dplyr::last

ts_quarterly<-
  ts_data %>% 
  summarise(
last(ym,order_by=yearquarter(ym),na_rm=TRUE)
)

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
