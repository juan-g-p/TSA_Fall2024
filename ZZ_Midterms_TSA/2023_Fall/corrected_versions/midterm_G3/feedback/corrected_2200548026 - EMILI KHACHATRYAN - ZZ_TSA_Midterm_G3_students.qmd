---
title: "Emili Khachatryan Midterm"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% 
  
  autoplot() +
  
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 year"
  )

ts_data <- 
  ts_data %>% mutate(log_data = log(value))


ts_data %>% autoplot(log_data)
ts_data %>% autoplot(value)
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**The log transformation makes the variable value to be additive rather than multiplicative, that's what we need for STL decomposition model. Also it's getting more exponential**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column within `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK: code does not show the original series

```{r}
ts_data <- ts_data %>%
  mutate(
    
    `12-MA` = slider::slide_dbl(log_data, mean,
                .before = 5, .after = 6, .complete = TRUE),
    `2x12-MA` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
    )

ts_data <- ts_data %>%
  rename(log_trend_class =`2x12-MA`)

ts_data %>%
  autoplot(log_trend_class, colour = "gray") +
  geom_line(aes(y = log_trend_class), colour = "#D55E00")

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- 
  ts_data %>% 
  mutate(
    log_detrended = log_data - log_trend_class,
  )

ts_data %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>% 
  ACF(log_data) %>% 
  autoplot()

ts_data %>% 
  ACF(log_detrended) %>% 
  autoplot()
```

------------------------------------------------------------------------

**In log_detrended ACF plot we can see more seasonality, also it appears to have more white noise, hence it's more random which we want to achieve** (50 words MAX)

FEEDBACK: you can see the seasonality, but IT IS NOT AT ALL WHITE NOISE OR MORE WHITE NOISE!! It has a deterministic pattern, the seasoanlity. :)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp <- 
  ts_data %>% 
    model(
      stl = STL(value)
    ) %>% 
  components()
  
class_dcmp =
  ts_data %>% 
  model(
    classical = classical_decomposition(value)
  ) %>% 
  components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot(season_year)

class_dcmp %>% autoplot(seasonal)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**In the classical decomposition the seasonality is more defined and it has less variance compared to the STL decomposition**

FEEDBACK: in STL seasonal component is allowed to change, in classical no. See notes

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
all.equal(class_dcmp$trend, ts_data$log_trend_class)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

feedback: this would have grouped if you had used `index_by` or converted to a `tibble`.

```{r}
ts_quarterly <- ts_data %>%
  mutate(Quarter = quarter(ym)) %>%
  group_by(Quarter) %>%
  summarise(last_value = last(value, order_by = ym)) %>%
  ungroup() %>%
  as_tsibble(index = Quarter, key = last_value)

# FEEDBACK
ts_quarterly2 <- ts_data %>%
  # mutate(Quarter = quarter(ym)) %>%
  index_by(yearquarter(ym)) %>%
  summarise(last_value = last(value)) 
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
ts_quarterly <- ts_data %>%
  mutate(Quarter = quarter(ym)) %>%
  group_by(Quarter) %>%
  summarise(mfl = mean(first(value), last(value))) %>%
  ungroup() %>%
  as_tsibble(index = Quarter, key = "mfl")

```

FEEDBACK: overall quite good! keep up the good work

