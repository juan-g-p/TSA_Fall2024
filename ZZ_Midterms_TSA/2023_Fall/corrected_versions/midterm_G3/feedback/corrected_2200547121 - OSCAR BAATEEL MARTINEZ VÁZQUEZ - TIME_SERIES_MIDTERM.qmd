---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

FEEDBACK: NOT WHAT I ASKED FOR.

```{r}
# YOUR CODE GOES HERE
ts_data%>% 
  autoplot()+
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks="1 year"
  )


#LOG TRANSFORMATION 
ts_data_log <- ts_data %>%
        model(stl = STL(log(value))) %>%
        components()
  

ts_data_log %>% autoplot() + scale_x_yearmonth(
  breaks ="4 years",
  minor_breaks="1 year"
)

# HOW TO FIX THE TIMELINE 
#Time Series 

# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column within `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
# YOUR CODE GOES HERE

valueLog <- log(ts_data$value)
log_trend_class <- ts_data %>% 
  mutate(
    `12-MA` = slider::slide_dbl(valueLog, mean,
                .before = 5, .after = 6, .complete = TRUE),
    `2x12-MA` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
  )

log_trend_class 

log_trend_class %>%
  autoplot(valueLog, colour = "gray") +
  geom_line(aes(y = `2x12-MA`), colour = "#D55E00")




# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

FEEDBACK: OUTPUT IS WRONG

```{r}
# YOUR CODE GOES HERE
# Compute the detrended component:
log_detrended <- 
  log_trend_class %>%
  mutate(
      detrended = value - `2x12-MA`,
    )
log_detrended %>% autoplot(detrended)
# DON NOT CREATE ANY ADDITIONAL CODE SNIPPETS
# ALL THE CODE SHALL BE CONTAINED HERE.
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

FEEDBACK: output does not make any sense. Repeat as we did in class correction.

```{r}
# YOUR CODE GOES HERE
#ACF LOG TRANSFORMED 
ACF_Trend<-log_trend_class%>%ACF(log_trend_class)%>%autoplot()
ACF_Trend
#ACF LOG_DETRENDED 
acf_detrended<-log_detrended%>% ACF(log_detrended)%>%
  autoplot()
acf_detrended

# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
# YOUR CODE GOES HERE
# STL DECOMPOSITION 
stl_dcmp <- ts_data %>%
 model(stl = STL(value)) %>%
 components()

stl_dcmp %>% autoplot()


#CLASSICAL DECOMPOSITION
classical_dcmp <- 
  ts_data %>% 
  

  model(
    dcmp = classical_decomposition(value, type = "additive")
  ) %>% 
  components()

classical_dcmp%>%autoplot
# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
# YOUR CODE GOES HERE
stl_dcmp_seasonal <- ts_data %>%
 model(stl = STL(value)) %>%
 components(seasonal)

stl_dcmp_seasonal %>% autoplot(stl_dcmp_seasonal)


# DO NOT CREATE ADDITIONAL CODE SNIPPETS
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

FEEDBACK: STUDY MORE. YOU PASSED BECAUSE I HAVE BEEN SOMEWHAT FORGIVING. THIS WONT CUT IT FOR THE FINAL. STUDY MORE AND CODE MORE AND UNERSTAND THE CODE. 
