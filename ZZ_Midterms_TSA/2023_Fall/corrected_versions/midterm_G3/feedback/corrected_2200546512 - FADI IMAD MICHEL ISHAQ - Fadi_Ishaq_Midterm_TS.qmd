---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}

library(ggplot2)

ts_data$Date <- as.Date(ts_data$ym)

plot_original <- ggplot(data = ts_data, aes(x = Date, y = value)) +
  geom_line() +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal()

plot_log_transformed <- ggplot(data = ts_data, aes(x = Date, y = log(value))) +
  geom_line() +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal()

print(plot_original)
print(plot_log_transformed)


```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**


FB NO INTERPRETATION
------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK:
* YOU NEED A 2X12 OVING AVERAGE, NOT A 6 MOVING AVERAGE
* THIS SYNTAX WAS NEVER EXPLAINED IN CLASS, IT IS MUCH MORE COMPLEX AND YOU OBTAINED IT EITHER FROM GOOGLE OR CHAT GPT. 

```{r}


library(ggplot2)




ts_data$Date <- as.Date(ts_data$ym)


ts_data$log_value <- log(ts_data$value)


half_window <- 6
ts_data$log_trend_class <- NA
for (i in (half_window + 1):(nrow(ts_data) - half_window)) {
  ts_data$log_trend_class[i] <- mean(ts_data$log_value[(i - half_window):(i + half_window)], na.rm = TRUE)
}


ggplot(data = ts_data, aes(x = Date)) +
  geom_line(aes(y = log_value), color="green") +
  geom_line(aes(y = log_trend_class), color="red", linetype="dashed") +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal() +
  labs(y = "Log Value")


```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}

ts_data$log_detrended <- ts_data$log_value - ts_data$log_trend_class


ggplot(data = ts_data, aes(x = Date, y = log_detrended)) +
  geom_line(color="blue") +
  scale_x_date(date_breaks = "4 years", minor_breaks = "1 year") +
  theme_minimal() +
  labs(y = "Log Detrended Value", title = "Timeplot of Log Detrended Values")

```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}


acf(ts_data$log_value, main="ACF of Log-transformed Series")

acf(ts_data$log_detrended[!is.na(ts_data$log_detrended)], main="ACF of Log Detrended Series")

```

------------------------------------------------------------------------

The ACF of the log-transformed series displays strong seasonality and a slow decay, suggesting a trend. In contrast, the ACF of the **`log_detrended`** series decays more rapidly and shows diminished seasonality, indicating that the detrending has effectively isolated the non-seasonal components.3. (3 points)

FEEDBACK


DETRENDING LEAVES SEASONAL + REMAINDER.

YOU SHOULD HAVE INDICATED THAT SEASONALITY IS NOW VISIBLE IN THE PEAKS AT LAGS 12

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

FEEDBACK: THIS IS NOT EVEN FITTING THE MOELS...

```{r}

ts_data_ts <- ts(ts_data$log_value, frequency = 12)  

stl_dcmp <- stl(ts_data_ts, s.window="periodic")

class_dcmp <- classical_decomposition(ts_data_ts)

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

FEEDBACK: CODE TOO COMPLEX, YIELDS WRONG RESULTS, NEVER EXPLAINED IN CLASS AND OBVIOUSLY COPIED.

```{r}

stl_seasonal <- stl_dcmp$time.series[, "seasonal"]


if (!any(is.na(stl_seasonal) | !is.finite(stl_seasonal))) {

  plot(stl_seasonal, type = "l", col = "blue",
       xlab = "Time", ylab = "Seasonal Component", main = "Seasonal Component of STL Decomposition")
}


classical_seasonal <- class_dcmp$seasonal

classical_seasonal <- classical_seasonal[!is.na(classical_seasonal) & is.finite(classical_seasonal)]

if (length(classical_seasonal) > 0) {

  plot(classical_seasonal, type = "l", col = "red",
       xlab = "Time", ylab = "Seasonal Component", main = "Seasonal Component of Classical Decomposition")
}

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The STL decomposition adapts to changing seasonality, while the classical decomposition assumes constant seasonality, based on common principles.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
False
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```


FEEDBACK: STUDY MORE, PAY ATTENTION IN CLASS, PRACTICE ALL THE CODE AND NOTEBOOKS GIVEN, THIS WONT CUT IT FOR THE FINAL.    
