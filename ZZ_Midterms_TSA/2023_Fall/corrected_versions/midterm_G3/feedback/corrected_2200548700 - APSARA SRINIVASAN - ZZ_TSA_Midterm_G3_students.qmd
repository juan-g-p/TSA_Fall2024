---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
library(ggplot2)
log_trans <-
ts_data$ym <- as.Date(ts_data$ym)
ts_data$minor_break <- year(ts_data$ym) %% 4 == 0
ts_data$major_break <- month(ts_data$ym) == 1
ts_data$log_value <- log(ts_data$value)
ggplot(ts_data, aes(x = ym, y = log_value)) +
  geom_line() +
  scale_x_date(breaks = "1 year", minor_breaks = "4 years") +
  labs(title = "Log-Transformed Time Series", x = "Year", y = "Log(Value)")

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain? In the code provided, the log transformation is applied to the **`value`** column of the **`ts_data`** data frame. The **`log`** function is used to calculate the natural logarithm of each value in the **`value`** column, resulting in a new column called **`log_value`**.The log transformation is used to compress the data and normalize it, making it easier to visualize and analyze. The resulting log-transformed time series can be plotted using ggplot2, as shown in the code.By using the log transformation, the data can be represented on a logarithmic scale, which can help identify trends and patterns in the data that may not be visible on a linear scale. Additionally, the log transformation can help reduce the impact of extreme values, making it easier to compare data across different scales.

**YOUR ANSWER GOES HERE (20 WORDS)**

FEEDBACK; MAX 20 WORDSA AND OBVIOUSLY YOU COPIED AND MADE THIS UP.

EXPLAINE IN CLASS WHAT LOG TRANSFORMATION DOES. LOOK IN THE NOTES.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK: you did not study anything aboutmoving averages and you obvioulsy did not participate in your group assignment.

```{r}

library(ggplot2)
library(dplyr)
log_trans <-
  ts_data$ym <- as.Date(ts_data$ym)

ts_data$log_value <- log(ts_data$value)

# Calculate the moving average of the log-value variable
ts_data$log_moving_avg <- ts_data$log_value[1:12] %>%
  mean()

ts_data$log_detrended <- ts_data$log_value - ts_data$log_moving_avg

# Create a timeplot of the log-detrended variable
log_timeseries <-
  ts_data %>%
  ggplot(aes(x = ym, y = log_detrended)) +
  geom_line() +
  labs(title = "Log-Detrended Time Series",
       x = "Year",
       y = "Log-Detrended Value") +
  scale_x_date(date_breaks = "1 year", minor_breaks = "1 year") +
  theme(axis.text.x = element_text(angle = 90))

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{library(ggplot2)}
library(dplyr)

log_det <-
  ts_data$ym <- as.Date(ts_data$ym)

ts_data$log_value <- log(ts_data$value)

# Calculate the moving average of the log-value variable
ts_data$log_moving_avg <- ts_data$log_value[1:12] %>%
  mean()

ts_data$log_detrended <- ts_data$log_value - ts_data$log_moving_avg

# Create a timeplot of the log-detrended variable
ts_data %>%
  ggplot(aes(x = ym, y = log_detrended)) +
  geom_line() +
  labs(title = "Log-Detrended Time Series",
       x = "Year",
       y = "Log-Detrended Value") +
  scale_x_date(date_breaks = "1 year", minor_breaks = "1 year") +
  theme(axis.text.x = element_text(angle = 90))
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

FEEDBACK: code could be good if you has done anything before.

```{r}
library(ggplot2)
library(dplyr)
library(forecast)




ts_data %>% ACF(log(log_trans)) %>% autoplot()
ts_data %>% ACF(log(log_det)) %>% autoplot()



```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** the log detrended has a higher moving average

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

FEEDBACK: dod not even adapt properly the code that you copied from the example

```{r}
library(dplyr)

# load the data
data(ts_data)

# perform seasonal decomposition using STL
stl_dcmp <- ts_data %>%
  mutate(Employed = value) %>%
  model(stl = STL(Employed, seasonal = TRUE)) %>%
  components()

# plot the seasonal component of STL
plot(stl_dcmp$seasonal, type = "l", xlab = "Year", ylab = "Employed")

# perform seasonal decomposition using class
class_dcmp <- ts_data %>%
  mutate(Employed = value) %>%
  model(
    clas_deic = classical_decomposition(Employed, type = "additive")
  ) %>%
  components()

select(classical_dec, Year, Employed, trend, seasonal, random)

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{library(fpp3)}
library(dplyr)
library(ggplot2)
ts_data = pd.read_csv('ts_data.csv')

# Create a time plot for the seasonal component of STL_Dcmp
stl_dcmp = f3.stl(ts_data['value'])
ts_data['stl_dcmp'] = stl_dcmp['seasonal']
ggplot(ts_data, aes(x='ym', y='stl_dcmp')) +
  geom_line() +
  labs(title='Seasonal Component of STL_Dcmp',
       x='Year Month',
       y='Value')

# Create a time plot for the seasonal component of Class_Dcmp
class_dcmp = f3.class_dcmp(ts_data)
ts_data['class_dcmp'] = class_dcmp['seasonal']
ggplot(ts_data, aes(x='ym', y='class_dcmp')) +
  geom_line() +
  labs(title='Seasonal Component of Class_Dcmp',
       x='Year Month',
       y='Value')
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{library(dplyr)}

df <- pd.DataFrame({'Date': pd.to_datetime(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09', '2023-01-10']),
                   'Value': [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]})

ts_quarterly <- df %>%
  mutate(Quarter = quarter(Date)) %>%
  group_by(Quarter) %>%
  summarise(Last_Value = last(Value))

print(ts_quarterly)

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
library(dplyr)

# Assuming ts_data$ym is in Date format
ts_quarterly <- ts_data %>%
  mutate(year = format(ym, "%Y"),
         quarter = as.numeric(format(ym, "%m")) %/% 4 + 1) %>%
  group_by(year, quarter) %>%
  summarise(first_value = first(value),
            last_value = last(value),
            mean_value = mean(c(first_value, last_value))) %>%
  ungroup() %>%
  mutate(ym = as.Date(paste0(year, "-", quarter * 3 - 2, "-01")))

# Display the first few rows of ts_quarterly
head(ts_quarterly)

```
