---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>% autoplot() + scale_x_yearmonth(breaks="4 years", minor_breaks = "1 year")

ts_data %>% autoplot(log(value)) + scale_x_yearmonth(breaks="4 years", minor_breaks = "1 year")
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation communicates percentage changes in the data (relative changes) in the original scale. Given that we are doing a natural logarithm, we should interpret this graph as e% change in the value sin the original scale.

FEEDBACK: explained in class. 04_A_TSDecomposition_Intro, log transformation applied to multiplicative schemes to render them additive.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK: you split this question between this and the following snippet... this is bad organization. But overall good

```{r}
arg1 = ts_data %>% mutate(log_trend_class = slider::slide_dbl(value, mean, .before = 5, .after = 6, .step=1,  .complete = TRUE)) %>% mutate(log_trend_class = log(log_trend_class))

arg1 %>% autoplot(log_trend_class) + scale_x_yearmonth(breaks="4 years", minor_breaks="1 year")
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
arg2 = arg1 %>% mutate(`2x12MA`= slider::slide_dbl(log_trend_class, mean, .before = 1, .after = 0, .step=1,  .complete = TRUE), 
                       log_detrended = log(value) - `2x12MA`)

arg2 %>% autoplot(log_detrended)
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

FEEDBACK: code does not run. It is the filter that messes it up. You are dropping a lot of times in the series with those filters and the subsequent acf is not able to compute. Also you should have used ACF

```{r}
arg2 %>% filter(log_detrended > 0)%>% acf(log_detrended)
arg2 %>% filter(log_trend_class > 0) %>% acf(log_trend_class)
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}
stl_dcmp = ts_data %>% model(stl = STL(value)) %>% components()
class_dcmp = ts_data %>% model(clas = classical_decomposition(value)) %>% components()
```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot(season_year)
class_dcmp %>% autoplot(seasonal)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

The seasonal component in the STL seems to indicate that it is multiplicative while the one in the classical decomposition looks additive.

FEEDBABCK: one is constant one is not. I said explicitly in the exam: "look in the notes for advantages and disadvanted of each decomposition algorithm". Session 
04_B says about classical_decomposition:

* It has some strong limitations that we will explain below. Most notably, it assumes that the seasonal component remains constant over time.

And about STL, same session says:

* Seasonal component allowed to change over time. 

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK:
you are comparing the wrong thing, you are comparing the trends of STL and class_dcmp and you were suppossed to compare your manually computed trend with the trend of classical decomposition. This was exactly the same as in the group assignment and is done explicitly as well in the example in notebook 04_E_ClassicalDecomposition_fromScratch

```{r}
all.equal(round(stl_dcmp$trend, 3), (class_dcmp$trend))
```

# 4. (1.5 points)

Time series data wrangling

FEEDBACK: we had done several examples that dealt with the aggregation of time series. For example, we had aggregated sub-daily data of electricity consumption to daily and monthly data using `index_by()`. This is done in notebook 03_A when we compute `vic_elec_d` and `vic_elec_m` from `vic_elec`.

The key was to understand that I was asking you to aggregate monthly data in quarters, and then you should have known that I had to use `index_by()`.

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
?seq
aux = seq(1, nrow(ts_data), 4)
ts_quarterly = ts_data$value %>% nth(ts_data, 4)
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

FEEDBACK: overall you can improve both the coding and understanding of concepts. Keep working in the subject please since there are still many concepts to see until the final.

