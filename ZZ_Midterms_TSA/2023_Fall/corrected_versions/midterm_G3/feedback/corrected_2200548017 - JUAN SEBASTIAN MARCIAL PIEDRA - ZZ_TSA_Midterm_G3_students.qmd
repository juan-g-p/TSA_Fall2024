---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}

ts_data %>% 
  
  autoplot() +
  
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 year"
  )


tsdata_log <- ts_data %>%
  mutate(log_value = log(value))
  
  tsdata_log %>%
  autoplot(log_value) +
  scale_x_yearmonth(
    breaks = "4 years",
    minor_breaks = "1 year"
  )





```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}

log_trend_class <- ts_data_log %>%
  mutate(
    `12-MA` = slider::slide_dbl(log_value, ~mean(.x, na.rm = TRUE),
                .before = 5, .after = 6, .complete = TRUE),
    `2x12-MA` = slider::slide_dbl(`12-MA`, ~mean(.x, na.rm = TRUE),
                .before = 1, .after = 0, .complete = TRUE)
  )

log_trend_class %>%
  autoplot(log_value, colour = "blue") +
  geom_line(aes(y = `2x12-MA`), colour = "#D55E00") +
  labs(y = "Log_Value",
       title = "Log-Transformed Series with Moving Average")





```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
library(ggplot2)
library(dplyr)

# Detrend the log-transformed variable using the moving average
tsdata_log$log_detrended <- tsdata_log$value - tsdata_log$log_trend_class

# Create a time plot of the log_detrended series
ggplot(tsdata_log, aes(x = ym)) +
  geom_line(aes(y = log_detrended), color = 'blue') +
  labs(title = 'Detrended Log-Transformed Series', x = 'Date', y = 'Log Detrended Value') +
  theme_minimal()




```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
log_detrended <- log_trend_class %>% 
  mutate(detrended = value - `2x12-MA`)

log_detrended

log_detrended %>% autoplot(detrended)
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}

# STL Decomposition
stl_dcmp <- ts_data %>%
  model(stl = STL(value)) %>%
  components()

stl_dcmp %>% autoplot()

# Classical Decomposition
classical_dcmp <- ts_data %>%
  model(classical = classical_decomposition(value)) %>%
  components()

classical_dcmp %>% autoplot()


```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
library(ggplot2)

# Time plot for the seasonal component of stl_dcmp
stlseasonalplot <- autoplot(stl_dcmp$stl[, "seasonal"]) +
  labs(title = 'STL Decomposition - Seasonal Component', x = 'Date', y = 'Value') +
  theme_minimal()

# Time plot for the seasonal component of classical_dcmp
classicalseasonalplot <- autoplot(classical_dcmp$classical$seasonal) +
  labs(title = 'Classical Decomposition - Seasonal Component', x = 'Date', y = 'Value') +
  theme_minimal()

cat(stl_seasonal_plot)
cat(classical_seasonal_plot)


```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
ts_data <- as_tsibble(ts_data, index = start_timestamp)

# Create a new time series indexed in a quarterly manner
ts_quarterly <- ts_data %>%
  group_by(quarter = floor_date(start_timestamp, unit = 'quarter')) %>%
  summarise(value = last(value))

ts_quarterly

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}

```
