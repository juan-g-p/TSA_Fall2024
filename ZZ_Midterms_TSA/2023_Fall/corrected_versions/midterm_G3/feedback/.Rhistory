library(fpp3)
ts_data <-
read.csv(file.choose()) %>%
mutate(
ym = yearmonth(start_timestamp)
) %>%
as_tsibble(index = ym) %>%
select(ym, value)
ts_data
ts_data_log %>%
autoplot(value) +
scale_x_yearmonth(
breaks = "1 year",
minor_breaks = "4 years"
)
ts_data_log <- mutate(ts_data, log_value = log(value))
ts_data_log
ts_data_log %>%
autoplot(value) +
scale_x_yearmonth(
breaks = "1 year",
minor_breaks = "4 years"
)
ts_data_log %>%
autoplot(log_value) +
scale_x_yearmonth(
breaks = "1 year",
minor_breaks = "4 years"
)
ts_data_log <-
ts_data_log %>%
mutate(
#The slider function applies a function to "sliding" time windows.
#In this case it is a 7-MA because we are moving from j=-3 (before = 3)
# to j=+3 (after = 3).
log_trend_class = slider::slide_dbl(log_value, mean,
#.complete = TRUE -> function evaluated only on full windows
# This means that the MA will not be computed for the first
# and last three points of the time series
.before = 1, .after = 1, .complete = TRUE)
)
ts_data_log
ts_data_log %>%
autoplot(value) +
geom_line(aes(y = log_trend_class), colour = "#D55E00")
ts_data_log <-
ts_data_log %>%
mutate(
log_detrended = log_value - log_trend_class
)
ts_data
ts_data_log %>%
ACF(log_value) %>%
autoplot()
ts_data_log %>%
ACF(log_detrended) %>%
autoplot()
stl_dcmp <-
ts_data_log %>%
model(stl = STL(log_value)) %>%
components()
class_dcmp <- ts_data_log %>%
# Fit model
model(
classical = classical_decomposition(log_value, type = "additive") )%>% components()
class_dcmp_plot <-
class_dcmp %>%
components() %>%
autoplot()
class_dcmp
class_dcmp_plot <-
class_dcmp %>%
autoplot()
stl_dcmp_plot <-
stl_dcmp %>%
autoplot()
class_dcmp_plot <-
class_dcmp %>%
autoplot()
stl_dcmp_plot <-
stl_dcmp %>%
autoplot()
stl_dcmp_plot
class_dcmp_plot
class_dcmp_plot <-
class_dcmp %>%
autoplot(season_year)
class_dcmp
class_dcmp_plot <-
class_dcmp %>%
autoplot(seasonal)
stl_dcmp_plot <-
stl_dcmp %>%
autoplot(season_year)
class_dcmp_plot
stl_dcmp_plot
class_dcmp_plot
stl_dcmp_plot
