---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

**FEEDBACK**: your code runs but I find truly astonishing that you did not pay attention in class and used this utterly complex code instead (which looks totally extracted from ChatGPT by the way)

PAY ATTENTION IN CLASS AND PRACTICE MORE.

```{r}
library(ggplot2)  
ts_data$ym <- as.Date(ts_data$ym)
ts_data$minor_break <- as.factor(year(ts_data$ym) %% 4 == 0)
ts_data$major_break <- as.factor(month(ts_data$ym) == 1)
ts_data$log_value <- log(ts_data$value)
ggplot(ts_data, aes(x = ym, y = value)) +geom_line() +scale_x_date(breaks = "1 year", minor_breaks = "4 years")+labs(title = "Original Time Series", x = "Year", y = "Value") 

ggplot(ts_data, aes(x = ym, y = log_value)) +
  geom_line() +scale_x_date(breaks = "1 year", minor_breaks = "4 years") +labs(title = "Log-Transformed Time Series", x = "Year", y = "Log(Value)") 
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK: ONE NOTEBOOK AND AN ENTIRE ASSIGNENT ON THE MOVING AVERAGE TO ESTIMATE TREND. CLEARLY YOU HAVE NOT BOTHERED STUDYING EITHER OF THOSE.

```{r}
# Load the required libraries
library(fpp3)
library(tsibble)

# Convert "ym" to a Date object if it's not already
ts_data$ym <- as.Date(ts_data$ym)

# Convert the data to a tsibble
ts_data_tsibble <- as_tsibble(ts_data, index = ym)

# Fill gaps in the time series data (if needed)
ts_data_tsibble <- fill_gaps(ts_data_tsibble)

# Log-transform the time series
ts_data_tsibble <- ts_data_tsibble %>%
  mutate(log_value = log(value))

# Perform classical decomposition to get the same moving average
classical_decomp <- ts_data_tsibble %>%
  model(
    classical = classical_decomposition(log_value, type = "additive")
  ) %>%
  fit()

# Extract the log_trend_class from the decomposition
log_trend_class <- classical_decomp %>% 
  components() %>% 
  pull(log_trend_class)

# Add log_trend_class as a new column
ts_data_tsibble <- ts_data_tsibble %>%
  mutate(log_trend_class = log_trend_class)

# Create a time plot of the log-transformed series with log_trend_class superimposed
ts_data_tsibble %>%
  autoplot(log_value) +
  geom_line(aes(y = log_trend_class), color = "#D55E00") +
  labs(y = "Log-Transformed Value", title = "Time Plot with Log-Trend-Class Superimposed")

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

FEEDBACK: makes no sense.

```{r}
#USE THIS CODE

recent_value <- ts_data %>%
  filter(year(Quarter) >= 2000) %>%
  select(Quarter, value)

recent_value
for (i in seq(1, 4)) {
  lag_name = paste0("value_lag", as.character(i))
  recent_value[[lag_name]] = lag(recent_value[["value"]], i)
}

recent_beer

n_lag = 4
lag_name = paste0("value_lag", n_lag)

recent_value %>% 
  autoplot() +
  scale_x_yearquarter(breaks = "1 years",
                      minor_breaks = "1 year") +
  geom_line(aes_string(x = "Quarter", y = lag_name), # Call attention upon aes_string
            color = "red",
            linetype = "dashed")

recent_value %>%
  gg_lag(y = value, geom = "point", lags = 4)
recent_value %>%
  gg_lag(y = value, geom = "point", lags = 1:12)

# ACF Plot A.K.A correlogram
recent_value %>%
  ACF() %>%
  autoplot()




```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>% ACF(log(value)) %>% autoplot() # FEEDBACK: THE ONLY THING THT MAKES SENSE HERE

stl_dcmp <- 
  us_retail_employment %>%
  model(stl = STL(Employed)) %>%
  components()
stl_dcmp %>% autoplot()
ts_data <- ts_data %>%
  filter(year(Month) >= 1990, Title == "Retail Trade") %>%
  select(-Series_ID)

classical_dec <- ts_data %>%
  

  model(
    clas_deic = classical_decomposition(value, type = "additive")
  ) %>%
  
  
  components()

select(classical_dec, Month, value, trend, seasonal, random)
```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

FEEDBACK: code does not run although it is "somewhat" correct if only your variable existed...

```{r}
stl_dcmp <- 
  log_ts_data %>% 
    model(
      stl = STL(value)
    ) %>% 
  components()


class_dcmp <- 
  log_ts_data %>% 
  model(
    classical = classical_decomposition(value)
  ) %>% 
  components()


```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

FEEDBACK: makes no sense. Pay more attention in class and do the exercises

```{r}
# Load the required libraries
library(fable)
library(tsibble)

# Convert "ym" to a Date object if it's not already
ts_data$ym <- as.Date(ts_data$ym)

ts_data_tsibble <- as_tsibble(ts_data, index = ym)

ts_data_tsibble <- fill_gaps(ts_data_tsibble)

stl_dcmp <- ts_data_tsibble %>%
  model(
    STL(value ~ trend(window = 5) + season(window = 5), robust = TRUE)
  ) %>%
  fit() %>%
  components()

# Perform a classical decomposition and store the components in class_dcmp
class_dcmp <- ts_data_tsibble %>%
  model(
    classical = classical_decomposition(value, type = "additive")
  ) %>%
  fit() %>%
  components()

# Create time plots for the seasonal components
stl_dcmp %>% 
  autoplot(seasonal) +
  ggtitle("STL Decomposition: Seasonal Component")

class_dcmp %>% 
  autoplot(seasonal) +
  ggtitle("Classical Decomposition: Seasonal Component")

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
