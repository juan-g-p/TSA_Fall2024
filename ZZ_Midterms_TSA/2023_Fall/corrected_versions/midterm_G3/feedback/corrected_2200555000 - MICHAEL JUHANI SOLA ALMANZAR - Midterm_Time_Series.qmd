---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}

log_data = ts_data%>% mutate (value=log(value))

log_data %>% autoplot() +scale_x_yearquarter(date_breaks = "4 year",
    minor_breaks = "1 year")

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

In time series, the log transformation improves interpretability by linearizing, normalizing, and stabilizing variance.

FEEDBACK: RENDERS A MULTIPLICATIVE SCHEME ADDTITIVE. ALSO, IT DOES NOT IMPROVE INTERPRETABILITY, it maintains it.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

Needed a 2x12MA not 7Ma

```{r}
log_trend_class <- ts_data %>%
  mutate(log_trend_class = slider::slide_dbl(value, mean, .before = 3, .after = 3, .complete = TRUE))

ts_data %>%
  autoplot(value, series = "Log Transformed Series") +
  autolayer(log_trend_class, series = "Moving Average", alpha = 0.7) +
  labs(title = "Log-Transformed Series Moving Average")
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}
ts_data <- ts_data %>%
  mutate(log_trend_class = slider::slide_dbl(log(value), mean, .before = 3, .after = 3, .complete = TRUE))

ts_data <- ts_data %>%
  mutate(log_detrended = log(value) - log_trend_class)

ts_data %>%
  autoplot(log_detrended, series = "Log Detrended Series") +
  labs(title = "Log Detrended Series")
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data1 <- na.omit(ts_data)

acf(ts_data1$value, lag.max = 50)

acf(ts_data1$log_detrended, lag.max = 50)

```

------------------------------------------------------------------------

Log-Transformed ACF: Seasonal patterns are less bouncy, and short-term connections are stronger. It's like making a rollercoaster ride smoother and faster. Log-Detrended ACF: Long-term trends and seasonality are removed, making it easier to see short-term connections.

FEEDBACK: WHAT KIND OF EXPLANATION IS THIS? ROLLERCOAESTER? DID YOU COPY DIRECTLY WHAT CHATGPT WAS SATING OR WHAT?

See sessions to understand this.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}

stl_dcmp <- ts_data %>%
 model(stl = STL(value)) %>%
 components()
stl_dcmp %>% autoplot()
class_dcmp <- ts_data %>%
model( classical = classical_decomposition(value))
classical_comps <- class_dcmp %>%
 components()
classical_comps %>% autoplot()

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_seasonal_plot <- stl_dcmp %>%
  autoplot(seasonal) +
  labs(title = "Seasonal Component of stl_dcmp")

classSeasonalPlot <- class_dcmp %>%
  autoplot(seasonal) +
  labs(title = "Seasonal Component of class_dcmp")

(This does not run but I tried my best to do it I dont know any other way to run it)
# FEEDBACK: 
you need to pay more attention in class, practice more and study more. It was faitly really easy and consisted only on created a time.plot, which we had done 10 times in class.


```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

There are differences in the amplitude, timing, regularity, anomalies, general shape, and seasonal frequency of the seasonal components in stl_dcmp and class_dcmp.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK: NOT COMPARING WHAT YOU NEED TO COMPARE

```{r}
class_dcmp <- ts_data %>%
  model(classical = classical_decomposition(value))
classical_comps <- class_dcmp %>%
  components()
class_trend <- classical_comps$trend
trendMatch <- all(log_trend_class, class_trend) %>% as.logical()

(I know we did not use all but I have used this in programming before that is why I tried it but it still did not run I did not have time but I tried my best to compare it)

```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
library(dplyr)

ts_quarterly <- ts_data %>%
  mutate(year_quarter = yearmonth(time)) %>% 
  group_by(year_quarter) %>%
  slice_tail(n = 1) %>% 
  ungroup() %>%
  ts(start = c(1983, 1), frequency = 4) 

(i tried did not work)

```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
