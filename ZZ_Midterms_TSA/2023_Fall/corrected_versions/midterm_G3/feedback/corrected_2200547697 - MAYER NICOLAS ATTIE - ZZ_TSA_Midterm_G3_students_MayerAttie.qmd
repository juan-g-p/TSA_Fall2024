---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data %>%
  autoplot() +
  scale_x_yearmonth(breaks = "4 year", 
                    minor_breaks = "1 years")

ts_data <-
  ts_data%>% mutate(value=log(value))

ts_data %>% 
  autoplot() +
  scale_x_yearmonth(breaks = "4 year", 
                    minor_breaks = "1 years")



```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation is used for multiplicative schemes and we use it to transform it into an additive scheme like.

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

```{r}
ts_data <-
  ts_data %>%
  
  # Generate the moving average
  mutate(  
    `12-MA` = slider::slide_dbl(value, mean,
                .before = 5, .after = 6, .complete = TRUE),
    
    # Subsequent two MA to make the overall window balanced
    log_trend_class = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
  )




ts_data %>% 
  autoplot(log_trend_class)

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}

ts_data <- 
  
  ts_data %>% 
  
  # Compute new column containing the detrended component
  mutate(
    detrended = value - log_trend_class
  )

# Depict the result:
ts_data %>% 
  autoplot(detrended)

```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}
ts_data %>% 
  ACF(detrended) %>%  autoplot()

ts_data %>% 
  ACF() %>%  autoplot()


```

------------------------------------------------------------------------

1.  The ACF plot for the detrended series, reveals that the remainder is not white noise like. There is a lot of autocorrelation, meaning a lot of structure/information has not been captured by neither the trend nor the seasonal component and has leaked to the remainder component, something undesirable, since we want this coponent to be as random (white-noise like) as possible.
2.  And regarding the ACF of the log transformed time series, we can notice much more autocorrelation and a significant trend in the data

FEEDBACK: the detrended data contains both the seasoanl and remainder component, so the difference is that in the detrended series you can spot the seasonal period of 12 very clearly, while in the original data you cant

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

FEEDBACK: code does not run. Do it again until you get it right. Exercise solved in class.

```{r}
# YOUR CODE GOES HERE
# DO NOT CREATE ADDITIONAL CODE SNIPPETS

stl_dcmp <- ts_data %>%
  model(stl = STL(value))
components(stl_dcmp)

components(v) %>%
  as_tsibble() %>%
  autoplot(value, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00")
  
# have a look of the components
components(dcmp) %>% autoplot()

class_dcmp <- 
  ts_data %>% 
  model(
    dcmp = classical_decomposition(value, type = "additive")
  ) %>% 
  
  components()

class_dcmp

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.


```{r}
stl_dcmp <- ts_data %>%
  model(stl = STL(value))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(season_year, colour="gray") +
  geom_line(aes(y=season_year), colour = "#D55E00")


class_dcmp %>% 
  autoplot(seasonal)



```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

They are equal.

FEEDBACK: NO THEY ARE NOT

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK: CODE DOES NOT RUN, BUT YOU COMPUTED THE TREND CORRECTLY AND USED ALL EQUAL OK

YOU CLEARLY OD NOT UNDERSTAND HOW TO USE THE FUNCTION COMPONENTS. STUDY THIS.

```{r}
stl_dcmp <- ts_data %>%
  model(stl = STL(value))
components(dcmp)

components(dcmp) %>%
  as_tsibble() %>%
  autoplot(trend, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00")

class_dcmp %>% 
  autoplot(trend)

all.equal(class_dcmp$trend, stl_dcmp$trend)
#TRUE
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
