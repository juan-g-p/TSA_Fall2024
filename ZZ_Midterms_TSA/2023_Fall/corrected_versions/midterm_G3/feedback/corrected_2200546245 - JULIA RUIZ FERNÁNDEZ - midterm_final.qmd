---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
# a plot of the original time series `value`
ts_data %>% autoplot(value) + scale_x_yearmonth(date_breaks="4 years",minor_breaks="1 year")+
    theme(axis.text.x = element_text(angle = 90))

#a plot of the log-transformed time series
logarithmic <- mutate(ts_data, sqrt_cost = sqrt(value), 
              cbrt_cost = value^(1/3), 
              log_cost = log(value), 
              inv_cost = -1/value)
logarithmic

#make a plot in form of an STL decomposition
log_transformation <- logarithmic %>%
  model(stl = STL(log_cost))
components(log_transformation) %>% autoplot()

#the plot showing the patterns
my_plot<-components(log_transformation) %>%
  as_tsibble() %>%
  autoplot(log_cost, colour="gray") +
  geom_line(aes(y=trend), colour = "#D55E00")
my_plot

```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

The log transformation is a way to transform a multiplicative scheme into more addition type. It is one of the most powerful techniques to do this, after the inverse. It makes the size of the pattern not affected because of the trend.Therefore, the magnitude of the seasonal pattern observed remains similar regardless of the trend.

FEEDBACK: you just had to create a time plot. The graph is not what I asked for

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column within `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

feedback: require 2x12 MA

```{r}
log_trend_class <- 
  
  logarithmic %>% mutate(`7-MA` = slider::slide_dbl(log_cost, mean, .before = 3, .after = 3, .complete = TRUE) ) %>% select(ym, value, log_cost,`7-MA`)
log_trend_class


log_trend_class %>%
  autoplot(log_cost, colour = "gray") +
  geom_line(aes(y = `7-MA`), colour = "#D55E00") +
  labs(y = "Persons (thousands)",
       title = "Total employment in US retail")

```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

FEEDBACK: you have not applied log transformations, but ok, I will consider it

```{r}
#we have to create a model so that we have the trend variable.
classical_decomp <- ts_data %>% model(dcmp=classical_decomposition(value, type="additive")) %>% components()
classical_decomp2<-classical_decomp %>% mutate(log_detrended = value - trend)  %>% select(log_detrended, ym,value)
classical_decomp2
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}

classical_decomp2 %>% ACF(log_detrended) %>% autoplot() 
logarithmic %>% ACF(log_cost) %>% autoplot()

```

------------------------------------------------------------------------

In the first ACF plot, we can see that the pattern is stronger than the trend. We have a very high autocorrelation at lag 12, indicating that we have yearly patterns. (m=12 months). In yearly data we do not have seasonality. In the second one, the residuals seem to be very correlated with each other. The trend looks much stronger than the seasonal or circle patterns.

FEEDBACK: asessment makes no sense. There are no residuals here.

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

FEEDBACK: you are just copying code. Why do you have so much code here. Part of the code does what is required. The rest is nonsense. Please, UNDERSTAND and stop COPY PASTING.

```{r}
ts_data %>% autoplot()
#to see if it is additive or multiplicative and it is additive.

#STL
#create the model
stl_dcmp <- ts_data %>% model(stl=STL(value)) %>% components()
stl_dcmp
#do the decomposition
ts_data %>%
  model(
    STL(value ~ trend(window = 21) + 
                   season(window = 13), 
        robust = TRUE)) %>%
  components() %>%
  autoplot()

#CLASSICAL
class_dcmp <- ts_data %>% model(classical = classical_decomposition(value, type="additive")) %>% components() 
class_dcmp %>% autoplot()

manual_decomposition <- class_dcmp %>%
  mutate(
    #yearmonth value therefore m=12 EVEN we have to divide it to each side 
    `12-MA` = slider::slide_dbl(value, mean,
                .before = 5, .after = 6, .complete = TRUE),
    `2x12-MA` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
    
  )

#detrend the time series
manual_decomposition <- 
  manual_decomposition %>%
  mutate(
      detrended = value - `2x12-MA`,   #if it was a multiplicative scheme the only change in this decomp. would be value/`2x12-MA`
    )
manual_decomposition %>% autoplot(detrended)

#compute the seasonal component
manual_decomposition <- manual_decomposition %>% mutate(n_month = month(ym))
manual_decomposition

df_seasonal <- manual_decomposition %>% as_tibble() %>% group_by(n_month) %>%
  summarise(s_unadj = mean(detrended, na.rm = TRUE)) %>%
  ungroup() %>% 
  as_tsibble(index = n_month)

df_seasonal

#PLOT:
df_seasonal %>% autoplot(s_unadj) + scale_x_continuous(breaks = seq(1, 12), minor_breaks = seq(1, 12)) +
  geom_point(color = "red")

#adjust the seasonal component
a = sum(df_seasonal$s_unadj)
a
#not 0 so we have to do this:
df_seasonal <- 
  df_seasonal %>%
  mutate(
        seasonal_c = s_unadj  - a/12
    ) %>% select(n_month, seasonal_c)
sum(df_seasonal$seasonal_c)
#now, it is nearly 0.

manual_decomposition <- 
  left_join(manual_decomposition, df_seasonal, by = "n_month")

manual_decomposition

#compute the remainder
manual_decomposition <- 
  manual_decomposition %>%
  mutate(
        remainder = detrended - seasonal_c
      )

manual_decomposition %>% select(ym,seasonal_c,season_adjust,remainder)

#test for the

```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

```{r}
stl_dcmp %>% autoplot()
class_dcmp %>% autoplot()
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

We can see that the classical decomposition fits better since more variance is being captured by the trend and the seasonal and not so much variance falls into the random/remainder. In the seasonal decomposition, the season has bigger crests and has a bigger variance bar line.

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

FEEDBACK: good procedure, bad result

```{r}
log_trend_class
class_dcmp %>% select(tren3
all.equal(class_dcmp$trend,log_trend_class$`7-MA`,na.rn=TRUE)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
