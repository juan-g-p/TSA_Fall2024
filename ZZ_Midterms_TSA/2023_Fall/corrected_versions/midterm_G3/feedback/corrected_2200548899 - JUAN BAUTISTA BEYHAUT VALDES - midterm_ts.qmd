---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
ts_data_log <- mutate(ts_data, log_value = log(value))
ts_data_log

ts_data_log %>% 
  
  autoplot(value) +
  
  scale_x_yearmonth(
    breaks = "1 year",
    minor_breaks = "4 years"
  )


ts_data_log %>% 
  
  autoplot(log_value) +
  
  scale_x_yearmonth(
    breaks = "1 year",
    minor_breaks = "4 years"
  )
```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

Turn a multiplicative Time series into more additive-ike

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FEEDBACK: YOU DID A 3-MA MA AND NEEDED A 2X12-MA

```{r}

ts_data_log <- 
  
  ts_data_log %>%
  
  mutate(
    
    #The slider function applies a function to "sliding" time windows.
    #In this case it is a 7-MA because we are moving from j=-3 (before = 3) 
    # to j=+3 (after = 3).
    log_trend_class = slider::slide_dbl(log_value, mean,
                               
                #.complete = TRUE -> function evaluated only on full windows
                # This means that the MA will not be computed for the first
                # and last three points of the time series
                .before = 1, .after = 1, .complete = TRUE)
  ) 

ts_data_log


ts_data_log %>%
  autoplot(value) +
  
  geom_line(aes(y = log_trend_class), colour = "#D55E00")
```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

```{r}

ts_data_log <- 
  
  ts_data_log %>% 
mutate(
    log_detrended = log_value - log_trend_class
  )

ts_data
```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}

ts_data_log %>% 
  ACF(log_value) %>% 
  autoplot()

ts_data_log %>% 
  ACF(log_detrended) %>% 
  autoplot()
```

------------------------------------------------------------------------

**Both ACF show autocorrelation since lags go beyond line intervals. In conclusion, both show autocorrelation.**

feedback: in the detrended you culd spot seasonality if your detrending were right

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

```{r}

stl_dcmp <- 
  ts_data_log %>%
  model(stl = STL(log_value)) %>%
  components()



class_dcmp <- ts_data_log %>%
  # Fit model
  model(
    classical = classical_decomposition(log_value, type = "additive") )%>% components()
    


```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

FEEDBACK: CODE DOES NOT RUN

```{r}
class_dcmp_plot <- 
  class_dcmp %>% 
  components() %>% 
  autoplot()

stl_dcmp_plot <- 
  stl_dcmp %>% 
  autoplot()

```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

Both seasonal components are almost identical.

STL:\
variance of the remainder is lower except for the initial datapoints.\
CLASSICAL:\
Variance is greater than that in STL\
Conclusion: STL is better

FEEDBACK: ONE IS CONSTANTT AND ONE IS NOT CONSTANT

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

feedback: good command for comparison, MA comuted wrong

```{r}
all.equal(round(ts_data_log$log_trend_class, 3), class_dcmp$trend)
```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
# Where can we find dplyr::last() in the study material? I am not sure its is there.
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```


FEEDBACK:

1. You were late for the exam
2. You did not know how to approximate the trend with MAs, which was done in the group assignment
3. Study more and practice more, this wont cut it for the final. Do the exercises in class.