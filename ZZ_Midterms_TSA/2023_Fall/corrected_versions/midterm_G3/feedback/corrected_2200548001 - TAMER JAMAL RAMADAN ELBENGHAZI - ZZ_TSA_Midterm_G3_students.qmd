---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(fpp3)
```

# 0. Import Data

Run the code below. A pop-up window will appear. Select the file `ts_data.csv` provided along with the exam

```{r}
ts_data <- 
  read.csv(file.choose()) %>% 
    mutate(
      ym = yearmonth(start_timestamp)
    ) %>% 
    as_tsibble(index = ym) %>% 
    select(ym, value)

ts_data
```

# 1. (2.5 points)

Create two plots: a plot of the original time series `value` and a plot of the log-transformed time series.

They should have major breaks every year and minor breaks every four years.

Then answer the question.

```{r}
library(ggplot2)


ts_data$ym <- as.Date(ts_data$ym)

library(ggplot2)


original_plot <- ggplot(ts_data, aes(x = ym, y = value)) +
  geom_line() +
  scale_x_date(date_labels = "%Y", date_breaks = "4 years") +
  labs(title = "Original Time Series", x = "Year and Month", y = "Value")

log_plot <- ggplot(ts_data, aes(x = ym, y = log(value))) +
  geom_line() +
  scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
  labs(title = "Log-Transformed Time Series", x = "Year and Month", y = "Log(Value)")

print(original_plot)
print(log_plot)







```

------------------------------------------------------------------------

QUESTION: What does the log transformation attain?

Log transformation is used to stabilize variance ,normalize data and just make it more understandable.

It is used to turnr a multiplicative scheme into an additive scheme (fb)

------------------------------------------------------------------------

# 2. (3 points)

## 2.1

Create new column wihin `ts_data` with a moving average of the log-transformed time series. Use the same moving average as classical decomposition would.

Call that moving average `log_trend_class`.

Then create a new time-plot of the log transformed series with `log_trend_class` superimposed.

FB: code not used in class and incorrect window for moving average.

```{r}

library(dplyr)
library(zoo)

window_size <- 12
ts_data <- ts_data %>%
  mutate(log_trend_class = rollmean(log(value), k = window_size, fill = NA))

head(ts_data)




library(ggplot2)

log_trend_plot <- ggplot(ts_data, aes(x = ym)) +
  geom_line(aes(y = log(value)), color = "blue", size = 1, linetype = "solid", alpha = 0.7) +
  geom_line(aes(y = log_trend_class), color = "red", size = 1, linetype = "solid")
  labs(title = "Log Transformed Time Series",
       x = "Year and Month", y = "Log Value")

print(log_trend_plot)


```

## 2.2 Using the previously computed moving average, detrend the log-transformed variable.

Store the result in a new column within `ts_data` called `log_detrended`

Then create a timeplot of the `log_detrended`

fb: code does not run and you do not do anything

```{r}




library(ggplot2)

log_detrend_plot <- ggplot(ts_data, aes(x = ym, y = log_detrended)) +
  geom_line(color = "blue") +
  labs(title = "Log Detrended Time Series", x = "Year and Month", y = "Log Detrended Value")

print(log_detrend_plot)






```

## 2.3 Compute the ACF plot of log-transformed time series and of `log_detrended`

Compare both ACF pots (max 50 words) and explain how they differ and why.

```{r}






```

------------------------------------------------------------------------

**YOUR ANSWER GOES HERE** (50 words MAX)

------------------------------------------------------------------------

# 3. (3 points)

## 3.1 Perform an STL decomposition and a classical decomposition (using `classical_decomposition()`)

-   store the components of the STL decomposition in `stl_dcmp`
-   store the components of the classical decomposition in `class_dcmp`

fb: code does not run since you never computed log_detrended

```{r}
# STL Decomposition
stl_dcmp <- log_detrended %>%
  model(
    stl = STL(log_detrended)
  ) %>%
  components()

# Classical Decomposition
class_dcmp <- log_detrended %>%
  model(
    classical = classical_decomposition(log_detrended)
  ) %>%
  components()


```

## 3.2

Create two time plots, one for the seasonal component of `stl_dcmp` and one of the seasonal component of `class_dcmp`.

Then explain how they differ.

FB: code does not run and you clearly copied this since it makes no sensem making such a complex code for this and we never did this in class.

```{r}
library(ggplot2)




stl_seasonal_plot <- ggplot(stl_dcmp, aes(x = ym, y = seasonal)) +
  geom_line(color = "blue", size = 1) +
  scale_x_yearminor(breaks = seq(min(stl_dcmp$ym), max(stl_dcmp$ym), by = 1)) +
  scale_x_year(breaks = seq(min(stl_dcmp$ym), max(stl_dcmp$ym), by = 4)) +
  labs(title = "Seasonal Component of STL Decomposition", x = "Year and Month", y = "Seasonal Component")



print(stl_seasonal_plot)
```

------------------------------------------------------------------------

QUESTION: How do both seasonal components differ?

**YOUR ANSWER GOES HERE (20 WORDS)**

------------------------------------------------------------------------

## 3.3 Compare the `trend_class` you previously computed with the trend returned by classical decomposition. Do they match? (answer this question with a single boolean TRUE or FALSE)

```{r}


```

# 4. (1.5 points)

Time series data wrangling

# 4.1 Using:

-   `dplyr::last()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the last value of every quarter.

You may use `?dplyr::last()` on the console to get information about how to use last.

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

## 4.2 Using the functions:

-   `dplyr::last()`
-   `dplyr::first()`

create a new time series called `ts_quarterly` that is indexed in a quarterly manner and contains the mean of the first and last value of every quarter.

You may use `?dplyr:first()` and `?dplyr::last()` on the console to get information about how to use last and first

```{r}
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
```
