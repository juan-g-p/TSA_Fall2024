---
title: "ZZ_TSA_G1_2023Fall_Midterm"
editor: source
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

## INSTRUCTIONS

1. Do not add additional code snippets. You may add more to play around, but in the end only the code snippets created within the exam shall be delivered.
2. Stick to the word count when providing written answers. Be as clear and brief as possible.

## 0. Load libraries

If you do not load the libraries, subsequent code to load the dataframe will not work.

```{r}
library(fpp3)
library(readr)
```

## 1. Import the .csv data and format it as a tsibble (**0 points**)

The file is in the datasets folder: **spain_unemployment_format.csv**

Run the code below and a pop-up window will appear prompting you to select the file.

```{r, eval=FALSE}
unemp <- readr::read_csv(file.choose())

# Convert column "date" to a yearmonth object
unemp <- unemp %>% 
      mutate(date = yearmonth(date)) %>% 
      as_tsibble()

unemp
```

## 2. Graphical analysis (3 points)

### 2.1 Generate a timeplot of the data, adjusting its grid adequately to signal at least the end of every year.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
unemp%>% 
  
  autoplot() +
  
  scale_x_yearmonth(
    breaks = "1 years",
    minor_breaks = "1 year"
  )

# DO NOT ADD ADDITIONAL CODE SNIPPETS
```

### 2.2 Approximate the trend of the graph using an appropriate moving average. Then depict the timeplot again, with both the original time series and the resulting estimate of the trend. Adjust the x-grid so that the end of every year is clear.

Requirements:

1. **Compute the moving average as a classical decomposition would**.
2. Store the result in a new variable (column) within `unemp` called `trend_class`.
3. Plot the time series in one color and the trend in another color.

FEEDBACK: THIS IS NOT WHAT WAS ASKED FOR. SEE SOLUTION

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE
trend_class<- unemp%>% model(classical= classical_decomposition(unemp)) %>% components()

autoplot(trend_class, color ="red")
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
```

### 2.3 Remove `trend_class` from the time series, that is, compute the **detrended time series**. Store it in a new variable (column) within `unemp` called `detrended_class`

**NOTE**: if you failed to compute the trend component in the previous question, you may compute the classical decomposition using `classical_decomposition()` and use the trend resulting from it to detrend the time series.

Requirements:

1. Store the result in a new variable (column) called `detrended_class` within `unemp`
2. Depict the detrended component on a time-plot with a grid that signals the end of every year.

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE0
detrended_class <- unemp %>% model(classical= classical_decomposition(unemp)) %>% components()
detrended_class%>%autoplot()
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
```

FEEDBACK: this is not what was asked for. See solution

### 2.4 Compute the ACF plots indicated below. Also answer the question below:

1. ACF plot of the original time series
2. ACF plot of the detrended time series

Q1: WHICH IS THE LENGTH OF THE SEASONAL PERIOD AND WHERE DO YOU SEE IT?

FEEDBACK: YOU ARE DEPICTING THE ACF OF ONLY ONE TS AND PROVIDING THE WRONG INTERPRETATION.

FEEDBACK: I tould you to learn these patterns by heart.

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE
unemp %>% ACF() %>% autoplot()
detrended_class %>% ACF()%>% autoplot()
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
```

------

looking at the lags we can determine the length of seasonality and it seems to be constant the lag is 1 M so it's 1 month   


------

# 3. STL Decomposition (**2.5 points**)

Perform an STL decomposition. Specifically, create two stl decompositions:

1. STL decomposition with default arguments. Name the dataframe containing the components `stl_default`.
2. STL decomposition with adjusted parameters. Adjust the parameters you deem necessary to improve the decomposition and name the dataframe containing the components `stl_adjust`.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
stl_defaults <- unemp %>%
    model(
      STL(unemp)
      ) %>%
    components()

autoplot(stl_defaults)

stl_adjust <- unemp %>%
  model(
    STL(unemp ~ trend(window = 5) + season(window = 5))
    ) %>%
  components()

autoplot(stl_adjust)

# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
```

# 4. Fitting two models (**3 points**)

## 4.1 Fitting the models

Fit the models below to the variable `unemp` (that is, to the original time series):

1. `decomposition_model()` using the **drift model** for the *seasonally adjusted series* and **seasonal naïve model** for the *seasonal component*. Call this model `dcmp_drift`.
  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
2. `decomposition_model()` using a **simple exponential smoothing** model for the *seasonally adjusted series* and a **seasonal naïve model** for the *seasonal component*. Call this model `dcmp_stl`.
  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
  
Store the result of fitting the models in a variable called `fit`

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE


fit <-
  # sp_arrivals %>% # FEEDBACK: DATASET COPIED FROM OTHER CODE AND NOT CORRECTED...
  unemp %>% # FEEDBACK: INCLUDED BY ME
  model(
    snaive = SNAIVE(unemp),
    ses = ETS(unemp ~ error("A") + trend ("N") + season("N")),
    drift = RW(unemp ~ drift()),
     dcmp_drift = decomposition_model(
                  STL(unemp ~ trend(window=5) + season(window=5)),
                  ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
                  SNAIVE(season_year)
                ),
    dcmp_stl = decomposition_model(
                  STL(unemp ~ trend(window=5) + season(window=5)),
                  RW(season_adjust ~ drift()),
                  SNAIVE(season_year)
                )
  )

fit
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
```

## 4.2 Performing forecasts

Perform 12 step ahead forecasts (1 year) using both models. Store the results in a variable called `fc`.

Then depict the forecasts along with the original time series and the corresponding confidence intervals. Create one figure per model.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE

fc <- fit %>% forecast(h = 12)
fc
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
```

FEEDBACK: NO GRAPHS

# 4.3 Analyze the residuals of the `dcmp_drift` model.

Analyze **only normality and heteroskedasticity of the residuals** of the model.

**NOTE**: since you have two models in `fit`, to use the `gg_tsresiduals()` command you need to select only one of them first. If you have named them as I indicated, the following code should do the trick. Add additional graphs and tests you deem necessary.

```{r, eval=FALSE}
fit %>% 
  select(dcmp_drift) %>% # Select only dcmp_drift
  gg_tsresiduals()
```

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE




# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
```

------

**YOUR ANSWER GOES HERE. MAX 60 WORDS.**

FEEDBACK: NO INTERPRETATION AND ONLY VERY BASIC GRAPHS... WHERE IS THE QQPLOT
AND THE BOX-PLOT?

------

# 5. STL decomposition comparison (**1.5 points**)

This points builds on the result of point 3. Consider the two decompositions `stl_default` and `stl_adjust` fitted in point 3.

1. Plot the ACF of the remainder of both decompositions.
2. Compute a single number that measures the amount of autocorrelation left in the remainder of each decomposition.

  * For `stl_default` call this single number `corr_metric_default`
  * For `stl_adjust` call this single number `corr_metric_adjust`
  * Check that `corr_metric_adjust` < `corr_metric_default`.
  * Compute `corr_metric_default / corr_metric_adjust`. Give a short interpretation of the result

FEEDBACK: YOU ARE NOT DEPICTING THE ACF OF THE REMAINDER, BUT OF THE ORIGINAL TIME SERIES

FEEDBACK SEE SOLUTION.

```{r, input=!params$print_sol}
## YOUR CODE GOES HERE

stl_defaults %>% ACF(lag_max=36)%>% autoplot()
stl_adjust %>% ACF()%>% autoplot()



## DO NOT ADD ADDITIONAL CODE SNIPPETS
```

------

**YOUR INTERPRETATION GOES HERE. MAX 20 WORDS.**
no there is an autocorrelation in the remainder therefore the decomposition is improvable 
------