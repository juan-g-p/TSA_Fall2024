---
title: "ZZ_TSA_G1_2023Fall_Midterm"
editor: source
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

## INSTRUCTIONS

1. Do not add additional code snippets. You may add more to play around, but in the end only the code snippets created within the exam shall be delivered.
2. Stick to the word count when providing written answers. Be as clear and brief as possible.

## 0. Load libraries

If you do not load the libraries, subsequent code to load the dataframe will not work.

```{r}
library(fpp3)
library(readr)
```

## 1. Import the .csv data and format it as a tsibble (**0 points**)

The file is in the datasets folder: **spain_unemployment_format.csv**

Run the code below and a pop-up window will appear prompting you to select the file.

```{r, eval=FALSE}
unemp <- readr::read_csv(file.choose())

# Convert column "date" to a yearmonth object
unemp <- unemp %>% 
      mutate(date = yearmonth(date)) %>% 
      as_tsibble()

unemp
```

## 2. Graphical analysis (3 points)

### 2.1 Generate a timeplot of the data, adjusting its grid adequately to signal at least the end of every year.

```{r, include=!params$print_sol}
unemp %>% head(5)
unemp %>%
  
  autoplot() +
  scale_x_yearmonth(breaks = "1 year",
                      minor_breaks = "1 year") +
  
  # Flip x-labels by 90 degrees
  theme(axis.text.x = element_text(angle = 90))

```

### 2.2 Approximate the trend of the graph using an appropriate moving average. Then depict the timeplot again, with both the original time series and the resulting estimate of the trend. Adjust the x-grid so that the end of every year is clear.

Requirements:

1. **Compute the moving average as a classical decomposition would**.
2. Store the result in a new variable (column) within `unemp` called `trend_class`.
3. Plot the time series in one color and the trend in another color.

FEEDBACK: THIS IS CONCEPTUALLY WRONG. YOU NEEDED TO COMPUTE A 2X12 MA NOT A 7-MA

```{r, include=!params$print_sol}

trend_class <- 
  
  unemp %>%
  
  
  
  # Generate the moving average
  mutate(
    
    #The slider function applies a function to "sliding" time windows.
    #In this case it is a 7-MA because we are moving from j=-3 (before = 3) 
    # to j=+3 (after = 3).
    `7-MA` = slider::slide_dbl(unemp, mean,
                               
                #.complete = TRUE -> function evaluated only on full windows
                # This means that the MA will not be computed for the first
                # and last three points of the time series
                .before = 3, .after = 3, .complete = TRUE)
  ) %>% 
  
  select(unemp,`7-MA`)

trend_class



trend_class %>%
  autoplot(unemp) +
  
  geom_line(aes(y = `7-MA`), colour = "#D55E00") +
  
  labs(y = "number of unemp",
       title = "Total unemp")



```

### 2.3 Remove `trend_class` from the time series, that is, compute the **detrended time series**. Store it in a new variable (column) within `unemp` called `detrended_class`

**NOTE**: if you failed to compute the trend component in the previous question, you may compute the classical decomposition using `classical_decomposition()` and use the trend resulting from it to detrend the time series.

Requirements:

1. Store the result in a new variable (column) called `detrended_class` within `unemp`
2. Depict the detrended component on a time-plot with a grid that signals the end of every year.

FEEDBACK: CODE DOES NOT RUN

```{r, include=!params$print_sol}
detrended_class <-
  unemp %>%
  
```

### 2.4 Compute the ACF plots indicated below. Also answer the question below:

1. ACF plot of the original time series
2. ACF plot of the detrended time series

Q1: WHICH IS THE LENGTH OF THE SEASONAL PERIOD AND WHERE DO YOU SEE IT?

```{r, include=!params$print_sol}
#1 
unemp %>%
  ACF(lag_max = 24*8) %>%
  autoplot()

#2
#detrend -----------
#would be the code


detrended_class %>%
  ACF(lag_max = 24*4) %>%
  autoplot()
```

------

**YOUR ANSWER TO BOTH Q1 30 WORDS MAX**

in the original dataset there is seasonality it can be seen because the acf plot is linearly decreasing the whole time. half way the acf start rising again which means it less random.

FEEDBACK: THIS MAKES NO SENSE.

I TOLD YOU TO LEARN TWO PATTERNS BY HEART IN CLASS IN THE SESSION ON THE ACF. SEE THE SOLUTION


------

# 3. STL Decomposition (**2.5 points**)

Perform an STL decomposition. Specifically, create two stl decompositions:

1. STL decomposition with default arguments. Name the dataframe containing the components `stl_default`.
2. STL decomposition with adjusted parameters. Adjust the parameters you deem necessary to improve the decomposition and name the dataframe containing the components `stl_adjust`.

```{r, include=!params$print_sol}
stl_default <- unemp %>%
  model(stl = STL(unemp))
components(stl_default)


STL_adjust <- 
  unemp %>% 
    model(
      stl = STL(unemp ~ trend(window=5) + season(window=5))
    ) %>% 
  components()

STL_adjust %>% autoplot()
  
```

# 4. Fitting two models (**3 points**)

## 4.1 Fitting the models

Fit the models below to the variable `unemp` (that is, to the original time series):

1. `decomposition_model()` using the **drift model** for the *seasonally adjusted series* 
and **seasonal naïve model** for the *seasonal component*. Call this model 

`dcmp_drift`.  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
  
  
2. `decomposition_model()` using a **simple exponential smoothing** model for the *seasonally adjusted series* and a **seasonal naïve model** for the *seasonal component*. Call this model `dcmp_stl`.
  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
  
Store the result of fitting the models in a variable called `fit`

FEEDBACK: YOU ONLY FITTED ONE OF THE MODELS

```{r, include=!params$print_sol}
fit <- unemp %>% 
  model(
    dcmp_drift = decomposition_model(
                # Specify the decomposition scheme to be used.
                STL(unemp),
                # Specify a model for the seasonally adjusted component (in this case, a drift).
                RW(season_adjust ~ drift()),
                # Specify a model for the seasonal component (unnecesary, since SNAIVE is the default).
                SNAIVE(date)
            )
  )

fit

  
```

## 4.2 Performing forecasts

Perform 12 step ahead forecasts (1 year) using both models. Store the results in a variable called `fc`.

Then depict the forecasts along with the original time series and the corresponding confidence intervals. Create one figure per model.

CODE DOES NOT RUN

```{r, include=!params$print_sol}
#1  this would be the code
# fc <- dcmp_drift %>% forecast(h = 12)
# autoplot(fc)

# THE CODE YOU NEEDED, FEEDBACK
fit %>% select(dcmp_drift) %>% forecast(h=12) %>% autoplot(unemp)

fc %>%
  autoplot(unemp, level = FALSE) +
  autolayer(dcmp_drift, .fitted, colour = "blue", linetype = "dashed")



```

# 4.3 Analyze the residuals of the `dcmp_drift` model.

Analyze **only normality and heteroskedasticity of the residuals** of the model.

**NOTE**: since you have two models in `fit`, to use the `gg_tsresiduals()` command you need to select only one of them first. If you have named them as I indicated, the following code should do the trick. Add additional graphs and tests you deem necessary.

```{r, eval=FALSE}
#this should be the code
fit %>% 
  select(dcmp_drift) %>% 0
  gg_tsresiduals()
```

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
```

------

**YOUR ANSWER GOES HERE. MAX 60 WORDS.**

------

# 5. STL decomposition comparison (**1.5 points**)

This points builds on the result of point 3. Consider the two decompositions `stl_default` and `stl_adjust` fitted in point 3.

1. Plot the ACF of the remainder of both decompositions.
2. Compute a single number that measures the amount of autocorrelation left in the remainder of each decomposition.

  * For `stl_default` call this single number `corr_metric_default`
  * For `stl_adjust` call this single number `corr_metric_adjust`
  * Check that `corr_metric_adjust` < `corr_metric_default`.
  * Compute `corr_metric_default / corr_metric_adjust`. Give a short interpretation of the result

```{r, input=!params$print_sol}

STL_adjust %>% 
  ACF(remainder) %>% 
  autoplot()

stl_default %>% 
  ACF(remainder) %>% 
  autoplot()
# doenst run but should be correct

#stl_default %>% 
#  ACF(remainder) %>% 
#  autoplot()

```

------

we can see a massive outlier which goes to -0.5 which is the 2008 financial crisis in the stl_adjust.
and also the data afterwards is out of boundaries which ndicates more outliers. but overall the data is in the boundaries


------

FEEDBACK: I DO NOT THINK I HAVE TO TELL YOU ANYTHING

YOU NEED TO PAY ATTENTION IN CLASS, STUDY AND PRACTICE.

THIS WILL NOT CUT IT TO PASS THE SUBJECT.

THE FINAL HAS MUCH MORE CONTENT AND IS MUCH MORE DIFFICULT.

BEST