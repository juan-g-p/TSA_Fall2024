---
title: "ZZ_TSA_G1_2023Fall_Midterm"
editor: source
params:
  print_sol: false
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

## INSTRUCTIONS

1. Do not add additional code snippets. You may add more to play around, but in the end only the code snippets created within the exam shall be delivered.
2. Stick to the word count when providing written answers. Be as clear and brief as possible.

## 0. Load libraries

If you do not load the libraries, subsequent code to load the dataframe will not work.

VERY IMPORTANT FEEDBACK: JUST LOAD THE LIBRARIES YOU NEED TO AVOID CONFLICTS IN R!! PACKAGE HANDLING CAN BE A BIT TRICKIER THAN IN PYTHON.

```{r}
library(fpp3)
library(readr)

library(patchwork)
library(fma)
library(readr)
library(GGally)
```

## 1. Import the .csv data and format it as a tsibble (**0 points**)

The file is in the datasets folder: **spain_unemployment_format.csv**

Run the code below and a pop-up window will appear prompting you to select the file.

```{r, eval=FALSE}
unemp <- readr::read_csv(file.choose())

# Convert column "date" to a yearmonth object
unemp <- unemp %>% 
      mutate(date = yearmonth(date)) %>% 
      as_tsibble()

unemp
```

## 2. Graphical analysis (3 points)

### 2.1 Generate a timeplot of the data, adjusting its grid adequately to signal at least the end of every year.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
unemp %>% 
  autoplot(unemp)+
  scale_x_yearmonth(date_breaks = "12 months", 
                    minor_breaks = "12 months") +
  theme(axis.text.x = element_text(angle = 90))


```

### 2.2 Approximate the trend of the graph using an appropriate moving average. Then depict the timeplot again, with both the original time series and the resulting estimate of the trend. Adjust the x-grid so that the end of every year is clear.

Requirements:

1. **Compute the moving average as a classical decomposition would**.
2. Store the result in a new variable (column) within `unemp` called `trend_class`.
3. Plot the time series in one color and the trend in another color.

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE
#as we are dealing with yearmonth data this means that m= 12, sowe will use an even number of points in the window. 

unemp <- unemp %>%
  mutate(
    
    `12-MA` = slider::slide_dbl(unemp, mean,
                .before = 5, .after = 6, .complete = TRUE),
    `trend_class` = slider::slide_dbl(`12-MA`, mean,
                .before = 1, .after = 0, .complete = TRUE)
    
  )

# Plot the computed trend
unemp %>%
  autoplot(unemp, colour = "gray") +
  geom_line(aes(y = `trend_class`), colour = "#D55E00") +
  labs(y = "Persons (thousands)",
       title = "Total unemployment")
```

### 2.3 Remove `trend_class` from the time series, that is, compute the **detrended time series**. Store it in a new variable (column) within `unemp` called `detrended_class`

**NOTE**: if you failed to compute the trend component in the previous question, you may compute the classical decomposition using `classical_decomposition()` and use the trend resulting from it to detrend the time series.

Requirements:

1. Store the result in a new variable (column) called `detrended_class` within `unemp`
2. Depict the detrended component on a time-plot with a grid that signals the end of every year.

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE
unemp <- 
  unemp %>%
  mutate(
      detrended_class = unemp - `trend_class`,
    )
unemp %>% 
  autoplot(detrended_class) +
  scale_x_yearmonth(date_breaks = "12 months", 
                    minor_breaks = "12 months") +
  theme(axis.text.x = element_text(angle = 90))
  
```

### 2.4 Compute the ACF plots indicated below. Also answer the question below:

1. ACF plot of the original time series
2. ACF plot of the detrended time series

Q1: WHICH IS THE LENGTH OF THE SEASONAL PERIOD AND WHERE DO YOU SEE IT?

```{r, include=!params$print_sol}
## YOUR CODE GOES HERE
#1. ACF plot of the original time series
unemp %>%
  ACF(unemp) %>%
  autoplot()

#2. ACF plot of the detrended time series
unemp %>%
  ACF(detrended_class, lag_max = 30) %>%
  autoplot()

```

------

In the original time series, we can clearly see a trend but not the seasonal period. However, once we remove the trend component we can clearly see that the seasonal pattern occurs every 6 months, every 6 lags there is a peak in the ACF value. It means that every 6 lags the values are correlated with that of 6 steps of time before. 

FEEDBACK: lag 6 is negatively correlated indicating half the seasonal period. Remember the analogy made with phase opposition.

FEEDBACK: THE SEASONAL PERIOD IS 12. 6 is half the period

------

# 3. STL Decomposition (**2.5 points**)

Perform an STL decomposition. Specifically, create two stl decompositions:

1. STL decomposition with default arguments. Name the dataframe containing the components `stl_default`.
2. STL decomposition with adjusted parameters. Adjust the parameters you deem necessary to improve the decomposition and name the dataframe containing the components `stl_adjust`.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE

#1. STL decomposition with default arguments.
stl_default <- unemp %>%
  model(stl = STL(unemp)) %>%
  components()

stl_default %>% autoplot()


#2. STL decomposition with adjusted parameters.


# Reduction of the averaging windows to try to better capture the crisis at 91-92.
stl_adjust <- unemp %>%
  model(stl = STL(unemp ~ trend(window = 5) + # Manually change this value from the default 13
                season(window = 5))
    ) %>%
  components() 

stl_adjust %>% autoplot()

```

# 4. Fitting two models (**3 points**)

## 4.1 Fitting the models

Fit the models below to the variable `unemp` (that is, to the original time series):

1. `decomposition_model()` using the **drift model** for the *seasonally adjusted series* and **seasonal naïve model** for the *seasonal component*. Call this model `dcmp_drift`.
  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
2. `decomposition_model()` using a **simple exponential smoothing** model for the *seasonally adjusted series* and a **seasonal naïve model** for the *seasonal component*. Call this model `dcmp_stl`.
  * For the **stl decomposition, adjust the parameters as you did in exercise 3.**
  
Store the result of fitting the models in a variable called `fit`

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE

fit <- unemp %>% 
  model (
    dcmp_drift = decomposition_model(
                STL(unemp ~ trend(window=5) + season(window=5)),
                RW(season_adjust ~ drift()),
                SNAIVE(season_year)), 
    dcmp_stl = decomposition_model(
                STL(unemp ~ trend(window=5) + season(window=5)),
                ETS(season_adjust ~ error("A") + trend("N") + season("N")),
                SNAIVE(season_year))
    
  )
fit   
```

## 4.2 Performing forecasts

Perform 12 step ahead forecasts (1 year) using both models. Store the results in a variable called `fc`.

Then depict the forecasts along with the original time series and the corresponding confidence intervals. Create one figure per model.

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
fc <- fit %>%  forecast (h = 12)

fc %>% filter(.model == "dcmp_drift") %>%  autoplot(unemp)
fc %>% filter(.model == "dcmp_stl") %>%  autoplot(unemp)

```

# 4.3 Analyze the residuals of the `dcmp_drift` model.

Analyze **only normality and heteroskedasticity of the residuals** of the model.

**NOTE**: since you have two models in `fit`, to use the `gg_tsresiduals()` command you need to select only one of them first. If you have named them as I indicated, the following code should do the trick. Add additional graphs and tests you deem necessary.

```{r, eval=FALSE}
fit %>% 
  select(dcmp_drift) %>% # Select only dcmp_drift
  gg_tsresiduals()
```

```{r, include=!params$print_sol}
# YOUR CODE GOES HERE
model_vals <- fit %>% augment()

mean_vals <- filter(model_vals, .model=="dcmp_drift")
# Generate qq_plot
p1 <- ggplot(mean_vals, aes(sample = .innov))
p1 <- p1 + stat_qq() + stat_qq_line()

# Generate box-plot
p2 <- ggplot(data = mean_vals, aes(y = .innov)) +
      geom_boxplot(fill="light blue", alpha = 0.7) +
      stat_summary(aes(x=0), fun="mean", colour= "red") # Include the mean
p1 + p2
```

------

FEEDBACK: THE MOST IMPORTANT FEATURE IN A TS MODEL IS AUTOCORRELATION.

Regarding normality, the residuals seem to follow a fairly normal distribution by looking at the histogram, however, there are some outliers that make the shape look a bit right skewed. This conclusion can be corrobated looking at the two additional graphs: the QQ-plot shows that the quantiles are following a normal cummulative distribution except for the last part (from x = 2), and the boxplot shows that the mean is close to the median, but it is not fully symmetric due to outliers at the end. 

In terms of heteroskedasticity, we visually asses the timeplot and  observe that the variance of the residuls seem pretty constand overtime, which means it is homoskedastic. However, there is an exception around March 2020 which may be closely related to the covid-19 crisis, where unemployment rised exponentially, so it can be treated as an outlier. 

------

# 5. STL decomposition comparison (**1.5 points**)

This points builds on the result of point 3. Consider the two decompositions `stl_default` and `stl_adjust` fitted in point 3.

1. Plot the ACF of the remainder of both decompositions.
2. Compute a single number that measures the amount of autocorrelation left in the remainder of each decomposition.

  * For `stl_default` call this single number `corr_metric_default`
  * For `stl_adjust` call this single number `corr_metric_adjust`
  * Check that `corr_metric_adjust` < `corr_metric_default`.
  * Compute `corr_metric_default / corr_metric_adjust`. Give a short interpretation of the result

```{r, input=!params$print_sol}
## YOUR CODE GOES HERE

#1. Plot the ACF of the remainder of both decompositions.
stl_default %>% 
  ACF(remainder) %>% 
  autoplot()

stl_adjust %>% 
  ACF(remainder) %>% 
  autoplot()

#2. Compute a single number that measures the amount of autocorrelation left in the remainder of each decomposition.

a = stl_default %>% ACF(remainder) %>% select (acf)
b = stl_adjust %>% ACF(remainder) %>% select (acf)

corr_metric_default <- nrow(stl_default)*sum((a["acf"])^2)
corr_metric_adjust <- nrow(stl_default)*sum((b["acf"])^2)

corr_metric_adjust < corr_metric_default
corr_metric_default / corr_metric_adjust
```

  FEEDBACK: AS DISCUSSED DURNG THE EXAM AND AS YOU SHOWED DURING THE EXAM, THE LJUNT BOX STATISTIC WAS WHAT WAS LOOKED FOR.

------

**YOUR INTERPRETATION GOES HERE. MAX 20 WORDS.**

------