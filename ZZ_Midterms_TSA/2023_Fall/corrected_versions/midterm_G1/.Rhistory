n_lag = 12
lag_name = paste0("unemp_dtr_lag", n_lag)
manual_decomposition_detr %>%
ACF(detrended_class) %>%
autoplot()
stl_default = unemp %>%
model(
stl = STL(unemp)
) %>%
components()
stl_adjust = unemp %>%
model (stl = STL (unemp ~ trend(window = 5) + season(window = 5)
)) %>%
components()
fit <- unemp %>%
model(
decomp = decomposition_model(
STL(unemp ~ trend(window = 5) + season(window = 5)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)
) )
fit
fit2 =
unemp %>%
model (decomp = ETS(unemp))
#2.
fit <-
arg_exports %>%
model(
ses_exports = ETS(Exports ~ error("A") + trend("N") + season("N"))
)
fit %>%
select(dcmp_drift) %>%
gg_tsresiduals()
fit %>%
select(dcmp_drift) %>%
gg_season()
stl_default %>%
ACF(remainder) %>%
autoplot()
stl_adjust %>%
ACF(remainder) %>%
autoplot()
#2.
corr_metric_default = corr(stl_default$remainder, stl_default$unemp)
library(fpp3)
library(readr)
unemp <- readr::read_csv(file.choose())
# Convert column "date" to a yearmonth object
unemp <- unemp %>%
mutate(date = yearmonth(date)) %>%
as_tsibble()
unemp
unemp %>%
autoplot() +
scale_x_yearquarter(
date_breaks = "4 years",
minor_breaks = "1 years"+
theme(axis.text.x = element_text(angle = 90))
)
classical_dec <- unemp %>%
model(
classical = classical_decomposition(unemp, type = "additive")
)
classical_dec
classical_comps <-
classical_dec %>%
components()
components
classical_comps %>%
autoplot()
trend_class <-
unemp%>%
autoplot()
classical_dec <-
unemp%>%
model(
classical = classical_decomposition(unemp)
) %>%
components()
classical_dec %>%
autoplot()
detrended_ts <-
classical_dec %>%
mutate(
detrended = unemp - trend
)
detrended_ts %>%
autoplot(detrended)
unemp%>%
ACF()%>%
autoplot()
dcmp_classic%>%
ACF()%>%
autoplot()
stl_defaults <-
unemp %>%
model(
stl = STL(unemp)
) %>%
components()
stl_defaults %>% autoplot()
stl_adjust <-
unemp %>%
model(
stl = STL(unemp ~ trend(window=21)+ season(window=13))
) %>%
components()
stl_adjust %>% autoplot()
fit <-
unemp %>%
model(
snaive = SNAIVE(unemp),
ses = ETS(unemp ~ error("A") + trend ("N") + season("N")),
drift = RW(unemp ~ drift()),
dcmp_ses = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
SNAIVE(season_year)
),
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)
)
)
fit <-
unemp %>%
model(
stl = STL(unemp ~ trend(window=21)+ season(window=13))
) %>%
components()
seasonal <- select(unemp, unemp)
fit_snaive <- seasonal %>% model(SNaive = SNAIVE(season_year ~ lag("year")))
fit <-
unemp %>%
model(
snaive = SNAIVE(unemp),
ses = ETS(unemp ~ error("A") + trend ("N") + season("N")),
drift = RW(unemp ~ drift()),
dcmp_ses = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
SNAIVE(season_year)
),
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)
)
)
# fit <-
# unemp %>%
#   model(
#     stl = STL(unemp ~ trend(window=21)+ season(window=13))
#   ) %>%
#   components()
#
# seasonal <- select(unemp, unemp)
# fit_snaive <- seasonal %>% model(SNaive = SNAIVE(season_year ~ lag("year")))
# tidy(fit_snaive)
#
# decomposition_model_adjust %>% autoplot()
fit <-
unemp %>%
model(
snaive = SNAIVE(unemp),
ses = ETS(unemp ~ error("A") + trend ("N") + season("N")),
drift = RW(unemp ~ drift()),
dcmp_ses = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
SNAIVE(season_year)
),
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)
)
)
# fit <-
# unemp %>%
#   model(
#     stl = STL(unemp ~ trend(window=21)+ season(window=13))
#   ) %>%
#   components()
#
# seasonal <- select(unemp, unemp)
# fit_snaive <- seasonal %>% model(SNaive = SNAIVE(season_year ~ lag("year")))
# tidy(fit_snaive)
#
# decomposition_model_adjust %>% autoplot()
fc <- decomposition_model %>% forecast(m = 12)
fc <- decomposition_model %>% forecast(m = 12)
fc <- decomposition_model %>% forecast(m = 12)
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()
dcmp_classic %>%
ACF(random) %>%
autoplot()
library(fpp3)
library(readr)
library(patchwork)
unemp <- readr::read_csv(file.choose())
# Convert column "date" to a yearmonth object
unemp <- unemp %>%
mutate(date = yearmonth(date)) %>%
as_tsibble()
unemp
# YOUR CODE GOES HERE
unemp %>% autoplot() +
scale_x_yearmonth(breaks="1 year")+
theme(axis.text.x = element_text(angle=90))
# DO NOT ADD ADDITIONAL CODE SNIPPETS
## YOUR CODE GOES HERE
# Compute moving averages to estimate the trend
# Because the seasonal period is 12, we need a 2x12-MA
unemp <- unemp %>%
mutate(
`12-MA` = slider::slide_dbl(unemp, mean,
.before = 5, .after = 6, .complete = TRUE),
`trend_class` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
# Plot the computed trend
unemp %>%
autoplot(unemp, colour = "gray") +
geom_line(aes(y = `trend_class`), colour = "#D55E00")
#labs(y = "Persons (thousands)",
#    title = "Total employment in US retail")
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
## YOUR CODE GOES HERE
unemp <- unemp %>% mutate(
detrended_class = unemp - `trend_class`
)
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
## YOUR CODE GOES HERE
unemp %>% ACF(unemp , lag_max= 12* 10) %>% autoplot() + labs(title="Original Time Series")
unemp %>% ACF(detrended_class , lag_max= 12* 10) %>% autoplot() + labs(title="Detrended Time Series")
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
# YOUR CODE GOES HERE
stl <- unemp %>% model(
stl_default = STL(unemp),
stl_adjust = STL(unemp ~ trend(window=5) + season(window=7))
) %>% components()
stl %>% filter(.model=="stl_default") %>% autoplot() + labs(title="STL Default")
stl %>% filter(.model=="stl_adjust") %>% autoplot() + labs(title="STL Adjusted")
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
# YOUR CODE GOES HERE
fit <- unemp %>% model(
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=7)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)),
dcmp_stl = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=7)),
ETS(season_adjust ~ error("A") + trend("N") + season("N")),
SNAIVE(season_year))
)
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
# YOUR CODE GOES HERE
fc <- fit %>% forecast(h=12)
fc %>% filter(.model == "dcmp_drift") %>%
autoplot(unemp) +
labs(title="Decomposition Drift")
fc %>% filter(.model == "dcmp_stl") %>%
autoplot(unemp) +
labs(title="Decomposition SES")
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()
# YOUR CODE GOES HERE
#General Residuals
fit %>%
select(dcmp_stl) %>% # Select only dcmp_drift
gg_tsresiduals()+
labs(title="Decomposition SES")
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()+
labs(title="Decomposition Drift")
#Normality
#Decomposition using Drift
mean_vals <- filter(dcmp_drift_augment , .model=="dcmp_drift")
# YOUR CODE GOES HERE
#General Residuals
fit %>%
select(dcmp_stl) %>% # Select only dcmp_drift
gg_tsresiduals()+
labs(title="Decomposition SES")
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()+
labs(title="Decomposition Drift")
#Normality
#Decomposition using Drift
# mean_vals <- filter(dcmp_drift_augment , .model=="dcmp_drift")
# Generate qq_plot
p1 <- ggplot(mean_vals, aes(sample = .innov))
## YOUR CODE GOES HERE
stl_fit <- unemp %>% model(
stl_default = STL(unemp),
stl_adjust = STL(unemp ~ trend(window=5) + season(window=7))
)
nRows = nrow(stl)
nRows/24 > 5 # TRUE --> l = 2m = 2*12 =24
#1.Plot the ACF of the remainder of both decompositions.
stl %>% filter(.model=="stl_default") %>% ACF(remainder) %>% autoplot() + labs(title="STL Default Remainders")
stl %>% filter(.model=="stl_adjust") %>% ACF(remainder) %>% autoplot() + labs(title="STL Adjusted Remainders")
#2.Compute a single number that measures the amount of autocorrelation left in the remainder of each decomposition.
stl_default <- stl_fit %>% select(stl_default) %>% augment()
stl_adjust <- stl_fit %>% select(stl_adjust) %>% augment()
corr_metric_default <-  stl_default %>% features(remainder, ljung_box, lag = 24, dof = 1)
corr_metric_adjust[3]
corr_metric_adjust[3]
corr_metric_adjust <- stl_adjust %>% features(.innov, ljung_box, lag = 24, dof = 1)
corr_metric_adjust
corr_metric_default <-  stl_default %>% features(remainder, ljung_box, lag = 24, dof = 1)
stl_default
library(fpp3)
library(readr)
unemp <- readr::read_csv(file.choose())
# Convert column "date" to a yearmonth object
unemp <- unemp %>%
mutate(date = yearmonth(date)) %>%
as_tsibble()
unemp
unemp %>% autoplot() + scale_x_yearmonth(breaks = "1 week") + theme(axis.text.x = element_text(angle = 90))
unemp <- unemp %>%
mutate(
`12-MA` = slider::slide_dbl(unemp, mean,
.before = 5, .after = 6, .complete = TRUE),
`trend_class` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
# Plot
unemp %>%
autoplot(unemp, colour = "gray") +
geom_line(aes(y = `trend_class`), colour = "#D55E00")
unemp <- unemp %>%
mutate(
detrended_class = unemp - trend_class)
unemp %>% autoplot(detrended_class) + scale_x_yearmonth(breaks = "1 year") + theme(axis.text.x = element_text(angle = 90))
unemp %>% ACF(unemp, lag_max = 12 * 5) %>% autoplot()
unemp %>% ACF(detrended_class, lag_max = 12 * 5) %>% autoplot()
stl_default <-
unemp %>%
model(stl = STL(unemp ~ trend(window=5))) %>%
components()
stl_default %>% autoplot()
stl_adjust <-
unemp %>%
model(stl = STL(unemp ~ trend(window=5) + season(window=7))) %>%
components()
stl_adjust %>% autoplot()
fit <-
unemp %>%
model(
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=7)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)),
dcmp_stl = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=7)),
ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
SNAIVE(season_year))
)
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()
model_vals <- fit %>% augment()
dcmp_vals <- filter(model_vals, .model=="dcmp_drift")
p1 <- ggplot(dcmp_vals, aes(sample = .innov)) +
stat_qq() +
stat_qq_line()
p2 <- ggplot(data = dcmp_vals, aes(y = .innov)) +
geom_boxplot(fill="light blue", alpha = 0.7) +
stat_summary(aes(x=0), fun="mean", colour= "red")
p1
p2
stl_default %>% ACF(remainder) %>% autoplot()
stl_adjust %>% ACF(remainder) %>% autoplot()
corr_metric1 <- stl_default %>% features(remainder, box_pierce, lag = 24, dof = 1)
corr_metric2 <- stl_adjust %>% features(remainder, box_pierce, lag = 24, dof = 1)
corr_metric_default <- corr_metric1$bp_pvalue
corr_metric_adjust <- corr_metric2$bp_pvalue
corr_metric_adjust < corr_metric_default
corr_metric_default / corr_metric_adjust
corr_metric_default
corr_metric_adjust
corr_metric_default
corr_metric_default
corr_metric_adjust
corr_metric_default / corr_metric_adjust
corr_metric_adjust
library(fpp3)
library(readr)
unemp <- readr::read_csv(file.choose())
# Convert column "date" to a yearmonth object
unemp <- unemp %>%
mutate(date = yearmonth(date)) %>%
as_tsibble()
unemp
# YOUR CODE GOES HERE
# DO NOT ADD ADDITIONAL CODE SNIPPETS
unemp %>% autoplot() +
scale_x_yearmonth(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 50))
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
trend_class <- unemp %>%
mutate(
'5-MA' = slider::slide_dbl(unemp, mean,
.before = 5,
.after = 5,
.complete = TRUE)
)
trend_class %>%
autoplot(unemp) +
geom_line(aes(y = `5-MA`), colour = "#D55E00") +
labs(y = "Unemployment",
title = "5-MA & Time Series Spain Unemp")
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
detrended_class <- trend_class
detrended_class$detrended <- trend_class$unemp - trend_class$`5-MA`
detrended_class %>%
autoplot(detrended) +
labs(y = "Unemployment",
title = "Detrended Data Spain Unemployment") +
scale_x_yearmonth(date_breaks = "1 year") +
theme(axis.text.x = element_text(angle = 50))
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS.
unemp %>% ACF(unemp,lag_max = 48) %>% autoplot()
detrended_class %>% ACF(detrended, lag_max = 48) %>% autoplot()
# YOUR CODE GOES HERE
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
stl_default <- unemp %>%
model(
stl = STL(unemp ~ trend() +
season())) %>%
components()
stl_default %>% autoplot()
stl_adjust <- unemp %>%
model(
stl = STL(unemp ~ trend(window = 5) +
season(window = 5))) %>%
components()
stl_adjust %>% autoplot()
# As there was quite some "big jumps" and the seasonality did not stay the same ("periodic") during the time series, we have to chose small window to not overstate importance of data thats longer in the past
# YOUR CODE GOES HERE
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
fit <-
unemp %>%
model(
snaive = SNAIVE(unemp),
ses = ETS(unemp ~ error("A") + trend ("N") + season("N")),
drift = RW(unemp ~ drift()),
dcmp_stl = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
ETS(season_adjust ~ error("A") + trend ("N") + season("N")),
SNAIVE(season_year)
),
dcmp_drift = decomposition_model(
STL(unemp ~ trend(window=5) + season(window=5)),
RW(season_adjust ~ drift()),
SNAIVE(season_year)
)
)
# YOUR CODE GOES HERE
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
fc <- fit %>% forecast(h = 12)
fc %>%
filter(.model == "dcmp_stl") %>%
autoplot(unemp) +
labs(title = "dcmp_stl Forecast")
fc %>%
filter(.model == "dcmp_drift") %>%
autoplot(unemp) +
labs(title = "dcmp_drift Forecast")
fit %>%
select(dcmp_drift) %>% # Select only dcmp_drift
gg_tsresiduals()
# YOUR CODE GOES HERE
# DO NOT ADD ADDITINAL CODE SNIPPETS, ALL THE CODE SHALL BE CONTAINED HERE
# Normality using 2m as lag
fit %>%
select(dcmp_drift) %>%
augment() %>%
features(.innov, box_pierce, lag = 24)
# boxplot
fit %>%
select(dcmp_drift) %>%
augment() %>%
ggplot( aes(y = .innov)) +
geom_boxplot(fill="light blue", alpha = 0.7) +
stat_summary(aes(x=0), fun="mean", colour= "red")
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
stl_default %>% ACF(remainder) %>% autoplot()
stl_adjust %>% ACF(remainder) %>% autoplot()
stl_default %>% features(remainder, feat_acf)
stl_adjust %>% features(remainder, feat_acf)
## YOUR CODE GOES HERE
## DO NOT ADD ADDITIONAL CODE SNIPPETS
stl_default %>% ACF(remainder) %>% autoplot()
stl_adjust %>% ACF(remainder) %>% autoplot()
stl_default %>% features(remainder, feat_acf)
stl_adjust %>% features(remainder, feat_acf)
