---
title: "2024FALL_G2_MIDTERM_TSA"
format: html
editor: source
---

```{r}
library(fpp3)
library(readr)
```

# 0. Import data

Run the command below. A pop-up window requesting you to select a file will open. Select the file "F2024_TSA_G2_Midterm_Data.csv".

```{r}
demand_hdata <- 
  read_csv(file.choose()) %>% 
  as_tsibble(index=timestamp)

demand_hdata
```

# 1. Basic plots (3.5 points)

# 1.1 Create a timeplot of the data. Adjust the grid so that we clearly see the end of every week (major breaks) and the end of every day (minor breaks) (1.25 points)

```{r}
# YOUR CODE GOES HERE
```

# 1.2 Looking at the previous timeplot, describe if you would expect any seasonal behavior. If so, specify the length of the seasonal period m (the number of timesteps that make up a period) (1.25 points)

---------

YOUR ANSWER GOES HERE - 40 words max

---------

# 1.3 Create an ACF plot of the data. Give an interpretation of this plot (1 point).

HINT: BE SURE TO INCLUDE A SUFFICIENT NUMBER OF LAGS ON THIS PLOT!! (argument `lag_max`)

```{r}
# YOUR CODE GOES HERE
```

---------

YOUR ANSWER GOES HERE - 40 words max

---------

# 2. Decomposition (5 points)

# 2.1 Estimate the trend using the same algorithm as classical decomposition would. DO NOT use the function `classical_decomposition()`, perform the computation manually. Store the resulting trend and any intermediate operations in a dataframe (tsibble) called `manual_dcmp` (1.25 points)

```{r}
# YOUR CODE GOES HERE
```

# 2.2 Now use the function `classical_decomposition()`. Store the resulting components in a variable called `class_dcmp`. Compare the trend in `class_dcmp` to the trend in `manual_dcmp`. If you did things properly, they should perfectly match. (1.25 points)

```{r}
# YOUR CODE GOES HERE
```

# 2.3 Detrend the time series assuming it is additive and perform any additional necessary steps to obtain the seasonal component that an additive classical decomposition would return. Store that seasonal component in the tsibble `manual_dcmp`. Then compare the seasonal component in `manual_dcmp` to the seasonal component in `class_dcmp`. If you did things properly, both should match. (1.25 points)

`HINT`: at one point, you need to use the function `hour()` to create an identifier for groups.

```{r}
# YOUR CODE GOES HERE
```

# 2.4 Obtain the remainder component and check its autocorrelation graph. Do you think it corresponds to a good decomosition? (0.75)

```{r}
# YOUR CODE GOES HERE
```

---------

YOUR ANSWER GOES HERE - 40 words max

---------

# 2.5 Use `autoplot()` to depict the decomposition obtained in 2.2, which you stored in `class_dcmp`. Assess the decomposition however you see fit, judging whether it is good or not and why. (0.5 points)

```{r}
# YOUR CODE GOES HERE
```

---------

YOUR ANSWER GOES HERE - 50 words max

---------

# 3. Time series data wrangling (1.5 points)

The dataset `vic_elec` contains half hourly electricity demand in the region of Victoria (Australia). It is loaded along with the `fpp3`

# 3.1 Perform any necessary operation to retain only data corresponding to January 2012. Store the result in `vic_elec_201201`

```{r}
# YOUR CODE GOES HERE
```

# 3.2 The command `lubridate::floor_date(Time, "hour")` allows you to truncate the column "Time" to hourly accuracy. Use this to compute the total demand (sum) every hour instead of every half hour.

```{r}
# YOUR CODE GOES HERE
```