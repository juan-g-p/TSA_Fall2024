inv_cost = -1/Cost
)
a10
a10 <-
a10 %>%
mutate(
sqrt_cost = sqrt(Cost),
cbrt_cost = Cost^(1/3),
log_cost = log(Cost),
inv_cost = -1/Cost
)
a10
a10 <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(cost),
stl_sqrt_cost = STL(sqrt(Cost))
stl_log_cost = STL(Cost^(1/3))
a10 <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost))
stl_log_cost = STL(Cost^(1/3))
a10 <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
)
a10
a10
a10 <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
) %>%
# 2. Components: extract components for all models
components
a10_components <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
) %>%
# 2. Components: extract components for all models
components()
library(fpp3)
us_retail_employment <- us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID)
autoplot(us_retail_employment, Employed) +
labs(y = "Persons (thousands)",
title = "Total employment in US retail")
dcmp_components <-
us_retail_employment %>%
# 1. Define and fit the decomposition model
model(stl = STL(Employed)) %>%
# 2. Extracts the components out of the model. Note that the function
# components is not applicable to every type of model. It is applicable to
# decomposition models and ETS models (later in the subject).
components(dcmp)
dcmp_components %>%
# 1. Format dataframe to tsibble
as_tsibble() %>%
# 2. Plot the decomposition using ggplot
autoplot(Employed, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Persons (thousands)",
title = "Total employment in US retail"
)
dcmp_components %>% autoplot()
a10 <-
# 1. Dataframe containing monthly medicare expenses per type of drug
PBS %>%
# 2. Filter for antidiabetic drigs
filter(ATC2 == "A10") %>%
# 3. select subset of columns
select(Month, Concession, Type, Cost) %>%
# 4. Add the total expenditure per month
index_by(Month) %>%
summarise(TotalC = sum(Cost)) %>%
# 5. Scale to millions
mutate(Cost = TotalC / 1e6)
# 6. Plot
autoplot(a10, Cost) +
labs(y = "$ (millions)",
title = "Australian antidiabetic drug sales")
# Examine the dataset
a10
x11_dcmp <-
a10 %>%
# 1. Define and fit the decomposition model
model(x11 = X_13ARIMA_SEATS(Cost ~ x11())) %>%
# 2. Extracts the components out of the model. Note that the function
# components is not applicable to every type of model. It is applicable to
# decomposition models and ETS models (later in the subject).
components()
x11_dcmp
x11_dcmp %>%
as_tsibble() %>%
autoplot(Cost, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "$ (millions)",
title = "Australian antidiabetic drug sales"
)
x11_dcmp %>% autoplot()
a10_components <-
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
) %>%
# 2. Components: extract components for all models
components()
a10
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
)
a10 %>%
# # 1. Define different versions of the transformed variable
# mutate(
#   sqrt_cost = sqrt(Cost),
#   cbrt_cost = Cost^(1/3),
#   log_cost = log(Cost),
#   inv_cost = -1/Cost
#   )
# 1. Define different decomposition models, one for each transformation
model(
stl_cost = STL(Cost),
stl_sqrt_cost = STL(sqrt(Cost)),
stl_log_cost = STL(Cost^(1/3)),
stl_inv_cost = STL(-1/Cost)
) %>%
# 2. Components: extract components for all models
components()
a10 <-
a10 %>%
# Define different versions of the transformed variable
mutate(
sqrt_cost = sqrt(Cost),
cbrt_cost = Cost^(1/3),
log_cost = log(Cost),
inv_cost = -1/Cost
)
a10
dcmp <- a10 %>%
model(stl = STL(sqrt_cost))
components(dcmp)
components(dcmp) %>%
as_tsibble() %>%
autoplot(sqrt_cost, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "square root $ (millions)",
title = "Australian antidiabetic drug sales"
)
library(kableExtra)
library(patchwork)
library(fpp3)
aus_exports <-
global_economy %>%
filter(Country == "Australia") %>%
# Generate the moving average
mutate(
#The slider function applies a function to "sliding" time windows.
#In this case it is a 7-MA because we are moving from j=-3 (before = 3)
# to j=+3 (after = 3).
`7-MA` = slider::slide_dbl(Exports, mean,
#.complete = TRUE -> function evaluated only on full windows
# This means that the MA will not be computed for the first
# and last three points of the time series
.before = 3, .after = 3, .complete = TRUE)
) %>%
select(Country, Code, Year, Exports, `7-MA`)
aus_exports
round(mean(aus_exports$Exports[1:7]), 4) == round(aus_exports$`7-MA`[[4]], 4)
aus_exports %>%
autoplot(Exports) +
geom_line(aes(y = `7-MA`), colour = "#D55E00") +
labs(y = "% of GDP",
title = "Total Australian exports")
aus_exports <- global_economy %>% filter(Country=='Australia')
# Create the different Moving Averages of order i.
# Note that i is always uneven
for (i in seq(3, 13, by = 2)){
col_name <- paste0(as.character(i), "-MA")
width = (i-1)/2 # Number of points to be left to the left an to the right
aus_exports[[col_name]] = slider::slide_dbl(aus_exports$Exports, mean,
#.complete = TRUE -> function evaluated only on full windows
.before = width, .after = width, .complete = TRUE)
}
aus_exports <- aus_exports %>%
select(Exports, `3-MA`, `5-MA`, `7-MA`, `9-MA`, `11-MA`, `13-MA`)
aus_exports
# Do not spend too much time figuring out this code, focus on the output.
plotlist <- list()
n_graph <- 1
for (i in seq(3, 13, by = 2)){
col_name <- paste0(as.character(i), "-MA")
col_name = sym(col_name)
plt <- aus_exports %>%
autoplot(Exports) +
#Lo pod√≠amos sustituir por aes_string!!!
geom_line(aes(y = !!col_name), colour = "#D55E00") +
labs(y = "% of GDP",
title = paste(as.character(i), "-MA"))
plotlist[[n_graph]] <- plt
n_graph = n_graph + 1
}
plotlist[[1]] + plotlist[[2]] + plotlist[[3]] + plotlist[[4]] +
plotlist[[5]] + plotlist[[6]]
# Filter dataset
beer <- aus_production %>%
filter(year(Quarter) >= 1992) %>%
select(Quarter, Beer)
beer <-
beer %>%
mutate(
# Unbalanced window for the first 4-MA: 1 point to the left, two
# points to the right
`4-MA` = slider::slide_dbl(Beer, mean,
.before = 1, .after = 2, .complete = TRUE),
# Subsequent two MA to make the overall window balanced
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
beer %>% select(Quarter, Beer, `4-MA`, `2x4-MA`) %>% head(5)
beer %>% select(Quarter, Beer, `4-MA`, `2x4-MA`) %>% tail(5)
beer %>%
autoplot(Beer) +
geom_line(aes(y = `2x4-MA`), colour = "#D55E00") +
labs(y = "Production of beer (megalitres)",
title = "Production of beer in Australia starting on 1992")
# Filter the series and select relevant columns
us_retail_employment <-
us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID)
# Compute moving averages
us_retail_employment_ma <- us_retail_employment %>%
mutate(
`12-MA` = slider::slide_dbl(Employed, mean,
.before = 5, .after = 6, .complete = TRUE),
`2x12-MA` = slider::slide_dbl(`12-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
# Plot
us_retail_employment_ma %>%
autoplot(Employed, colour = "gray") +
geom_line(aes(y = `2x12-MA`), colour = "#D55E00") +
labs(y = "Persons (thousands)",
title = "Total employment in US retail")
q_elec <-
vic_elec %>%
index_by(yearquarter(Time)) %>%
summarise(
q_demand = mean(Demand)
)
q_elec
q_elec <-
q_elec %>%
mutate(
`4-MA` = slider::slide_dbl(q_demand, mean,
.before = 2, .after = 1, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 0, .after = 1, .complete = TRUE)
)
q_elec
q_elec <-
q_elec %>%
mutate(
`4-MA_alt` = slider::slide_dbl(q_demand, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA_alt` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
# Check that you can produce the same result inverting the order of before-after
# The output of the final time series 2x12 MA is the same
q_elec <-
q_elec %>%
mutate(
`4-MA_alt` = slider::slide_dbl(q_demand, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA_alt` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
all.equal(q_elec$`2x4-MA`, q_elec$`2x4-MA_alt`)
q_elec$`2x4-MA_alt`
q_elec$`2x4-MA`
q_elec <-
q_elec %>%
mutate(
`4-MA` = slider::slide_dbl(q_demand, mean,
.before = 2, .after = 1, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 0, .after = 1, .complete = TRUE)
)
q_elec <-
q_elec %>%
mutate(
`4-MA_alt` = slider::slide_dbl(q_demand, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA_alt` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
q_elec
# Check that you can produce the same result inverting the order of before-after
# The output of the final time series 2x12 MA is the same
q_elec <-
q_elec %>%
mutate(
`4-MA_alt` = slider::slide_dbl(q_demand, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA_alt` = slider::slide_dbl(`4-MA_alt`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
all.equal(q_elec$`2x4-MA`, q_elec$`2x4-MA_alt`)
library(fpp3)
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
head(bricks)
knitr::include_graphics('./figs/forecasting_task.png')
library(fpp3)
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
head(bricks)
knitr::include_graphics('./figs/forecasting_task.png')
library(fpp3)
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
head(bricks)
knitr::include_graphics('./figs/forecasting_task.png')
fit <- bricks %>% model(mean = NAIVE(Bricks))
fitted_vals <- fit %>% augment()
fc <- fit %>% forecast(h=8)
fc %>%
autoplot(bricks) +
geom_line(data=fitted_vals,
aes(y=.fitted), colour = "red", linetype = "dashed")
knitr::include_graphics('./figs/1_australian_visitors_intervals.png')
knitr::include_graphics('./figs/forecast_distr_2.png')
knitr::include_graphics('./figs/forecast_distr_3.png')
fit <-
bricks %>%
model(
mean = MEAN(Bricks)
)
fit
fitted_vals <-
fit %>%
augment()
head(fitted_vals)
fitted_vals %>%
filter(.model == "mean") %>%
autoplot(Bricks, colour = "gray") +
geom_line(aes(y=.fitted), colour = "blue", linetype = "dashed")
# produce forecasts for 8 timesteps
forecasts <- fit %>% forecast(h = 8)
forecasts
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level = FALSE)
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level = FALSE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level = TRUE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level=FALSE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level=TRUE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level=TRUE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks, level=FALSE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
# To depict the forecasts and the original series use autoplot() with the
forecasts %>%
# Depicts the original time series and the forecasts
autoplot(bricks) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
tidy(fit)
aus_exports <- filter(global_economy, Country == "Australia")
autoplot(aus_exports, Exports)
fit <- aus_exports %>% model(Naive = NAIVE(Exports))
fit
# Extract fitted values and inspect table
fitted_vals <- fit %>% augment()
head(fitted_vals)
# Print fitted values along with the original series
fitted_vals %>%
filter(.model == "Naive") %>%
autoplot(Exports, colour = "gray") +
geom_line(aes(y=.fitted), colour = "blue", linetype = "dashed")
fit <- aus_exports %>% model(Naive = NAIVE(Exports))
fit
fit <- aus_exports %>% model(Naive = NAIVE(Exports))
fit
# produce forecasts for 8 timesteps
forecasts <- fit %>% forecast(h = 8)
forecasts
# Depict the forecasts
forecasts %>%
autoplot(aus_exports, level = FALSE) +
# Overlays the fitted values
geom_line(data = fitted_vals, aes(y = .fitted), colour = "blue", linetype = "dashed")
tidy(fit)
