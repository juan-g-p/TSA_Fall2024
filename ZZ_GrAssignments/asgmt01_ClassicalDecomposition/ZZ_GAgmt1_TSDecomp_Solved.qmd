---
title: "04_D_ClassicalDecomposition_Assignment"
format: html
editor: source
params:
  print_sol: true
  print_sol_int: true
toc: true
toc-location: left
toc-depth: 6
self-contained: true
---

# Instructions

# Libraries

```{r}
library(fpp3)
```


# 1. 

Take the dataset `vic_elec` and aggregate the data to obtain the daily demand using `index_by()`. Store the result in a new variable called `vic_elec_d`. Then filter `vic_elec_d` to retain only data about 2012.

The command below computes the classical decomposition considering a period of 1 week (instead of 1 year) having filtered for the year 2012.

```{r}
vic_elec_d <- 
  
  vic_elec %>%
  
    index_by(Date) %>%
  
    summarize(
          avg_demand = mean(Demand, na.rm = TRUE)
      ) %>%
  
    filter(year(Date) == 2012)
```

# 2. 

Produce a timeplot of the data obtained on point 1. The timeplot should have major breaks every 5 weeks and minor breaks every week.

```{r}
vic_elec_d %>% 
  
  autoplot() + 
  
  scale_x_date(
    breaks = "5 weeks",
    minor_breaks = "1 week"
  ) + 
  
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# 3. 

## 3.1

Fit a `classical_decomposition()` model to the data `vic_elec_d`. Make the decomposition *multiplicative*. Store the result in a variable called `dcmp_model`

NOTE: an additive decomposition would be more sensible and you may apply that model. We are using a multiplicative decomposition so that you implement the multiplicative variant of the algorithm.

```{r}
dcmp_model <-
  
  vic_elec_d %>%
  
      model(
        decomp = classical_decomposition(avg_demand, type = "multiplicative")
        )

dcmp_model
```

QUESTION: **Answer in 30 words or less**

* What are the dimensions of dcmp_model? (number of rows, number of columns). Why?

    * One row because there is only one time series and one column because there is only one model.

## 3.2

Use the function `components()` on `dcmp_model` to extract the different components. Store the result in a variable called `dcmp_components`

```{r}
dcmp_components <- 
  dcmp_model %>% 
  components()
```

## 3.3 

Extract the column `seasonal` from `dcmp_components`. Check that the sum of its first 7 elements adds up to 7. This is because the seasonal period being considered is one week (7 days)

```{r}
sum(dcmp_components$seasonal[1:7])
```

## 3.4 

Make a plot of the ecomposition (4 panels showing the original time series and the components combined in a single graph) and an ACF plot of the random component of the decomposition.

```{r}
dcmp_components %>% 
  autoplot()

dcmp_components %>% 
  ACF(random, lag_max = 7 * 4) %>% 
  autoplot()
```

# 4.

Implement the same decomposition manually followin the steps detailed in the theory lesson. There the complete code for the additive case was given. You may adapt that code to make it valid for the multiplicative case.

## Step 1:

* Estimate the trend. Since m is 7, you need to use a 7-MA. Store the result of the trend in a column called `7-MA`. Note that, since the column name starts with a number, you will need to specify this name within backticks (backtick symbol: `):

```{r}
manual_decomposition <- 
  vic_elec_d %>% 
  mutate(
    `7-MA` = slider::slide_dbl(avg_demand, mean, 
                               .before = 3, .after = 3, .complete = TRUE)
  )
```

* Plot the computed trend along with the original time series:

```{r}
manual_decomposition %>% 
  autoplot(avg_demand, color = "grey", alpha = 0.5) + 
  geom_line(aes(y = `7-MA`), color = "#D55E00")
```

* Compare your manually computed trend with the trend component resulting from question 3 with the following code, which should evaluate to true:

```{r}
all.equal(dcmp_components$trend, manual_decomposition$`7-MA`)
```

## Step 2:

* Detrend the time series. Do not forget we are dealing with a multiplicative decomposition. Store the result in a new column called `detrended` within the dataframe `manual_decomposition`.
* NOTE: because the column 7-MA starts with a number, you will need to refer to it using backticks in your code.

```{r}
manual_decomposition <- 
  manual_decomposition %>% 
  mutate(
    detrended = avg_demand / `7-MA`
  )
```

* Depict the detrended component:

```{r}
manual_decomposition %>% 
  autoplot(detrended)
```

## Step 3: 

Compute the seasonal component

### Step 3.1:

* Create a new column called `n_day` that identifies the day of the week. Use the following function to produce it: `wday(Date, label = FALSE, abbr = FALSE)`

```{r}
manual_decomposition <- 
  manual_decomposition %>% 
  mutate(
    n_day = wday(Date, label = FALSE, abbr = FALSE)
  )
```

* Create a new dataframe called `df_seasonal` that contains the averaged values of the detrended time series for each day of the week (that is, for each of the values of `n_day`, the previously computed column). Make sure that the final output is a `tsibble`. The averaged values shall be stored in a column called `s_unadj`.

```{r}
df_seasonal <- 
  
  manual_decomposition %>%
  
  # turn into a tibble to be able to use group_by
  # without the limitations on a tsibble
  as_tibble() %>% 
  
  # group by the created identifier
  group_by(n_day) %>%
  
  # compute the average seasonal component for every month
  summarise(
    s_unadj = mean(detrended, na.rm = TRUE)
  ) %>%
  
  ungroup() %>% 
  
  # Turn back into a tsibble
  as_tsibble(index = n_day)

df_seasonal
```

* Create a plot of the obtained unadjusted seasonal component:

```{r}
df_seasonal %>%
  
  autoplot(s_unadj) +
  
  scale_x_continuous(breaks = seq(1, 7),
                     minor_breaks = seq(1, 7)) +
  
  geom_point(color = "red")
```

### Step 3.2:

Adjust the seasonal component

* Compute `a`, the sum of `s_unadj`:

```{r}
a <- sum(df_seasonal$s_unadj) 
a
```

* Compute `x = m - a`, the difference between the sum of `s_unadj` and `m`.

```{r}
x = 7 - a
x
```

* Divide `x` by `m` and create a new column within `df_seasonal` called `seasonal_c` equal to `s_unadj` + this correction.

```{r}
df_seasonal <- 
  
  df_seasonal %>%
  
  # Correction so that the sum of the seasoan components is 0
  mutate(
        seasonal_c = s_unadj  + x/7
    ) %>% 
  
  # # Drop s_unadj since we do not need it anymore.
  select(n_day, seasonal_c)
```

* Check that the sum of the column `seasonal_c` in `df_seasonal` is now 7, as desired:

```{r}
sum(df_seasonal$seasonal_c)
```

* Bring back the seasonal component from `df_seasonal` to the dataframe `manual_decomposition` using a `left_join`:

```{r}
manual_decomposition <- 
  left_join(manual_decomposition, df_seasonal, by = "n_day")

manual_decomposition
```

* Check that the column `seasonal_c` from `manual_decomposition` matches the column `seasonal` from `dcmp_components` with the following code, which should evaluate to `TRUE`. Specifically, this code means that both computations coincide down to the third decimal.

NOTE: there are reasons that they do not exactly match beyond three decimals. These have to do with the internals of `classical_decomposition()` and with floating point arithmetic. We will not investigate this further. But this accuracy is enough for us to understand what the algorithm is doing. Besides, beyond three decimals the difference are very small.

```{r}
n_dec <-  3
all.equal(round(manual_decomposition$seasonal_c, n_dec), 
          round(dcmp_components$seasonal, n_dec)
        )
```

## Step 4:

Compute the random component by removing the seasonal component from the detrended time series. Bear in mind we are dealing with a classical decomposition. Store the result in a new column called `random` within `manual_decomposition`

```{r}
# Compute remainder component:
manual_decomposition <- 
  manual_decomposition %>%
  mutate(
        random = detrended / seasonal_c
      )
```

# 5. 

Check your result computing the maximum difference between all the vectors in your decomposition and all the vectors in the classical decomposition, in absolute value terms.

NOTE: for reasons beyond the scope of the subject, they do not exactly match beyond three decimals. These have to do with the internals of `classical_decomposition()` and with floating point arithmetic. We will not investigate this further. But this accuracy is enough for us to understand what the algorithm is doing. Besides, beyond three decimals the difference is very small anyway.

```{r}
max_dev_seasonal <- max(abs(dcmp_components$seasonal - manual_decomposition$seasonal_c), na.rm = TRUE)
max_dev_trend <- max(abs(dcmp_components$trend - manual_decomposition$`7-MA`), na.rm = TRUE)
max_dev_rand <- max(abs(dcmp_components$random - manual_decomposition$random), na.rm = TRUE)

max(c(max_dev_seasonal, max_dev_trend, max_dev_rand))
```

# 6. 

Produce a ggplot graph that depicts the decomposition you just produced:

```{r}
# As an additional ggplot visualization exercise, below the code to visualize
# the decomposition we have computed manually

# Define levels for the factor variable to ensure proper ordering
# in the facet grid figure.
factor_levels = c("avg_demand", "trend", "seasonal_c", "random")

manual_decomposition_long <- 
  
  manual_decomposition %>% 

    # Rename so that the labels are consistent
    rename(trend = `7-MA`) %>% 
  
    # Select the columns of interest
    select(Date, avg_demand, trend, seasonal_c, random) %>% 
  
    # Generate long format based on a single variable so that we can
    # facet_grid following this variable
    pivot_longer(cols = avg_demand:random, names_to = "component") %>% 
    
    # Convert to factor to ensure proper ordering in the figure
    mutate(
      component = factor(component, levels=factor_levels)
    )

# Now generate the graph
manual_decomposition_long %>% 
  
  ggplot(aes(x = Date, y = value)) +
  
  geom_line() +
  
  # scales = "free_y" so that each component has an adapted y-axis range
  facet_grid(component ~ ., scales = "free_y")
```

```{r}

```

